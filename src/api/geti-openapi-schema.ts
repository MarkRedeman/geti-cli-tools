/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    '/personal_access_tokens/organization': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Organization ID for Personal Access Token.
         * @description Return ID for Organization that Personal Account Token is created for. Use returned value in all subsequent calls as `organization_id` parameter.
         */
        get: operations['PersonalAccessTokenOrganization'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get information about all workspaces
         * @description List all workspaces in an organization.
         */
        get: operations['GetAllWorkspaces'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/projects': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get info about all projects in a workspace
         * @description Get all projects in the workspace.
         */
        get: operations['GetAllProjectsInAWorkspace'];
        put?: never;
        /**
         * Create a project
         * @description Create a project in a workspace. Please refer to the schema to see all the supported tasks and please refer to the examples to see how
         *     the project is constructed. At the moment, Geti supports projects with a single deep learning task, or with two in a
         *     chain (Detection -> Classification and Detection -> Segmentation).
         *     A few label constraints:
         *     - Detection projects must have at least 1 label provided.
         *     - A default 'No object' label is automatically created for detection and segmentation tasks.
         *     - Classification projects require at least two labels (top-level, if hierarchical). For binary classification, please declare the negative label explicitly.
         *     - A default 'No class' label is automatically created for classification tasks if there are no exclusive groups with 2+ labels. In practice, multilabel classification has the empty label, multiclass classification does not.
         *     - Anomaly project must either have 2 labels provided (one being is_anomalous), or no labels provided.
         */
        post: operations['CreateProject'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/projects_names': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the names of all projects in a workspace.
         * @description Get names of all projects in a workspace
         */
        get: operations['GetAllProjectsNamesInAWorkspace'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get info about a project
         * @description Get information about a project.
         */
        get: operations['GetProjectInfo'];
        /**
         * Edit a project
         * @description Edit project properties. This is limited to:
         *     - Editing project name
         *     - Adding or removing labels
         *     - Editing label name, color, and hotkey.
         */
        put: operations['EditProject'];
        post?: never;
        /**
         * Delete a project
         * @description Delete a project. Note that a deleted project cannot be recovered.
         */
        delete: operations['DeleteProject'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/thumbnail': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Download the thumbnail of a project
         * @description Download a project thumbnail with height and width as specified in the request parameters.
         */
        get: operations['DownloadProjectThumbnail'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/datasets': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get datasets
         * @description List all the datasets in a project.
         */
        get: operations['GetDatasetsInfo'];
        put?: never;
        /**
         * Create dataset
         * @description Create a new dataset in a project.
         *     At the moment, the new dataset can be used as a held-out testing dataset via model testing job.
         */
        post: operations['CreateDataset'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get info about dataset
         * @description Get information about a dataset in a project.
         */
        get: operations['GetDatasetInfo'];
        /**
         * Update dataset
         * @description Edit a dataset, currently limited to dataset renaming.
         */
        put: operations['UpdateDatasetInfo'];
        post?: never;
        /**
         * Delete dataset
         * @description Delete dataset along with its media and annotations. Note that this operation is not reversible.
         */
        delete: operations['DeleteDataset'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/statistics': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get statistics for a dataset
         * @description Retrieve the dataset statistics overview, this includes the number of images/videos, number of annotations, and number of objects per label.
         */
        get: operations['GetDatasetStatistics'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/media:query': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Retrieve media items with query
         * @description Retrieves media in the dataset that fulfill the filter condition.
         *     The list of filter fields and their possible operators are shown below.
         *     If a field-operation combination is not supported then the endpoint will respond with the possible operators that are allowed for the filter.
         *     Note that this endpoint returns images and videos. To retrieve the video frames, use the video id returned by this endpoint and pass it to the
         *     [video filtering](#Media/FilterVideoFrames) endpoint.
         *
         *     | Filter fields | Supported operations | Value |
         *     |--------------|----------------------|-------|
         *     |`media_upload_date`, `annotation_creation_date` | `greater`, `less` | Isodate. Example: `2024-09-26T00:00:00+02:00` |
         *     |`media_height`, `media_width`, `shape_area_percentage`, `shape_area_pixel`, `media_size`, `video_duration`, `video_frame_rate`, `video_frame_count` | `greater`, `greater_or_equal`, `less`, `less_or_equal`, `equal`, `not_equal` | integer |
         *     |`media_name` | `equal`, `not_equal`, `contains` | string |
         *     |`label_id`, `shape_type`, `user_name` | `equal`, `not_equal`, `in`, `not_in` | string (id format) |
         *     |`annotation_scene_state` | `equal`, `not_equal`, `in` | string (enum: `annotated`, `partially_annotated`, `unannotated`) |
         *     |`media_type` | `equal`, `not_equal` | string |
         */
        post: operations['FilterMedia'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/media/images': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload an image
         * @description Upload an image to a dataset. Allowed formats are `.jpg`, `.jpeg`, `.bmp`, `.png`, `.tif`, `.tiff`, `.jfif`, and `.webp`. Height and
         *     width of the images must be between 32 and 20000 pixels.
         *     For a classification project, the uploaded image can be annotated directly by specifying the labels in the field `upload_info`.
         */
        post: operations['UploadImage'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/media/images/{image_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get image detail
         * @description Retrieves detailed information of an image.
         */
        get: operations['GetImageDetail'];
        put?: never;
        post?: never;
        /**
         * Delete an image
         * @description Delete an image from a dataset. This operation is not reversible.
         */
        delete: operations['DeleteAnImage'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/media/images/{image_id}/display/full': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Download full image
         * @description Download the image in the original resolution.
         */
        get: operations['DownloadFullImage'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/media/images/{image_id}/display/thumb': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Download the thumbnail of an image
         * @description Download the thumbnail version of an image.
         */
        get: operations['DownloadImageThumbnail'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/media/videos': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload a video
         * @description Upload a video to a dataset. Allowed formats are `.mp4`, `.avi`, `.mkv` `.mov`, `.webm` and `.m4v`. The maximum resolution for
         *     videos is 8K and the file may not be larger than 4.7 GB. For a classification project, all frames of the uploaded
         *     video can be annotated directly by specifying the labels in the field upload_info.
         */
        post: operations['UploadVideo'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/media/videos/{video_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get video detail
         * @description Retrieves the detail of a video.
         */
        get: operations['GetVideoDetail'];
        put?: never;
        post?: never;
        /**
         * Delete a video
         * @description Delete a video from a dataset. This operation is not reversible.
         */
        delete: operations['DeleteAVideo'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/media/videos/{video_id}:query': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Retrieve specific frames from a video by applying a query on the dataset
         * @description Retrieves video frames from a video which fulfill the filter condition.
         *     The list of filter fields and their possible operators are shown below.
         *     If a field-operation combination is not supported then the endpoint will respond with the possible operators that are allowed for the filter.
         *
         *     | Filter fields | Supported operations | Value |
         *     |--------------|----------------------|-------|
         *     |`annotation_creation_date` | `greater`, `less` | Isodate. Example: `2024-09-26T00:00:00+02:00` |
         *     |`shape_area_percentage`, `shape_area_pixel` | `greater`, `greater_or_equal`, `less`, `less_or_equal`, `equal`, `not_equal` | integer |
         *     |`label_id`, `shape_type`, `user_name` | `equal`, `not_equal`, `in`, `not_in` | string (id format) |
         *     |`annotation_scene_state` | `equal`, `not_equal`, `in` | string (enum: `annotated`, `partially_annotated`, `unannotated`) |
         */
        post: operations['FilterVideoFrames'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/media/videos/{video_id}/display/stream': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Download video stream
         * @description Download the video stream in original resolution.
         */
        get: operations['DownloadVideoStream'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/media/videos/{video_id}/display/thumb': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Download the thumbnail for a video
         * @description Download the thumbnail of a video.
         *     The video thumbnail is the downscaled version of a frame from the middle of the video.
         */
        get: operations['DownloadVideoThumbnail'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/media/videos/{video_id}/frames/{frame_index}/display/full': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Download a video frame
         * @description Download a video frame in original resolution.
         */
        get: operations['DownloadVideoFrameFull'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/media/videos/{video_id}/frames/{frame_index}/display/thumb': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Download a thumbnail for a video frame
         * @description Download a video frame thumbnail.
         */
        get: operations['DownloadVideoFrameThumbnail'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/media/images/{image_id}/annotations': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create an annotation for an image
         * @description Create a user annotation for an image. The user annotation scene contains multiple annotations, each of which is defined by a geometric shape and a
         *     list of labels for that shape. The shape is defined in pixels.
         */
        post: operations['CreateImageAnnotation'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/media/images/{image_id}/annotations/{annotation_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get annotations from an image
         * @description Get the user annotation of an image.
         */
        get: operations['GetImageAnnotation'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/media/videos/{video_id}/frames/{frame_index}/annotations': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create an annotation for a video frame
         * @description Create a user annotation for a video frame. The user annotation scene contains multiple annotations, each of which is defined by a geometric shape and a
         *     list of labels for that shape. The shape is defined in pixels.
         */
        post: operations['CreateVideoFrameAnnotation'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/media/videos/{video_id}/frames/{frame_index}/annotations/{annotation_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get annotations from a video frame
         * @description Get the user annotation of a video frame.
         */
        get: operations['GetVideoFrameAnnotation'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/media/videos/{video_id}/range_annotation': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the video annotation range
         * @description Get the labels per frame range for a video. A frame range is a range from a start to end frame combined
         *     with labels. The start and end frame are inclusive.
         */
        get: operations['GetVideoAnnotationRange'];
        put?: never;
        /**
         * Create a video annotation range
         * @description Create a video annotation range for a video. The request body should contain the full list of
         *     frame ranges along with the ids of the labels associated with those ranges. Any previously submitted annotation range
         *     for the same video is overridden by the new request; moreover, any interval of frames that is not explicitly specified
         *     in the request is marked as unannotated.
         */
        post: operations['CreateVideoAnnotationRange'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/media/videos/{video_id}/annotations/latest': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the annotations from a video
         * @description Get the user annotations for the video frames in a video.
         */
        get: operations['GetVideoAnnotation'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/supported_algorithms': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get supported algorithms
         * @description List the algorithms (model architectures) supported for the tasks within a project.
         */
        get: operations['GetSupportedAlgorithms'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}:train': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Train a model
         * @description Submit a training job.
         */
        post: operations['TrainModel'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/train': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Train a model
         * @deprecated
         * @description Submit a training job. Note - This endpoint is deprecated and will be removed after 2025-03-31. Please use the new endpoint `:train` instead.
         */
        post: operations['LegacyTrainModel'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/model_groups': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get information on all models and their groups belonging to a project
         * @description Get information on all model groups in a project. Each model group represents one model architecture that has been trained in the project and
         *     contains a list of successfully trained models of that architecture.
         *     To obtain more detail on each of the model version, please use the [model detail](#Models/GetModelDetail) endpoint.
         */
        get: operations['GetModelGroups'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/model_groups/{model_group_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get information on all models in a model group
         * @description Get information about a specific model group, including the models in that group.
         *     Each model group represents one model architecture that has been trained in the project and
         *     contains a list of successfully trained models of that architecture.
         */
        get: operations['GetModelGroup'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/model_groups/{model_group_id}:activate': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Set the latest model in the model group as the active model
         * @description Set the latest model of the model group to be the active model.
         *     Active model is used to generate predictions requested through the
         *     [predict](#Predictions/GetSinglePrediction) or [explain](#Predictions/GetSingleExplanation) endpoints
         *     (and their batch variants).
         */
        post: operations['ActivateModelGroup'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/model_groups/{model_group_id}/models/{model_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get detailed information on a model
         * @description Get detailed information on a model. The response contains the base model version as well as the list of
         *     optimized models (OpenVINO and ONNX) that are generated from the base model.
         */
        get: operations['GetModelDetail'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/model_groups/{model_group_id}/models/{model_id}/statistics': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get statistics for a model
         * @description Get statistics for a model. The statistics includes training and evaluation statistics.
         *     The response will be a list of charts; each chart will be one of the following types: `text`, `bar`, `radial_bar`, `line` or `matrix`. For each type of chart, the response body has a different
         *     format. See the schemas for information on the format of the response.
         */
        get: operations['GetModelStatistics'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/model_groups/{model_group_id}/models/{model_id}/export': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Export a model.
         * @description Export a zip file with data from a base (non-optimized) model.
         *     This endpoint only handles the export of base model weights, and does not include code.
         */
        get: operations['ExportModel'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/model_groups/{model_group_id}/models/{model_id}/optimized_models/{optimized_model_id}/export': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Export an optimized model
         * @description Export a zip file with data from an optimized model (OpenVINO or ONNX).
         */
        get: operations['ExportOptimizedModel'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/model_groups/{model_group_id}/models/{model_id}:optimize': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Optimize a model
         * @description Submit an optimization job for a model.
         *     The optimization is done through [post-training quantization](https://github.com/openvinotoolkit/nncf/blob/develop/docs/usage/post_training_compression/post_training_quantization/Usage.md).
         */
        post: operations['OptimizeModel'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/model_groups/{model_group_id}/models/{model_id}/optimize': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Optimize a model. Note - This endpoint is deprecated. Please use the new endpoint `:optimize` instead.
         * @deprecated
         * @description Submit an optimization job for a model.
         *     The optimization is done through [post-training quantization](https://github.com/openvinotoolkit/nncf/blob/develop/docs/usage/post_training_compression/post_training_quantization/Usage.md).
         */
        post: operations['LegacyOptimizeModel'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/model_groups/{model_group_id}/models/{model_id}:purge': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Archive a model
         * @description Archive a model. This will permanently delete all the binary files related to the model including base model
         *     weights, optimized model weights and exportable code. This endpoint can only be called on base models, not optimized
         *     models. Additionally, the model must not be the latest in a model group or be the active model.
         */
        post: operations['ArchiveModel'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/pipelines/{pipeline_id}:predict': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate or retrieve a prediction for an image or video frame
         * @description Generate or retrieve a prediction for an image or a single video frame.
         */
        post: operations['GetSinglePrediction'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/pipelines/{pipeline_id}:explain': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate or retrieve explanations for an image or video frame
         * @description Generate or retrieve explanations of the inference output for an image or a single video frame. The explanation is typically the heatmap
         *     highlighting the area which the model finds to be salient. For more info, please refer to [OpenVINO XAI](https://github.com/openvinotoolkit/openvino_xai).
         */
        post: operations['GetSingleExplanation'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/pipelines/{pipeline_id}:batch_predict': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate or retrieve predictions for a batch of video frames
         * @description Generate or retrieve the predictions for a sequence of video frames.
         */
        post: operations['GetBatchPrediction'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/pipelines/{pipeline_id}:batch_explain': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate or retrieve explanations for a batch of video frames
         * @description Generate or retrieve explanations of the inference output for a sequence of video frames. The explanation is typically the heatmap
         *     highlighting the area which the model finds to be salient. For more info, please refer to [OpenVINO XAI](https://github.com/openvinotoolkit/openvino_xai).
         */
        post: operations['GetBatchExplanation'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/pipelines/{task_id}:prompt': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate prediction using the prompt model
         * @description Generate a prediction for an image or a single video frame using the one-shot learned prompt model.
         */
        post: operations['GetPromptPrediction'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/training_revisions/{dataset_revision_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get statistics for a training revision
         * @description Retrieves the training revision statistics overview. A training revision is a specific dataset that has been split into the three Deep Learning subsets; Train, Test, and Validation. The "subset_info" retrieves the split of images and frames (aggregated together from the dataset) among the Train, Test, and Validation subsets. The "dataset_info" retrieves the distribution of images, videos, and frames within the whole dataset.
         */
        get: operations['GetTrainingRevisionStatistics'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/training_revisions/{dataset_revision_id}/media': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve all media in a training revision
         * @description Allows the user to get all the media items in a training revision. A training revision is a dataset which contains the Training, Testing, and Validation subsets. A training revision ID can be obtained after starting at least one training inference.
         */
        get: operations['GetMediaForDataset'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/training_revisions/{dataset_revision_id}/media:query': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Retrieve specific media items by applying a query on the training revision
         * @description Allows the user to quickly filter through their training revision by supplying one or more filters to match media items against. Currently you can filter on 'media_upload_date', 'media_height', 'media_width' , 'media_name', 'label_id',  'annotation_scene_state', 'annotation_creation_date', 'shape_type', 'shape_area_percentage', 'shape_area_pixel', 'subset' and 'user_name'. The following operators can be used 'greater', 'less', 'greater_or_equal', 'less_or_equal', 'equal',  'not_equal', 'in' and 'not_in'. Not all combinations of filter and operator can be used. If a combination is not  supported then the endpoint will respond with the possible operators that are allowed for the filter.
         */
        post: operations['FilterMediaInTrainingRevision'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/training_revisions/{dataset_revision_id}/media/videos/{video_id}:query': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Retrieve specific frames from a video in a training revision by applying a query
         * @description Allows the user to quickly filter through frames in a video in a specific training revision by supplying one or  more filters to match frames against. Currently you can filter on 'label_id',  'annotation_scene_state',  'annotation_creation_date', 'shape_type', 'shape_area_percentage', 'shape_area_pixel' and 'user_name'. The following  operators can be used 'greater', 'less', 'greater_or_equal', 'less_or_equal', 'equal', 'not_equal', 'in' and 'not_in'. Not all combinations of filter and operator can be used. If a combination is not supported, the endpoint will respond  with the possible operators that are allowed for the filter.
         */
        post: operations['FilterVideoFramesInTrainingRevision'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/datasets/active': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the active dataset
         * @description Retrieve active dataset for a project. The active dataset is the set of images and video frames that are suggested for annotation by the active learning algorithm.
         */
        get: operations['GetActiveDataset'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/tests': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get info about all tests in project
         * @description Get all tests in the project. Includes info of the model, datasets and the job id.
         */
        get: operations['GetAllTestsInAProject'];
        put?: never;
        /**
         * Start new model test job
         * @description Starts a new model test job which creates and populates a test resource
         */
        post: operations['TriggerModelTestJob'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/tests/{test_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get info about a test in project
         * @description Get info of test in the project. Includes info of the model, datasets and the job id.
         */
        get: operations['GetTestInAProject'];
        put?: never;
        post?: never;
        /**
         * Delete all info about a test
         * @description Delete all the information relative to a test in the project.
         */
        delete: operations['DeleteTestInAProject'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/tests/{test_id}/results:query': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Retrieve specific media test results by applying a query on the test
         * @description Allows the user to quickly filter through their test results by supplying one or more filters to match results against. Currently you can filter on 'score' and 'label_id' fields. The following operators can be used for score 'greater', 'less', 'greater_or_equal', 'less_or_equal'. The following operator can be used for label id 'equal'. If a non-allowed filter is used, then the endpoint will respond with the possible operators that are allowed.
         */
        post: operations['FilterDataset'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/jobs': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get info on all jobs
         * @description Get info on all jobs, running and completed.
         */
        get: operations['GetJobs'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/jobs/{job_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get info on a job
         * @description Get information on a running or completed job.
         */
        get: operations['GetJob'];
        put?: never;
        post?: never;
        /**
         * Delete a job
         * @description Mark a job as cancelled with a deletion flag
         */
        delete: operations['DeleteJob'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/jobs/{job_id}:cancel': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Cancel a job */
        post: operations['CancelJob'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/configuration': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the current configuration for all components in the project.
         * @description This endpoint gets the configuration for all components in the project, as well as the current algorithms used in the task chain. The configuration is subdivided into components. Examples of configuration components are the deep learning parameters, postprocessing parameters or subset-related parameters. Some components are further divided into parameter groups.
         */
        get: operations['GetFullConfiguration'];
        put?: never;
        /**
         * Set the full configuration for the project.
         * @description This endpoint sets the configuration for all components in the project, as well as the current algorithms used in the task chain. The configuration is subdivided into components, and every component is divided into parameter groups.
         */
        post: operations['SetFullConfiguration'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/configuration/global': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the current configuration for all components in the project.
         * @description This endpoint gets the configuration for all components in the project that are acting project-wide. The configuration is subdivided into components. Examples of configuration components are the active learning parameters or dataset management related parameters. Some components are further divided into parameter groups.
         */
        get: operations['GetGlobalConfiguration'];
        put?: never;
        /**
         * Set the configuration for all components in the project.
         * @description This endpoint sets the configuration for all components in the project that are acting globally, i.e. project-wide. The configuration is subdivided into components, and every component is divided into parameter groups.
         */
        post: operations['SetGlobalConfiguration'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/configuration/task_chain': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the current configuration for all tasks in the project's task chain.
         * @description This endpoint pulls the configuration for all tasks in the project. For every task in the project, the configuration is subdivided into components. Examples of configuration components are the deep learning parameters, postprocessing parameters or subset-related parameters. Some components are further divided into parameter groups.
         */
        get: operations['GetTaskChainConfiguration'];
        put?: never;
        /**
         * Set the configuration for all tasks in the projects' task chain.
         * @description This endpoint sets the configuration for the entire task chain. For every task in the chain, the configuration is subdivided into components, and every component is divided into parameter groups.
         */
        post: operations['SetTaskChainConfiguration'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/configuration/task_chain/{task_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the current configuration for a specific task
         * @description This endpoint pulls the configuration for a specific task. The configuration is subdivided into components, and every component is divided into parameter groups. This endpoint can also be used to pull the configurable parameters related to a single model or an algorithm, from a trainable task.
         */
        get: operations['GetTaskConfiguration'];
        put?: never;
        /**
         * Set the configuration for a specific task.
         * @description This endpoint sets the configuration for a specific task. The configuration is subdivided into components, and every component is divided into parameter groups.
         */
        post: operations['SetTaskConfiguration'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/product_info': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get information about the product
         * @description Get information regarding product version.
         */
        get: operations['GetProductInfo'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/datasets/uploads': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload a dataset archive
         * @description Upload a dataset archive to the server.
         *
         *     This endpoint allows clients to upload a dataset archive directly to the server without using the TUS protocol.
         */
        post: operations['DatasetImportUploadFile'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/datasets/uploads/resumable': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Start uploading a dataset archive using TUS
         * @description Initiate a new TUS session to upload a dataset archive.
         *
         *     This endpoint creates a new upload resource on the server according to the TUS protocol (https://tus.io/protocols/resumable-upload.html).
         *     The client provides metadata such as file size and name in the request headers, and the server responds with a location URL for the newly created resource.
         *     This URL is used for subsequent upload operations (e.g., PATCH, HEAD).
         */
        post: operations['CreateTusDatasetUpload'];
        delete?: never;
        /**
         * Retrieve server capabilities for TUS uploads
         * @description Get information about the TUS protocol versions and extensions supported by the server.
         *     This endpoint allows clients to dynamically adapt their behavior based on server capabilities.
         */
        options: operations['TusDatasetUploadOptions'];
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/datasets/uploads/resumable/{file_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Cancel a TUS upload of a dataset archive
         * @description Cancel the TUS upload of a dataset archive, removing the uploaded data from the server.
         *
         *     This endpoint allows the client to cancel the upload operation and remove the uploaded data from the server.
         *     It is useful for cleaning up incomplete uploads.
         */
        delete: operations['TusDatasetUploadDelete'];
        options?: never;
        /**
         * Get the status of a dataset archive TUS upload
         * @description Retrieve the current status of the TUS upload of a dataset archive.
         *
         *     This endpoint provides information such as the current offset of uploaded data through the `Upload-Offset` header,
         *     allowing the client to resume uploads from the correct position.
         *     It is useful for verifying progress or ensuring consistency before appending further data.
         */
        head: operations['TusDatasetUploadHead'];
        /**
         * Append data to a running TUS upload of a dataset archive
         * @description Upload a chunk of the dataset archive data to the server, appending it to the TUS upload at the specified offset.
         *
         *     This endpoint allows the client to resume uploading data with TUS by sending the remaining data from the last known offset.
         *     It is recommended to choose a large chunk size (based on server limitations) to speed up the overall upload operation.
         */
        patch: operations['TusDatasetUploadPatch'];
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/datasets:prepare-for-import': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Prepare a dataset to be imported as a new project
         * @description Analyze an uploaded dataset archive file and prepare it to be imported as a new project.
         *
         *     This endpoint submits a job to prepare the dataset for import. Specifically, the job scans the dataset
         *     to determine the compatible task types and to identify potential issues in the data.
         *     The status of this operation can be monitored in real-time through the [job status endpoint](#Jobs/GetJob);
         *     once the job is finished, the list of compatible task types, labels and warnings can be found in the job metadata.
         */
        post: operations['PrepareDatasetForImport'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/projects:import-from-dataset': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new project from a prepared dataset
         * @description Finalize the creation of a new project from an imported dataset, that has been previously uploaded and prepared.
         *
         *     This endpoint submits a job to create a new project with a given project name, task type and labels, that will also
         *     contain all the media and annotations from the imported dataset.
         *     The status of this operation can be monitored in real-time through the [job status endpoint](#Jobs/GetJob);
         *     once the job is finished, the id of the created project can be found in the job metadata.
         */
        post: operations['ImportProjectFromDataset'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/datasets:prepare-for-import': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Prepare a dataset to be imported into an already existing project
         * @description Analyze an uploaded dataset archive file and prepare it to be imported into an existing project.
         *
         *     This endpoint submits a job to prepare the dataset for import. Specifically, the job scans the dataset
         *     to assess the compatibility with the target project and to identify potential issues in the data.
         *     The status of this operation can be monitored in real-time through the [job status endpoint](#Jobs/GetJob);
         *     once the job is finished, the list of parsed labels and warnings can be found in the job metadata.
         */
        post: operations['PrepareDatasetForImportToProject'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}:import-from-dataset': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Import a prepared dataset into an existing project
         * @description Finalize the import of an already prepared dataset into an existing project.
         *
         *     This endpoint submits a job to import the dataset, including all its media and annotations from the imported dataset.
         *     The status of this operation can be monitored in real-time through the [job status endpoint](#Jobs/GetJob);
         *     once the job is finished, the id of the created project can be found in the job metadata.
         *
         *     Within the project, the data may be imported into an existing dataset or a new dataset, depending on the request body:
         *     - If one specifies a `dataset_id`, then the target will be that dataset
         *     - If one specifies a `dataset_name`, then a new dataset will be created with that name
         *
         *     The `labels_map` allows the user to map the labels found in the prepared dataset to the labels of the target project.
         */
        post: operations['ImportDatasetToProject'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}:prepare-for-export': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Export a dataset as an archive
         * @description Export a dataset as a zip archive file, including all the media and the respective annotations.
         *
         *     This endpoint submits a job to export the dataset.
         *     The status of the export operation can be monitored in real-time through the [job status endpoint](#Jobs/GetJob);
         *     after it completes, the URL to download the exported zip archive can be found in the job metadata.
         *
         *     The downloaded dataset archive can be later imported as a new project, or merged into an existing dataset of compatible type.
         */
        post: operations['TriggerDatasetExport'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/datasets/{dataset_id}/exports/{export_dataset_id}/download': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Download an exported dataset archive
         * @description Download a dataset exported as a zip file.
         */
        get: operations['DownloadExportedDataset'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/projects/uploads/resumable': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Start uploading a project archive using TUS
         * @description Initiate a new TUS session to upload a project archive.
         *
         *     This endpoint creates a new upload resource on the server according to the TUS protocol (https://tus.io/protocols/resumable-upload.html).
         *     The client provides metadata such as file size and name in the request headers, and the server responds with a location URL for the newly created resource.
         *     This URL is used for subsequent upload operations (e.g., PATCH, HEAD).
         */
        post: operations['CreateTusProjectUpload'];
        delete?: never;
        /**
         * Retrieve server capabilities for TUS uploads
         * @description Get information about the TUS protocol versions and extensions supported by the server.
         *     This endpoint allows clients to dynamically adapt their behavior based on server capabilities.
         */
        options: operations['TusProjectUploadOptions'];
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/projects/uploads/resumable/{file_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        /**
         * Get the status of a project archive TUS upload
         * @description Retrieve the current status of the TUS upload of a project archive.
         *
         *     This endpoint provides information such as the current offset of uploaded data through the `Upload-Offset` header,
         *     allowing the client to resume uploads from the correct position.
         *     It is useful for verifying progress or ensuring consistency before appending further data.
         */
        head: operations['TusProjectUploadHead'];
        /**
         * Append data to a running TUS upload of a project archive
         * @description Upload a chunk of the project archive data to the server, appending it to the TUS upload at the specified offset.
         *
         *     This endpoint allows the client to resume uploading data with TUS by sending the remaining data from the last known offset.
         *     It is recommended to choose a large chunk size (based on server limitations) to speed up the overall upload operation.
         */
        patch: operations['TusProjectUploadPatch'];
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}:export': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Export a project as an archive
         * @description Export a project as a zip archive file, containing all the project data (including datasets and models).
         *
         *     This endpoint submits a job to export a project.
         *     The status of the export operation can be monitored in real-time through the [job status endpoint](#Jobs/GetJob);
         *     after it completes, the URL to download the exported zip archive can be found in the job metadata.
         *
         *     The downloaded project archive can be later imported using the [import project endpoint](#Project%20Import%2FExport/ImportProject).
         */
        post: operations['TriggerProjectExport'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/projects:import': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Import a project from an uploaded archive
         * @description Create a project by importing a project archive file.
         *
         *     The project archive file must be first uploaded using the TUS protocol,
         *     by means of the [TUS upload endpoints](#Project%20Import%2FExport/CreateTusProjectUpload).
         *
         *     This endpoint submits a job to import a project from the uploaded archive.
         *     The status of the import operation can be monitored in real-time through the [job status endpoint](#Jobs/GetJob);
         *     after it completes, the id of the imported project can be found in the job metadata.
         */
        post: operations['ImportProject'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/code_deployments:prepare': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Prepare code deployment for project
         * @deprecated
         * @description This endpoint triggers preparation for code deployment for a specific project. For single-task projects (Detection, Segmentation, etc), it will export the only model used. For task-chain projects, it will export all the models. Only models in OpenVINO IR format are supported.
         *     This endpoint is deprecated. Use the [deployment package endpoint](../deployment_package/download_deployment_package_endpoint.yaml) to prepare and download code deployment.
         */
        post: operations['PrepareCodeDeployment'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/code_deployments/{deployment_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get details of a code deployment process
         * @description Get details for the code deployment process, which includes the state, the progress, models, the creator id and creation time.
         */
        get: operations['GetCodeDeployment'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/code_deployments/{deployment_id}/download': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Download the deployed code as a zip file
         * @deprecated
         * @description Download the deployed code as a zip file. This endpoint is deprecated. Use the [deployment package endpoint](../deployment_package/download_deployment_package_endpoint.yaml) to prepare and download code deployment.
         */
        get: operations['DownloadCodeDeployment'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/workspaces/{workspace_id}/projects/{project_id}/deployment_package:download': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Download the deployment package as a zip file
         * @description Download the deployment package as a zip file, e.g. an archive containing trained model files and graphs for deploying model on OpenVino Model Server or locally using the Geti SDK.
         */
        post: operations['DownloadDeploymentPackage'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/balance': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * [SaaS] Get running credits balance
         * @description <i>Not available on on-premises environments.</i><br><br> The running credit balance of an organization is calculated during the current subscription cycle, and consists of 3 values:<br>
         *       1) incoming - credits, allocated to the organization at the start of the subscription cycle;<br>
         *       2) blocked - credits, temporary reserved for the training or optimization jobs in progress;<br>
         *       3) available - credits, which are available for usage.
         */
        get: operations['get_balance_api_v1_organizations__organization_id__balance_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/credit_accounts': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * [SaaS] Get credit accounts
         * @description <i>Not available on on-premises environments.</i><br><br> Returns active (not expired) credit accounts of the organization.
         */
        get: operations['get_credit_accounts_api_v1_organizations__organization_id__credit_accounts_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/subscriptions': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * [SaaS] Get all organization's subscriptions
         * @description <i>Not available on on-premises environments.</i><br><br> Returns all organization's subscriptions.
         */
        get: operations['get_organization_subscriptions_api_v1_organizations__organization_id__subscriptions_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/subscriptions/active': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * [SaaS] Get the active subscription
         * @description <i>Not available on on-premises environments.</i><br><br> Information about the organization's active subscription.
         */
        get: operations['get_active_subscription_api_v1_organizations__organization_id__subscriptions_active_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/transactions': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * [SaaS] Get transactions information
         * @description <i>Not available on on-premises environments.</i><br><br> Returns information about finished transactions within specified time range [from_date, to_date].<br> Supports sorting and filtering by project name and usage type.
         */
        get: operations['get_transactions_api_v1_organizations__organization_id__transactions_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/organizations/{organization_id}/transactions/aggregates': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * [SaaS] Get credit consumption aggregates
         * @description <i>Not available on on-premises environments.</i><br><br> The aggregating endpoint allows to retrieve credit consumption grouped by various dimensions - such as project, date, usage type, etc.
         */
        get: operations['get_credit_consumption_aggregates_api_v1_organizations__organization_id__transactions_aggregates_get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * @description UUID of the object
         * @example 2e1de607-b549-42bf-8031-fd16d87379e5
         */
        uuid: string;
        workspace: {
            /**
             * @description UUID of the object
             * @example 2e1de607-b549-42bf-8031-fd16d87379e5
             */
            id: string;
            /** @description Name of the workspace */
            name: string;
            /** @description Description of the workspace */
            description?: string;
            /** @description Name of the creator of the workspace */
            creator_name?: string;
            /** @description Creation date of the workspace */
            creation_date?: string;
        };
        workspace_list: {
            /** @description Array of workspaces */
            workspaces: {
                /**
                 * @description UUID of the object
                 * @example 2e1de607-b549-42bf-8031-fd16d87379e5
                 */
                id: string;
                /** @description Name of the workspace */
                name: string;
                /** @description Description of the workspace */
                description?: string;
                /** @description Name of the creator of the workspace */
                creator_name?: string;
                /** @description Creation date of the workspace */
                creation_date?: string;
            }[];
        };
        error_response: {
            /** @enum {integer} */
            http_status: 400 | 404 | 405 | 409 | 412 | 413 | 415 | 422 | 423 | 500 | 501 | 503;
            /** @description Message from server */
            message: string;
            /** @description Error code from server */
            error_code: string;
        };
        name: string;
        /** @description Amount of items to skip */
        skip: string;
        /** @enum {string} */
        sort_direction: 'asc' | 'dsc';
        /** @enum {string} */
        sort_by: 'name' | 'creation_date';
        with_size: boolean;
        /**
         * @description Mongo ID of the object
         * @example 60d31793d5f1fb7e6e3c1a4c
         */
        mongo_id: string;
        connection: {
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            from?: string;
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            to?: string;
        };
        label: {
            /** @description Label name, must be unique */
            name: string;
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            id: string;
            /** @description Label color, picked at random if not specified */
            color: string;
            /** @description Name of label group */
            group: string;
            /** @description Name of parent label */
            parent_id: string | null;
            /** @description Indicates whether the label is an empty label */
            is_empty: boolean;
            /** @description Indicates whether the label is anomalous or not */
            is_anomalous: boolean;
            /** @description Indicates whether the label is deleted */
            is_deleted?: boolean;
            /** @description Key or combination of key to select this label. Can be empty (no key). */
            hotkey: string;
        };
        keypoint_edge: {
            nodes: string[];
        };
        keypoint_position: {
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            label: string;
            /** Format: float */
            x: number;
            /** Format: float */
            y: number;
        };
        task: {
            /** @description Task title, must be unique */
            title: string;
            /** @description Task type; should be one of: [ classification, detection, segmentation, crop, dataset ] */
            task_type: string;
            /** @description List of labels */
            labels?: {
                /** @description Label name, must be unique */
                name: string;
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                id: string;
                /** @description Label color, picked at random if not specified */
                color: string;
                /** @description Name of label group */
                group: string;
                /** @description Name of parent label */
                parent_id: string | null;
                /** @description Indicates whether the label is an empty label */
                is_empty: boolean;
                /** @description Indicates whether the label is anomalous or not */
                is_anomalous: boolean;
                /** @description Indicates whether the label is deleted */
                is_deleted?: boolean;
                /** @description Key or combination of key to select this label. Can be empty (no key). */
                hotkey: string;
            }[];
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            id: string;
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            label_schema_id?: string;
            /** @description The keypoint structure which holds the edges of the graph, and the position of the keypoints. Supported only for Keypoint Detection tasks. */
            keypoint_structure?: {
                edges?: {
                    nodes: string[];
                }[];
                positions?: {
                    /**
                     * @description Mongo ID of the object
                     * @example 60d31793d5f1fb7e6e3c1a4c
                     */
                    label: string;
                    /** Format: float */
                    x: number;
                    /** Format: float */
                    y: number;
                }[];
            };
        };
        pipeline: {
            /** @description List of connections between pipeline tasks */
            connections: {
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                from?: string;
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                to?: string;
            }[];
            /** @description List of tasks in the pipeline */
            tasks: {
                /** @description Task title, must be unique */
                title: string;
                /** @description Task type; should be one of: [ classification, detection, segmentation, crop, dataset ] */
                task_type: string;
                /** @description List of labels */
                labels?: {
                    /** @description Label name, must be unique */
                    name: string;
                    /**
                     * @description Mongo ID of the object
                     * @example 60d31793d5f1fb7e6e3c1a4c
                     */
                    id: string;
                    /** @description Label color, picked at random if not specified */
                    color: string;
                    /** @description Name of label group */
                    group: string;
                    /** @description Name of parent label */
                    parent_id: string | null;
                    /** @description Indicates whether the label is an empty label */
                    is_empty: boolean;
                    /** @description Indicates whether the label is anomalous or not */
                    is_anomalous: boolean;
                    /** @description Indicates whether the label is deleted */
                    is_deleted?: boolean;
                    /** @description Key or combination of key to select this label. Can be empty (no key). */
                    hotkey: string;
                }[];
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                id: string;
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                label_schema_id?: string;
                /** @description The keypoint structure which holds the edges of the graph, and the position of the keypoints. Supported only for Keypoint Detection tasks. */
                keypoint_structure?: {
                    edges?: {
                        nodes: string[];
                    }[];
                    positions?: {
                        /**
                         * @description Mongo ID of the object
                         * @example 60d31793d5f1fb7e6e3c1a4c
                         */
                        label: string;
                        /** Format: float */
                        x: number;
                        /** Format: float */
                        y: number;
                    }[];
                };
            }[];
        };
        task_performance_score: {
            /**
             * Format: float
             * @description Value of the score.
             */
            value: number;
            /** @description Name of the algorithm that is used to calculate the metric value, eg dice average, f-measure, etc. */
            metric_type: string;
        };
        task_performance: {
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            task_id: string;
            /** @description Model score for the task, null if no model is trained. */
            score: null | {
                /**
                 * Format: float
                 * @description Value of the score.
                 */
                value: number;
                /** @description Name of the algorithm that is used to calculate the metric value, eg dice average, f-measure, etc. */
                metric_type: string;
            };
        };
        project_performance: {
            /**
             * Format: float
             * @description Average score of task scores of a project, null if no model is trained.
             */
            score?: number | null;
            task_performances?: {
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                task_id: string;
                /** @description Model score for the task, null if no model is trained. */
                score: null | {
                    /**
                     * Format: float
                     * @description Value of the score.
                     */
                    value: number;
                    /** @description Name of the algorithm that is used to calculate the metric value, eg dice average, f-measure, etc. */
                    metric_type: string;
                };
            }[];
        };
        project_list: {
            /** @description Array of projects */
            projects?: {
                /** @description Project name */
                name: string;
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                id: string;
                pipeline: {
                    /** @description List of connections between pipeline tasks */
                    connections: {
                        /**
                         * @description Mongo ID of the object
                         * @example 60d31793d5f1fb7e6e3c1a4c
                         */
                        from?: string;
                        /**
                         * @description Mongo ID of the object
                         * @example 60d31793d5f1fb7e6e3c1a4c
                         */
                        to?: string;
                    }[];
                    /** @description List of tasks in the pipeline */
                    tasks: {
                        /** @description Task title, must be unique */
                        title: string;
                        /** @description Task type; should be one of: [ classification, detection, segmentation, crop, dataset ] */
                        task_type: string;
                        /** @description List of labels */
                        labels?: {
                            /** @description Label name, must be unique */
                            name: string;
                            /**
                             * @description Mongo ID of the object
                             * @example 60d31793d5f1fb7e6e3c1a4c
                             */
                            id: string;
                            /** @description Label color, picked at random if not specified */
                            color: string;
                            /** @description Name of label group */
                            group: string;
                            /** @description Name of parent label */
                            parent_id: string | null;
                            /** @description Indicates whether the label is an empty label */
                            is_empty: boolean;
                            /** @description Indicates whether the label is anomalous or not */
                            is_anomalous: boolean;
                            /** @description Indicates whether the label is deleted */
                            is_deleted?: boolean;
                            /** @description Key or combination of key to select this label. Can be empty (no key). */
                            hotkey: string;
                        }[];
                        /**
                         * @description Mongo ID of the object
                         * @example 60d31793d5f1fb7e6e3c1a4c
                         */
                        id: string;
                        /**
                         * @description Mongo ID of the object
                         * @example 60d31793d5f1fb7e6e3c1a4c
                         */
                        label_schema_id?: string;
                        /** @description The keypoint structure which holds the edges of the graph, and the position of the keypoints. Supported only for Keypoint Detection tasks. */
                        keypoint_structure?: {
                            edges?: {
                                nodes: string[];
                            }[];
                            positions?: {
                                /**
                                 * @description Mongo ID of the object
                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                 */
                                label: string;
                                /** Format: float */
                                x: number;
                                /** Format: float */
                                y: number;
                            }[];
                        };
                    }[];
                };
                /** @description Creation time of the project */
                creation_time: string;
                /** @description Identifier of the user who created the project */
                creator_id?: string;
                performance?: {
                    /**
                     * Format: float
                     * @description Average score of task scores of a project, null if no model is trained.
                     */
                    score?: number | null;
                    task_performances?: {
                        /**
                         * @description Mongo ID of the object
                         * @example 60d31793d5f1fb7e6e3c1a4c
                         */
                        task_id: string;
                        /** @description Model score for the task, null if no model is trained. */
                        score: null | {
                            /**
                             * Format: float
                             * @description Value of the score.
                             */
                            value: number;
                            /** @description Name of the algorithm that is used to calculate the metric value, eg dice average, f-measure, etc. */
                            metric_type: string;
                        };
                    }[];
                };
                /** @description Thumbnail URL */
                thumbnail: string;
                storage_info: {
                    /** Project size in bytes */
                    size?: number;
                };
            }[];
            /** @description URL to the next projects page */
            next_page?: string;
            /** @description Total number of projects in the workspace */
            project_counts?: number;
            /** @description Total number of projects in the response */
            project_page_count?: number;
        };
        'connection-2': {
            /** @description Title of source task */
            from: string;
            /** @description Title of destination task */
            to: string;
        };
        'label-2': {
            /** @description Label name, must be unique */
            name: string;
            /** @description Label color, picked at random if not specified */
            color?: string;
            /** @description Key or combination of key to select this label. Can be empty (no key). */
            hotkey?: string;
            /** @description Name of label group */
            group?: string;
            /** @description Name of parent label */
            parent_id?: unknown;
        };
        'keypoint_edge-2': {
            nodes: string[];
        };
        'keypoint_position-2': {
            label: string;
            /** Format: float */
            x: number;
            /** Format: float */
            y: number;
        };
        'task-2': {
            /** @description Task title, must be unique */
            title: string;
            /**
             * @description Type of task, can only be one of the predefined task types
             * @enum {string}
             */
            task_type:
                | 'dataset'
                | 'crop'
                | 'classification'
                | 'detection'
                | 'segmentation'
                | 'rotated_detection'
                | 'instance_segmentation'
                | 'anomaly'
                | 'keypoint_detection';
            /** @description List of labels */
            labels?: {
                /** @description Label name, must be unique */
                name: string;
                /** @description Label color, picked at random if not specified */
                color?: string;
                /** @description Key or combination of key to select this label. Can be empty (no key). */
                hotkey?: string;
                /** @description Name of label group */
                group?: string;
                /** @description Name of parent label */
                parent_id?: unknown;
            }[];
            /** @description The keypoint structure which holds the edges of the graph, and the position of the keypoints. Supported only for Keypoint Detection tasks. */
            keypoint_structure?: {
                edges?: {
                    nodes: string[];
                }[];
                positions?: {
                    label: string;
                    /** Format: float */
                    x: number;
                    /** Format: float */
                    y: number;
                }[];
            };
        };
        'pipeline-2': {
            /** @description List of connections between pipeline tasks */
            connections: {
                /** @description Title of source task */
                from: string;
                /** @description Title of destination task */
                to: string;
            }[];
            /** @description List of tasks in the pipeline */
            tasks: {
                /** @description Task title, must be unique */
                title: string;
                /**
                 * @description Type of task, can only be one of the predefined task types
                 * @enum {string}
                 */
                task_type:
                    | 'dataset'
                    | 'crop'
                    | 'classification'
                    | 'detection'
                    | 'segmentation'
                    | 'rotated_detection'
                    | 'instance_segmentation'
                    | 'anomaly'
                    | 'keypoint_detection';
                /** @description List of labels */
                labels?: {
                    /** @description Label name, must be unique */
                    name: string;
                    /** @description Label color, picked at random if not specified */
                    color?: string;
                    /** @description Key or combination of key to select this label. Can be empty (no key). */
                    hotkey?: string;
                    /** @description Name of label group */
                    group?: string;
                    /** @description Name of parent label */
                    parent_id?: unknown;
                }[];
                /** @description The keypoint structure which holds the edges of the graph, and the position of the keypoints. Supported only for Keypoint Detection tasks. */
                keypoint_structure?: {
                    edges?: {
                        nodes: string[];
                    }[];
                    positions?: {
                        label: string;
                        /** Format: float */
                        x: number;
                        /** Format: float */
                        y: number;
                    }[];
                };
            }[];
        };
        project: {
            /** @description Project name */
            name: string;
            pipeline: {
                /** @description List of connections between pipeline tasks */
                connections: {
                    /** @description Title of source task */
                    from: string;
                    /** @description Title of destination task */
                    to: string;
                }[];
                /** @description List of tasks in the pipeline */
                tasks: {
                    /** @description Task title, must be unique */
                    title: string;
                    /**
                     * @description Type of task, can only be one of the predefined task types
                     * @enum {string}
                     */
                    task_type:
                        | 'dataset'
                        | 'crop'
                        | 'classification'
                        | 'detection'
                        | 'segmentation'
                        | 'rotated_detection'
                        | 'instance_segmentation'
                        | 'anomaly'
                        | 'keypoint_detection';
                    /** @description List of labels */
                    labels?: {
                        /** @description Label name, must be unique */
                        name: string;
                        /** @description Label color, picked at random if not specified */
                        color?: string;
                        /** @description Key or combination of key to select this label. Can be empty (no key). */
                        hotkey?: string;
                        /** @description Name of label group */
                        group?: string;
                        /** @description Name of parent label */
                        parent_id?: unknown;
                    }[];
                    /** @description The keypoint structure which holds the edges of the graph, and the position of the keypoints. Supported only for Keypoint Detection tasks. */
                    keypoint_structure?: {
                        edges?: {
                            nodes: string[];
                        }[];
                        positions?: {
                            label: string;
                            /** Format: float */
                            x: number;
                            /** Format: float */
                            y: number;
                        }[];
                    };
                }[];
            };
        };
        dataset_identifier: {
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            id: string;
            /** @description Name of the dataset */
            name: string;
            /** @description Creation time of the dataset */
            creation_time: string;
            /** @description Indicates if the dataset is used to train the active model */
            use_for_training: boolean;
        };
        'project-2': {
            /** @description Project name */
            name?: string;
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            id?: string;
            pipeline: {
                /** @description List of connections between pipeline tasks */
                connections: {
                    /**
                     * @description Mongo ID of the object
                     * @example 60d31793d5f1fb7e6e3c1a4c
                     */
                    from?: string;
                    /**
                     * @description Mongo ID of the object
                     * @example 60d31793d5f1fb7e6e3c1a4c
                     */
                    to?: string;
                }[];
                /** @description List of tasks in the pipeline */
                tasks: {
                    /** @description Task title, must be unique */
                    title: string;
                    /** @description Task type; should be one of: [ classification, detection, segmentation, crop, dataset ] */
                    task_type: string;
                    /** @description List of labels */
                    labels?: {
                        /** @description Label name, must be unique */
                        name: string;
                        /**
                         * @description Mongo ID of the object
                         * @example 60d31793d5f1fb7e6e3c1a4c
                         */
                        id: string;
                        /** @description Label color, picked at random if not specified */
                        color: string;
                        /** @description Name of label group */
                        group: string;
                        /** @description Name of parent label */
                        parent_id: string | null;
                        /** @description Indicates whether the label is an empty label */
                        is_empty: boolean;
                        /** @description Indicates whether the label is anomalous or not */
                        is_anomalous: boolean;
                        /** @description Indicates whether the label is deleted */
                        is_deleted?: boolean;
                        /** @description Key or combination of key to select this label. Can be empty (no key). */
                        hotkey: string;
                    }[];
                    /**
                     * @description Mongo ID of the object
                     * @example 60d31793d5f1fb7e6e3c1a4c
                     */
                    id: string;
                    /**
                     * @description Mongo ID of the object
                     * @example 60d31793d5f1fb7e6e3c1a4c
                     */
                    label_schema_id?: string;
                    /** @description The keypoint structure which holds the edges of the graph, and the position of the keypoints. Supported only for Keypoint Detection tasks. */
                    keypoint_structure?: {
                        edges?: {
                            nodes: string[];
                        }[];
                        positions?: {
                            /**
                             * @description Mongo ID of the object
                             * @example 60d31793d5f1fb7e6e3c1a4c
                             */
                            label: string;
                            /** Format: float */
                            x: number;
                            /** Format: float */
                            y: number;
                        }[];
                    };
                }[];
            };
            /** @description Creation time of the project */
            creation_time?: string;
            /** @description The ID of the user who created the project */
            creator_id?: string;
            performance?: {
                /**
                 * Format: float
                 * @description Average score of task scores of a project, null if no model is trained.
                 */
                score?: number | null;
                task_performances?: {
                    /**
                     * @description Mongo ID of the object
                     * @example 60d31793d5f1fb7e6e3c1a4c
                     */
                    task_id: string;
                    /** @description Model score for the task, null if no model is trained. */
                    score: null | {
                        /**
                         * Format: float
                         * @description Value of the score.
                         */
                        value: number;
                        /** @description Name of the algorithm that is used to calculate the metric value, eg dice average, f-measure, etc. */
                        metric_type: string;
                    };
                }[];
            };
            /** @description Thumbnail url */
            thumbnail?: string;
            /** @description List of datasets in the project */
            datasets: {
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                id: string;
                /** @description Name of the dataset */
                name: string;
                /** @description Creation time of the dataset */
                creation_time: string;
                /** @description Indicates if the dataset is used to train the active model */
                use_for_training: boolean;
            }[];
            storage_info: {
                /** Project size in bytes */
                size?: number;
            };
        };
        projects_names_list: {
            projects?: {
                /** @description Project name */
                name: string;
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                id: string;
            }[];
        };
        'connection-3': {
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            from: string;
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            to: string;
        };
        'label-3': {
            /** @description Label name, must be unique */
            name: string;
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            id?: string;
            /** @description Label color, picked at random if not specified */
            color: string;
            /** @description Key or combination of key to select this label. Can be empty (no key). */
            hotkey?: string;
            /** @description Name of label group */
            group?: string;
            /** @description Indicates whether the label is an empty label */
            readonly is_empty?: boolean;
            /** @description Indicates whether the label is going to be deleted */
            is_deleted?: boolean;
            /** @description Name of parent label */
            parent_id?: unknown;
            /** @description On label schema change, whether to mark the annotations linked to this label as "to be revisited" by the user */
            revisit_affected_annotations?: boolean;
        };
        'task-3': {
            /** @description Task title, must be unique */
            title: string;
            /** @description Task type; should be one of: [ classification, detection, segmentation, anomaly, crop, dataset ] */
            task_type: string;
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            id: string;
            /** @description List of labels */
            labels?: {
                /** @description Label name, must be unique */
                name: string;
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                id?: string;
                /** @description Label color, picked at random if not specified */
                color: string;
                /** @description Key or combination of key to select this label. Can be empty (no key). */
                hotkey?: string;
                /** @description Name of label group */
                group?: string;
                /** @description Indicates whether the label is an empty label */
                readonly is_empty?: boolean;
                /** @description Indicates whether the label is going to be deleted */
                is_deleted?: boolean;
                /** @description Name of parent label */
                parent_id?: unknown;
                /** @description On label schema change, whether to mark the annotations linked to this label as "to be revisited" by the user */
                revisit_affected_annotations?: boolean;
            }[];
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            label_schema_id?: string | null;
            /** @description The keypoint structure which holds the edges of the graph, and the position of the keypoints. Supported only for Keypoint Detection tasks. */
            keypoint_structure?: {
                edges?: {
                    nodes: string[];
                }[];
                positions?: {
                    /**
                     * @description Mongo ID of the object
                     * @example 60d31793d5f1fb7e6e3c1a4c
                     */
                    label: string;
                    /** Format: float */
                    x: number;
                    /** Format: float */
                    y: number;
                }[];
            };
        };
        'pipeline-3': {
            /** @description List of connections between pipeline tasks */
            connections: {
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                from: string;
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                to: string;
            }[];
            /** @description List of tasks in the pipeline */
            tasks: {
                /** @description Task title, must be unique */
                title: string;
                /** @description Task type; should be one of: [ classification, detection, segmentation, anomaly, crop, dataset ] */
                task_type: string;
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                id: string;
                /** @description List of labels */
                labels?: {
                    /** @description Label name, must be unique */
                    name: string;
                    /**
                     * @description Mongo ID of the object
                     * @example 60d31793d5f1fb7e6e3c1a4c
                     */
                    id?: string;
                    /** @description Label color, picked at random if not specified */
                    color: string;
                    /** @description Key or combination of key to select this label. Can be empty (no key). */
                    hotkey?: string;
                    /** @description Name of label group */
                    group?: string;
                    /** @description Indicates whether the label is an empty label */
                    readonly is_empty?: boolean;
                    /** @description Indicates whether the label is going to be deleted */
                    is_deleted?: boolean;
                    /** @description Name of parent label */
                    parent_id?: unknown;
                    /** @description On label schema change, whether to mark the annotations linked to this label as "to be revisited" by the user */
                    revisit_affected_annotations?: boolean;
                }[];
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                label_schema_id?: string | null;
                /** @description The keypoint structure which holds the edges of the graph, and the position of the keypoints. Supported only for Keypoint Detection tasks. */
                keypoint_structure?: {
                    edges?: {
                        nodes: string[];
                    }[];
                    positions?: {
                        /**
                         * @description Mongo ID of the object
                         * @example 60d31793d5f1fb7e6e3c1a4c
                         */
                        label: string;
                        /** Format: float */
                        x: number;
                        /** Format: float */
                        y: number;
                    }[];
                };
            }[];
        };
        'dataset_identifier-2': {
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            id?: string;
            /** @description Name of the dataset */
            name?: string;
        };
        'project-3': {
            /** @description Project name */
            name: string;
            pipeline: {
                /** @description List of connections between pipeline tasks */
                connections: {
                    /**
                     * @description Mongo ID of the object
                     * @example 60d31793d5f1fb7e6e3c1a4c
                     */
                    from: string;
                    /**
                     * @description Mongo ID of the object
                     * @example 60d31793d5f1fb7e6e3c1a4c
                     */
                    to: string;
                }[];
                /** @description List of tasks in the pipeline */
                tasks: {
                    /** @description Task title, must be unique */
                    title: string;
                    /** @description Task type; should be one of: [ classification, detection, segmentation, anomaly, crop, dataset ] */
                    task_type: string;
                    /**
                     * @description Mongo ID of the object
                     * @example 60d31793d5f1fb7e6e3c1a4c
                     */
                    id: string;
                    /** @description List of labels */
                    labels?: {
                        /** @description Label name, must be unique */
                        name: string;
                        /**
                         * @description Mongo ID of the object
                         * @example 60d31793d5f1fb7e6e3c1a4c
                         */
                        id?: string;
                        /** @description Label color, picked at random if not specified */
                        color: string;
                        /** @description Key or combination of key to select this label. Can be empty (no key). */
                        hotkey?: string;
                        /** @description Name of label group */
                        group?: string;
                        /** @description Indicates whether the label is an empty label */
                        readonly is_empty?: boolean;
                        /** @description Indicates whether the label is going to be deleted */
                        is_deleted?: boolean;
                        /** @description Name of parent label */
                        parent_id?: unknown;
                        /** @description On label schema change, whether to mark the annotations linked to this label as "to be revisited" by the user */
                        revisit_affected_annotations?: boolean;
                    }[];
                    /**
                     * @description Mongo ID of the object
                     * @example 60d31793d5f1fb7e6e3c1a4c
                     */
                    label_schema_id?: string | null;
                    /** @description The keypoint structure which holds the edges of the graph, and the position of the keypoints. Supported only for Keypoint Detection tasks. */
                    keypoint_structure?: {
                        edges?: {
                            nodes: string[];
                        }[];
                        positions?: {
                            /**
                             * @description Mongo ID of the object
                             * @example 60d31793d5f1fb7e6e3c1a4c
                             */
                            label: string;
                            /** Format: float */
                            x: number;
                            /** Format: float */
                            y: number;
                        }[];
                    };
                }[];
            };
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            id: string;
            /** @description Creation time of the project */
            creation_time?: string;
            /** @description The username of the creator of the project */
            creator_id?: string;
            performance?: {
                /**
                 * Format: float
                 * @description Average score of task scores of a project, null if no model is trained.
                 */
                score?: number | null;
                task_performances?: {
                    /**
                     * @description Mongo ID of the object
                     * @example 60d31793d5f1fb7e6e3c1a4c
                     */
                    task_id: string;
                    /** @description Model score for the task, null if no model is trained. */
                    score: null | {
                        /**
                         * Format: float
                         * @description Value of the score.
                         */
                        value: number;
                        /** @description Name of the algorithm that is used to calculate the metric value, eg dice average, f-measure, etc. */
                        metric_type: string;
                    };
                }[];
            };
            /** @description Thumbnail url */
            thumbnail?: string;
            /** @description List of datasets in the project */
            datasets?: {
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                id?: string;
                /** @description Name of the dataset */
                name?: string;
            }[];
        };
        success_response: {
            /** @enum {integer} */
            http_status: 200 | 201 | 202 | 203 | 204 | 205 | 206;
            /** @description Message from server */
            message: string;
        };
        dataset: {
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            id?: string;
            /** @description Dataset name */
            name?: string;
            /** @description Whether dataset is used for training */
            use_for_training?: boolean;
            /** @description Creation time of the dataset */
            creation_time?: string;
        };
        dataset_list: {
            /** @description Array of datasets */
            datasets?: {
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                id?: string;
                /** @description Dataset name */
                name?: string;
                /** @description Whether dataset is used for training */
                use_for_training?: boolean;
                /** @description Creation time of the dataset */
                creation_time?: string;
            }[];
        };
        'dataset-2': {
            /** @description Dataset name */
            name: string;
        };
        'dataset-3': {
            /** @description Dataset name */
            name?: string;
        };
        /** @description List with information on object size distribution per label */
        object_size_statistics: {
            /** @description Mean x/y values of the sizes of the objects */
            cluster_center?: number[];
            /** @description Width/height values for drawing ellipse from cluster center */
            cluster_width_height?: number[];
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            id?: string;
            /** @description Color of the label */
            color?: string;
            /** @description Name of the label */
            name?: string;
            /** @description Information on the distribution of aspect ratios of annotation shapes */
            object_distribution_from_aspect_ratio?: {
                /** Format: int32 */
                balanced?: number;
                /** Format: int32 */
                tall?: number;
                /** Format: int32 */
                wide?: number;
            };
            /** @description Information on the size distribution of annotation shapes. Contains a list of width/height for every object. */
            size_distribution?: number[][];
            /**
             * Format: float
             * @description Aspect ratio threshold for classifying a shape as tall
             */
            aspect_ratio_threshold_tall?: number;
            /**
             * Format: float
             * @description Aspect ratio threshold for classifying a shape as wide
             */
            aspect_ratio_threshold_wide?: number;
        }[];
        /** @description Statistics for the task of interest */
        task_statistics: {
            /**
             * Format: int32
             * @description Number of annotated frames per task
             */
            annotated_frames?: number;
            /**
             * Format: int32
             * @description Number of annotated images per task
             */
            annotated_images?: number;
            /**
             * Format: int32
             * @description Number of annotated videos per task
             */
            annotated_videos?: number;
            /** @description Number of annotated shapes per label */
            objects_per_label?: {
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                id?: string;
                /** @description Name of the label */
                name?: string;
                /** @description Color of the label */
                color?: string;
                /**
                 * Format: int32
                 * @description Number of annotated shapes for this label
                 */
                value?: number;
            }[];
            /** @description List with information on object size distribution per label */
            object_size_distribution_per_label?: {
                /** @description Mean x/y values of the sizes of the objects */
                cluster_center?: number[];
                /** @description Width/height values for drawing ellipse from cluster center */
                cluster_width_height?: number[];
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                id?: string;
                /** @description Color of the label */
                color?: string;
                /** @description Name of the label */
                name?: string;
                /** @description Information on the distribution of aspect ratios of annotation shapes */
                object_distribution_from_aspect_ratio?: {
                    /** Format: int32 */
                    balanced?: number;
                    /** Format: int32 */
                    tall?: number;
                    /** Format: int32 */
                    wide?: number;
                };
                /** @description Information on the size distribution of annotation shapes. Contains a list of width/height for every object. */
                size_distribution?: number[][];
                /**
                 * Format: float
                 * @description Aspect ratio threshold for classifying a shape as tall
                 */
                aspect_ratio_threshold_tall?: number;
                /**
                 * Format: float
                 * @description Aspect ratio threshold for classifying a shape as wide
                 */
                aspect_ratio_threshold_wide?: number;
            }[];
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            task_id?: string;
        };
        dataset_statistics: {
            /** @description Overview of the dataset statistics */
            overview?: {
                /**
                 * Format: int32
                 * @description Number of images in the dataset
                 */
                images?: number;
                /**
                 * Format: int32
                 * @description Number of videos in the dataset
                 */
                videos?: number;
                /**
                 * Format: int32
                 * @description Number of annotated video frames in the dataset
                 */
                annotated_frames?: number;
                /**
                 * Format: int32
                 * @description Number of annotated images in the dataset
                 */
                annotated_images?: number;
                /**
                 * Format: int32
                 * @description Number of annotated videos in the dataset
                 */
                annotated_videos?: number;
            };
            /** @description List with statistics for each task in the project */
            tasks?: {
                /**
                 * Format: int32
                 * @description Number of annotated frames per task
                 */
                annotated_frames?: number;
                /**
                 * Format: int32
                 * @description Number of annotated images per task
                 */
                annotated_images?: number;
                /**
                 * Format: int32
                 * @description Number of annotated videos per task
                 */
                annotated_videos?: number;
                /** @description Number of annotated shapes per label */
                objects_per_label?: {
                    /**
                     * @description Mongo ID of the object
                     * @example 60d31793d5f1fb7e6e3c1a4c
                     */
                    id?: string;
                    /** @description Name of the label */
                    name?: string;
                    /** @description Color of the label */
                    color?: string;
                    /**
                     * Format: int32
                     * @description Number of annotated shapes for this label
                     */
                    value?: number;
                }[];
                /** @description List with information on object size distribution per label */
                object_size_distribution_per_label?: {
                    /** @description Mean x/y values of the sizes of the objects */
                    cluster_center?: number[];
                    /** @description Width/height values for drawing ellipse from cluster center */
                    cluster_width_height?: number[];
                    /**
                     * @description Mongo ID of the object
                     * @example 60d31793d5f1fb7e6e3c1a4c
                     */
                    id?: string;
                    /** @description Color of the label */
                    color?: string;
                    /** @description Name of the label */
                    name?: string;
                    /** @description Information on the distribution of aspect ratios of annotation shapes */
                    object_distribution_from_aspect_ratio?: {
                        /** Format: int32 */
                        balanced?: number;
                        /** Format: int32 */
                        tall?: number;
                        /** Format: int32 */
                        wide?: number;
                    };
                    /** @description Information on the size distribution of annotation shapes. Contains a list of width/height for every object. */
                    size_distribution?: number[][];
                    /**
                     * Format: float
                     * @description Aspect ratio threshold for classifying a shape as tall
                     */
                    aspect_ratio_threshold_tall?: number;
                    /**
                     * Format: float
                     * @description Aspect ratio threshold for classifying a shape as wide
                     */
                    aspect_ratio_threshold_wide?: number;
                }[];
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                task_id?: string;
            }[];
        };
        /** @enum {string} */
        filter_sort_by:
            | 'media_name'
            | 'media_upload_date'
            | 'media_width'
            | 'media_height'
            | 'media_size'
            | 'annotation_creation_date';
        dataset_filter_rule: {
            /**
             * @description Field to filter on in the database. Can be one of 'media_upload_date', 'media_height', 'media_width' , 'media_name', 'label_id', 'annotation_creation_date', 'annotation_scene_state', 'shape_type', 'shape_size' or 'user_name'. Note that media related filters do not affect the outcome when using the filter video endpoint as each frame will have the same values.
             * @enum {string}
             */
            field:
                | 'media_upload_date'
                | 'media_height'
                | 'media_width'
                | 'media_name'
                | 'label_id'
                | 'annotation_creation_date'
                | 'annotation_scene_state'
                | 'shape_type'
                | 'shape_area_percentage'
                | 'shape_area_pixel'
                | 'user_name';
            /**
             * @description Operator to filter with. Can be one of 'greater', 'less', 'greater_or_equal' , 'less_or_equal', 'equal', 'not_equal', 'in', 'not_in', 'regex'
             * @enum {string}
             */
            operator:
                | 'greater'
                | 'less'
                | 'greater_or_equal'
                | 'less_or_equal'
                | 'equal'
                | 'not_equal'
                | 'in'
                | 'not_in'
                | 'regex';
            /** @description Value that the field should match to in combination with the operator */
            value: unknown[] | string | number;
        };
        dataset_filter: {
            /**
             * @description Condition to apply to group of rules.
             * @enum {string}
             */
            condition?: 'and';
            /** @description All the rules to filter a dataset with. */
            rules: {
                /**
                 * @description Field to filter on in the database. Can be one of 'media_upload_date', 'media_height', 'media_width' , 'media_name', 'label_id', 'annotation_creation_date', 'annotation_scene_state', 'shape_type', 'shape_size' or 'user_name'. Note that media related filters do not affect the outcome when using the filter video endpoint as each frame will have the same values.
                 * @enum {string}
                 */
                field:
                    | 'media_upload_date'
                    | 'media_height'
                    | 'media_width'
                    | 'media_name'
                    | 'label_id'
                    | 'annotation_creation_date'
                    | 'annotation_scene_state'
                    | 'shape_type'
                    | 'shape_area_percentage'
                    | 'shape_area_pixel'
                    | 'user_name';
                /**
                 * @description Operator to filter with. Can be one of 'greater', 'less', 'greater_or_equal' , 'less_or_equal', 'equal', 'not_equal', 'in', 'not_in', 'regex'
                 * @enum {string}
                 */
                operator:
                    | 'greater'
                    | 'less'
                    | 'greater_or_equal'
                    | 'less_or_equal'
                    | 'equal'
                    | 'not_equal'
                    | 'in'
                    | 'not_in'
                    | 'regex';
                /** @description Value that the field should match to in combination with the operator */
                value: unknown[] | string | number;
            }[];
        };
        media_information: {
            /** @description Display URL of the image or video frame */
            display_url?: string;
            /** @description Height of the image or video frame */
            height?: number;
            /** @description Width of the image or video frame */
            width?: number;
            /** @description Size of the image or video in bytes */
            size?: number;
            /** @description Extension of the image or video in lowercase with a dot (e.g. '.jpg') */
            extension?: string;
        };
        /** @description List of per-task states obtained aggregating the annotation state with the revisit information */
        annotation_state_per_task: {
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            task_id?: string;
            /**
             * @description Annotation state of the media for this task
             * @enum {string|null}
             */
            state?: 'annotated' | 'partially_annotated' | 'none' | 'to_revisit' | null;
        }[];
        filtered_image: {
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            id?: string;
            media_information?: {
                /** @description Display URL of the image or video frame */
                display_url?: string;
                /** @description Height of the image or video frame */
                height?: number;
                /** @description Width of the image or video frame */
                width?: number;
                /** @description Size of the image or video in bytes */
                size?: number;
                /** @description Extension of the image or video in lowercase with a dot (e.g. '.jpg') */
                extension?: string;
            };
            /** @description Name of the image */
            name?: string;
            /** @description List of per-task states obtained aggregating the annotation state with the revisit information */
            annotation_state_per_task?: {
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                task_id?: string;
                /**
                 * @description Annotation state of the media for this task
                 * @enum {string|null}
                 */
                state?: 'annotated' | 'partially_annotated' | 'none' | 'to_revisit' | null;
            }[];
            /** @description Relative URL to the image thumbnail */
            thumbnail?: string;
            /**
             * @description Type of media. 'image' for images, 'video' for video and 'video_frame' for video frames.
             * @enum {string}
             */
            type?: 'image';
            /** @description Upload time of the media file */
            upload_time?: string;
            /** @description Optional ID of the annotation scene  if filtering in a specific training revision */
            annotation_scene_id?: string;
            /** @description Optional ID of the roi id if filtering in a specific training revision */
            roi_id?: string;
            /** @description Optional ID of the user that last edited the annotation. */
            last_annotator_id?: string;
        };
        video_information: {
            /** @description Display URL of the image or video */
            display_url?: string;
            /** @description Duration of the video */
            duration?: number;
            /** @description Number of frames in the video */
            frame_count?: number;
            /** @description Frame stride of the video */
            frame_stride?: number;
            /** @description Frame rate of the video */
            frame_rate?: number;
            /** @description Height of the video */
            height?: number;
            /** @description Width of the video */
            width?: number;
            /** @description Size of the video in bytes */
            size?: number;
        };
        filtered_video: {
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            id?: string;
            media_information?: {
                /** @description Display URL of the image or video */
                display_url?: string;
                /** @description Duration of the video */
                duration?: number;
                /** @description Number of frames in the video */
                frame_count?: number;
                /** @description Frame stride of the video */
                frame_stride?: number;
                /** @description Frame rate of the video */
                frame_rate?: number;
                /** @description Height of the video */
                height?: number;
                /** @description Width of the video */
                width?: number;
                /** @description Size of the video in bytes */
                size?: number;
            };
            /** @description Name of the image */
            name?: string;
            /** @description List of per-task states obtained aggregating the annotation state with the revisit information */
            annotation_state_per_task?: {
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                task_id?: string;
                /**
                 * @description Annotation state of the media for this task
                 * @enum {string|null}
                 */
                state?: 'annotated' | 'partially_annotated' | 'none' | 'to_revisit' | null;
            }[];
            /** @description Relative URL to the video thumbnail */
            thumbnail?: string;
            /**
             * @description Type of media. 'image' for images, 'video' for video and 'video_frame' for video frames.
             * @enum {string}
             */
            type?: 'video';
            /** @description Upload time of the media file */
            upload_time?: string;
            /** @description Number of frames in the video that match the filter. Only returned when filtering by annotation properties. */
            matched_frames?: number | null;
        };
        filtered_video_frame: {
            /**
             * Format: int32
             * @description The video frame index
             */
            id?: number;
            media_information?: {
                /** @description Display URL of the image or video */
                display_url?: string;
                /** @description Duration of the video */
                duration?: number;
                /** @description Number of frames in the video */
                frame_count?: number;
                /** @description Frame stride of the video */
                frame_stride?: number;
                /** @description Frame rate of the video */
                frame_rate?: number;
                /** @description Height of the video */
                height?: number;
                /** @description Width of the video */
                width?: number;
                /** @description Size of the video in bytes */
                size?: number;
            };
            /** @description Name of the image */
            name?: string;
            /** @description List of per-task states obtained aggregating the annotation state with the revisit information */
            annotation_state_per_task?: {
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                task_id?: string;
                /**
                 * @description Annotation state of the media for this task
                 * @enum {string|null}
                 */
                state?: 'annotated' | 'partially_annotated' | 'none' | 'to_revisit' | null;
            }[];
            /** @description Relative URL to the video frame thumbnail */
            thumbnail?: string;
            /**
             * @description Type of media. 'image' for images, 'video' for video and 'video_frame' for video frames.
             * @enum {string}
             */
            type?: 'video_frame';
            /** @description Upload time of the media file */
            upload_time?: string;
            /** @description Optional ID of the annotation scene if filtering in a specific training revision */
            annotation_scene_id?: string;
            /** @description Optional ID of the roi id if filtering in a specific training revision */
            roi_id?: string;
            /** @description Optional ID of the user that last edited the annotation. */
            last_annotator_id?: string;
        };
        filtered_dataset: {
            /** @description List of media items */
            media?: (
                | {
                      /**
                       * @description Mongo ID of the object
                       * @example 60d31793d5f1fb7e6e3c1a4c
                       */
                      id?: string;
                      media_information?: {
                          /** @description Display URL of the image or video frame */
                          display_url?: string;
                          /** @description Height of the image or video frame */
                          height?: number;
                          /** @description Width of the image or video frame */
                          width?: number;
                          /** @description Size of the image or video in bytes */
                          size?: number;
                          /** @description Extension of the image or video in lowercase with a dot (e.g. '.jpg') */
                          extension?: string;
                      };
                      /** @description Name of the image */
                      name?: string;
                      /** @description List of per-task states obtained aggregating the annotation state with the revisit information */
                      annotation_state_per_task?: {
                          /**
                           * @description Mongo ID of the object
                           * @example 60d31793d5f1fb7e6e3c1a4c
                           */
                          task_id?: string;
                          /**
                           * @description Annotation state of the media for this task
                           * @enum {string|null}
                           */
                          state?:
                              | 'annotated'
                              | 'partially_annotated'
                              | 'none'
                              | 'to_revisit'
                              | null;
                      }[];
                      /** @description Relative URL to the image thumbnail */
                      thumbnail?: string;
                      /**
                       * @description Type of media. 'image' for images, 'video' for video and 'video_frame' for video frames.
                       * @enum {string}
                       */
                      type?: 'image';
                      /** @description Upload time of the media file */
                      upload_time?: string;
                      /** @description Optional ID of the annotation scene  if filtering in a specific training revision */
                      annotation_scene_id?: string;
                      /** @description Optional ID of the roi id if filtering in a specific training revision */
                      roi_id?: string;
                      /** @description Optional ID of the user that last edited the annotation. */
                      last_annotator_id?: string;
                  }
                | {
                      /**
                       * @description Mongo ID of the object
                       * @example 60d31793d5f1fb7e6e3c1a4c
                       */
                      id?: string;
                      media_information?: {
                          /** @description Display URL of the image or video */
                          display_url?: string;
                          /** @description Duration of the video */
                          duration?: number;
                          /** @description Number of frames in the video */
                          frame_count?: number;
                          /** @description Frame stride of the video */
                          frame_stride?: number;
                          /** @description Frame rate of the video */
                          frame_rate?: number;
                          /** @description Height of the video */
                          height?: number;
                          /** @description Width of the video */
                          width?: number;
                          /** @description Size of the video in bytes */
                          size?: number;
                      };
                      /** @description Name of the image */
                      name?: string;
                      /** @description List of per-task states obtained aggregating the annotation state with the revisit information */
                      annotation_state_per_task?: {
                          /**
                           * @description Mongo ID of the object
                           * @example 60d31793d5f1fb7e6e3c1a4c
                           */
                          task_id?: string;
                          /**
                           * @description Annotation state of the media for this task
                           * @enum {string|null}
                           */
                          state?:
                              | 'annotated'
                              | 'partially_annotated'
                              | 'none'
                              | 'to_revisit'
                              | null;
                      }[];
                      /** @description Relative URL to the video thumbnail */
                      thumbnail?: string;
                      /**
                       * @description Type of media. 'image' for images, 'video' for video and 'video_frame' for video frames.
                       * @enum {string}
                       */
                      type?: 'video';
                      /** @description Upload time of the media file */
                      upload_time?: string;
                      /** @description Number of frames in the video that match the filter. Only returned when filtering by annotation properties. */
                      matched_frames?: number | null;
                  }
                | {
                      /**
                       * Format: int32
                       * @description The video frame index
                       */
                      id?: number;
                      media_information?: {
                          /** @description Display URL of the image or video */
                          display_url?: string;
                          /** @description Duration of the video */
                          duration?: number;
                          /** @description Number of frames in the video */
                          frame_count?: number;
                          /** @description Frame stride of the video */
                          frame_stride?: number;
                          /** @description Frame rate of the video */
                          frame_rate?: number;
                          /** @description Height of the video */
                          height?: number;
                          /** @description Width of the video */
                          width?: number;
                          /** @description Size of the video in bytes */
                          size?: number;
                      };
                      /** @description Name of the image */
                      name?: string;
                      /** @description List of per-task states obtained aggregating the annotation state with the revisit information */
                      annotation_state_per_task?: {
                          /**
                           * @description Mongo ID of the object
                           * @example 60d31793d5f1fb7e6e3c1a4c
                           */
                          task_id?: string;
                          /**
                           * @description Annotation state of the media for this task
                           * @enum {string|null}
                           */
                          state?:
                              | 'annotated'
                              | 'partially_annotated'
                              | 'none'
                              | 'to_revisit'
                              | null;
                      }[];
                      /** @description Relative URL to the video frame thumbnail */
                      thumbnail?: string;
                      /**
                       * @description Type of media. 'image' for images, 'video' for video and 'video_frame' for video frames.
                       * @enum {string}
                       */
                      type?: 'video_frame';
                      /** @description Upload time of the media file */
                      upload_time?: string;
                      /** @description Optional ID of the annotation scene if filtering in a specific training revision */
                      annotation_scene_id?: string;
                      /** @description Optional ID of the roi id if filtering in a specific training revision */
                      roi_id?: string;
                      /** @description Optional ID of the user that last edited the annotation. */
                      last_annotator_id?: string;
                  }
            )[];
            /** @description URL to the next page of results, if the same parameters are used. */
            next_page?: string;
            /** @description Total images that match the query. */
            total_matched_images?: number;
            /** @description Total videos that match the query. */
            total_matched_videos?: number;
            /** @description Total video frames that match the query. */
            total_matched_video_frames?: number;
            /** @description Total images in the dataset. */
            total_images?: number;
            /** @description Total videos in the dataset. */
            total_videos?: number;
        };
        /** @description Media preprocessing related information */
        preprocessing: {
            /**
             * @description Status of the preprocessing operation
             * @enum {string}
             */
            status: 'SCHEDULED' | 'IN_PROGRESS' | 'FINISHED' | 'FAILED';
            /** @description Message associated with the preprocessing operation */
            message?: string;
        };
        /** Image */
        image: {
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            id?: string;
            media_information?: {
                /** @description Display URL of the image or video frame */
                display_url?: string;
                /** @description Height of the image or video frame */
                height?: number;
                /** @description Width of the image or video frame */
                width?: number;
                /** @description Size of the image or video in bytes */
                size?: number;
                /** @description Extension of the image or video in lowercase with a dot (e.g. '.jpg') */
                extension?: string;
            };
            /** @description Name of the image */
            name?: string;
            /** @description ID of the uploader */
            uploader_id?: string;
            /** @description List of per-task states obtained aggregating the annotation state with the revisit information */
            annotation_state_per_task?: {
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                task_id?: string;
                /**
                 * @description Annotation state of the media for this task
                 * @enum {string|null}
                 */
                state?: 'annotated' | 'partially_annotated' | 'none' | 'to_revisit' | null;
            }[];
            /** @description Media preprocessing related information */
            preprocessing?: {
                /**
                 * @description Status of the preprocessing operation
                 * @enum {string}
                 */
                status: 'SCHEDULED' | 'IN_PROGRESS' | 'FINISHED' | 'FAILED';
                /** @description Message associated with the preprocessing operation */
                message?: string;
            };
            /** @description Relative URL to the media thumbnail */
            thumbnail?: string;
            /**
             * @description Type of media. 'image', 'video' or 'video_frame'
             * @enum {string}
             */
            type?: 'image';
            /** @description Upload time of the image */
            upload_time?: string;
        };
        video_annotation_statistics: {
            /** @description Number of annotated frames within video */
            annotated?: number;
            /** @description Number of partially annotated frames within video */
            partially_annotated?: number;
            /** @description Number of unannotated frames within video */
            unannotated?: number;
        };
        /** Video */
        video: {
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            id?: string;
            media_information?: {
                /** @description Display URL of the image or video */
                display_url?: string;
                /** @description Duration of the video */
                duration?: number;
                /** @description Number of frames in the video */
                frame_count?: number;
                /** @description Frame stride of the video */
                frame_stride?: number;
                /** @description Frame rate of the video */
                frame_rate?: number;
                /** @description Height of the video */
                height?: number;
                /** @description Width of the video */
                width?: number;
                /** @description Size of the video in bytes */
                size?: number;
            };
            /** @description Name of the video */
            name?: string;
            /** @description ID of the uploader */
            uploader_id?: string;
            /** @description List of per-task states obtained aggregating the annotation state with the revisit information */
            annotation_state_per_task?: {
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                task_id?: string;
                /**
                 * @description Annotation state of the media for this task
                 * @enum {string|null}
                 */
                state?: 'annotated' | 'partially_annotated' | 'none' | 'to_revisit' | null;
            }[];
            annotation_statistics?: {
                /** @description Number of annotated frames within video */
                annotated?: number;
                /** @description Number of partially annotated frames within video */
                partially_annotated?: number;
                /** @description Number of unannotated frames within video */
                unannotated?: number;
            };
            /** @description Media preprocessing related information */
            preprocessing?: {
                /**
                 * @description Status of the preprocessing operation
                 * @enum {string}
                 */
                status: 'SCHEDULED' | 'IN_PROGRESS' | 'FINISHED' | 'FAILED';
                /** @description Message associated with the preprocessing operation */
                message?: string;
            };
            /** @description Relative URL to the video thumbnail */
            thumbnail?: string;
            /**
             * @description Type of media. 'image', 'video' or 'video_frame'
             * @enum {string}
             */
            type?: 'video';
            /** @description Upload time of the video */
            upload_time?: string;
        };
        filtered_frames_in_video: {
            /** @description List of video frame indices */
            video_frame_indices?: number[];
            /** @description List of video frame items */
            video_frames?: {
                /**
                 * Format: int32
                 * @description The video frame index
                 */
                id?: number;
                media_information?: {
                    /** @description Display URL of the image or video */
                    display_url?: string;
                    /** @description Duration of the video */
                    duration?: number;
                    /** @description Number of frames in the video */
                    frame_count?: number;
                    /** @description Frame stride of the video */
                    frame_stride?: number;
                    /** @description Frame rate of the video */
                    frame_rate?: number;
                    /** @description Height of the video */
                    height?: number;
                    /** @description Width of the video */
                    width?: number;
                    /** @description Size of the video in bytes */
                    size?: number;
                };
                /** @description Name of the image */
                name?: string;
                /** @description List of per-task states obtained aggregating the annotation state with the revisit information */
                annotation_state_per_task?: {
                    /**
                     * @description Mongo ID of the object
                     * @example 60d31793d5f1fb7e6e3c1a4c
                     */
                    task_id?: string;
                    /**
                     * @description Annotation state of the media for this task
                     * @enum {string|null}
                     */
                    state?: 'annotated' | 'partially_annotated' | 'none' | 'to_revisit' | null;
                }[];
                /** @description Relative URL to the video frame thumbnail */
                thumbnail?: string;
                /**
                 * @description Type of media. 'image' for images, 'video' for video and 'video_frame' for video frames.
                 * @enum {string}
                 */
                type?: 'video_frame';
                /** @description Upload time of the media file */
                upload_time?: string;
                /** @description Optional ID of the annotation scene if filtering in a specific training revision */
                annotation_scene_id?: string;
                /** @description Optional ID of the roi id if filtering in a specific training revision */
                roi_id?: string;
                /** @description Optional ID of the user that last edited the annotation. */
                last_annotator_id?: string;
            }[];
            video_information?: {
                /** @description Display URL of the image or video */
                display_url?: string;
                /** @description Duration of the video */
                duration?: number;
                /** @description Number of frames in the video */
                frame_count?: number;
                /** @description Frame stride of the video */
                frame_stride?: number;
                /** @description Frame rate of the video */
                frame_rate?: number;
                /** @description Height of the video */
                height?: number;
                /** @description Width of the video */
                width?: number;
                /** @description Size of the video in bytes */
                size?: number;
            };
            /** @description URL to the next page of results, if the same parameters are used. */
            next_page?: string;
            /** @description Total video frames that match the query. */
            total_matched_video_frames?: number;
        };
        /**
         * @description A UUID, used to identify an annotation.
         * @example e42cf382-5f7b-4fda-980a-fa0fab00243c
         */
        'uuid-2': string;
        /**
         * Rectangle
         * @example {
         *       "type": "RECTANGLE",
         *       "x": 320,
         *       "y": 240,
         *       "width": 50,
         *       "height": 25
         *     }
         */
        rectangle: {
            /**
             * @description Type of the shape.
             * @enum {string}
             */
            type: 'RECTANGLE';
            /** @description x-coordinate of the left side of the rectangle. Coordinates are pixel values. */
            x: number;
            /** @description y-coordinate of the top of the rectangle. Coordinates are pixel values. */
            y: number;
            /** @description Width of the rectangle. Coordinates are pixel values. */
            width: number;
            /** @description Height of the rectangle. Coordinates are pixel values. */
            height: number;
        };
        /**
         * Point
         * @example {
         *       "x": 10,
         *       "y": 10
         *     }
         */
        point: {
            /** @description x-coordinate of the point. Coordinates are pixel values. */
            x: number;
            /** @description y-coordinate of the point. Coordinates are pixel values. */
            y: number;
        };
        /**
         * Polygon
         * @example {
         *       "type": "POLYGON",
         *       "point": [
         *         {
         *           "x": 10,
         *           "y": 10
         *         },
         *         {
         *           "x": 20,
         *           "y": 20
         *         },
         *         {
         *           "x": 10,
         *           "y": 20
         *         }
         *       ]
         *     }
         */
        polygon: {
            /**
             * @description Type of the shape.
             * @enum {string}
             */
            type: 'POLYGON';
            /** @description Array of points that define the polygon. */
            points: {
                /** @description x-coordinate of the point. Coordinates are pixel values. */
                x: number;
                /** @description y-coordinate of the point. Coordinates are pixel values. */
                y: number;
            }[];
        };
        /**
         * Ellipse
         * @example {
         *       "type": "ELLIPSE",
         *       "x": 300,
         *       "y": 250,
         *       "width": 75,
         *       "height": 25
         *     }
         */
        ellipse: {
            /**
             * @description Type of the shape.
             * @enum {string}
             */
            type: 'ELLIPSE';
            /** @description Lowest x-coordinate of the ellipse. Coordinates are pixel values. */
            x: number;
            /** @description Lowest y-coordinate of the ellipse. Coordinates are pixel values. */
            y: number;
            /** @description Width of the ellipse. Coordinates are pixel values. */
            width: number;
            /** @description Height of the ellipse. Coordinates are pixel values. */
            height: number;
        };
        /**
         * Rotated Rectangle
         * @example {
         *       "type": "ROTATED_RECTANGLE",
         *       "x": 320,
         *       "y": 240,
         *       "width": 50,
         *       "height": 25,
         *       "angle": 45
         *     }
         */
        rotated_rectangle: {
            /**
             * @description Type of the shape.
             * @enum {string}
             */
            type: 'ROTATED_RECTANGLE';
            /** @description Center x-coordinate of the rotated rectangle. Coordinates are pixel values. */
            x: number;
            /** @description Center y-coordinate of the rotated rectangle. Coordinates are pixel values. */
            y: number;
            /** @description Width of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values. */
            width: number;
            /** @description Height of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values. */
            height: number;
            /** @description Clockwise angle in degrees for the rectangle. */
            angle: number;
        };
        /**
         * Keypoint
         * @example {
         *       "type": "KEYPOINT",
         *       "x": 320,
         *       "y": 240,
         *       "is_visible": true
         *     }
         */
        keypoint: {
            /**
             * @description Type of the shape.
             * @enum {string}
             */
            type: 'KEYPOINT';
            /** @description X-coordinate of the keypoint. Coordinates are pixel values. */
            x: number;
            /** @description Y-coordinate of the keypoint. Coordinates are pixel values. */
            y: number;
            /** @description Indicates whether the feature the keypoint is describing is visible in the image. */
            is_visible: boolean;
        };
        shape:
            | {
                  /**
                   * @description Type of the shape.
                   * @enum {string}
                   */
                  type: 'RECTANGLE';
                  /** @description x-coordinate of the left side of the rectangle. Coordinates are pixel values. */
                  x: number;
                  /** @description y-coordinate of the top of the rectangle. Coordinates are pixel values. */
                  y: number;
                  /** @description Width of the rectangle. Coordinates are pixel values. */
                  width: number;
                  /** @description Height of the rectangle. Coordinates are pixel values. */
                  height: number;
              }
            | {
                  /**
                   * @description Type of the shape.
                   * @enum {string}
                   */
                  type: 'POLYGON';
                  /** @description Array of points that define the polygon. */
                  points: {
                      /** @description x-coordinate of the point. Coordinates are pixel values. */
                      x: number;
                      /** @description y-coordinate of the point. Coordinates are pixel values. */
                      y: number;
                  }[];
              }
            | {
                  /**
                   * @description Type of the shape.
                   * @enum {string}
                   */
                  type: 'ELLIPSE';
                  /** @description Lowest x-coordinate of the ellipse. Coordinates are pixel values. */
                  x: number;
                  /** @description Lowest y-coordinate of the ellipse. Coordinates are pixel values. */
                  y: number;
                  /** @description Width of the ellipse. Coordinates are pixel values. */
                  width: number;
                  /** @description Height of the ellipse. Coordinates are pixel values. */
                  height: number;
              }
            | {
                  /**
                   * @description Type of the shape.
                   * @enum {string}
                   */
                  type: 'ROTATED_RECTANGLE';
                  /** @description Center x-coordinate of the rotated rectangle. Coordinates are pixel values. */
                  x: number;
                  /** @description Center y-coordinate of the rotated rectangle. Coordinates are pixel values. */
                  y: number;
                  /** @description Width of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values. */
                  width: number;
                  /** @description Height of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values. */
                  height: number;
                  /** @description Clockwise angle in degrees for the rectangle. */
                  angle: number;
              }
            | {
                  /**
                   * @description Type of the shape.
                   * @enum {string}
                   */
                  type: 'KEYPOINT';
                  /** @description X-coordinate of the keypoint. Coordinates are pixel values. */
                  x: number;
                  /** @description Y-coordinate of the keypoint. Coordinates are pixel values. */
                  y: number;
                  /** @description Indicates whether the feature the keypoint is describing is visible in the image. */
                  is_visible: boolean;
              };
        scored_label: {
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            id: string;
        };
        annotation: {
            /**
             * @description A UUID, used to identify an annotation.
             * @example e42cf382-5f7b-4fda-980a-fa0fab00243c
             */
            id?: string;
            shape:
                | {
                      /**
                       * @description Type of the shape.
                       * @enum {string}
                       */
                      type: 'RECTANGLE';
                      /** @description x-coordinate of the left side of the rectangle. Coordinates are pixel values. */
                      x: number;
                      /** @description y-coordinate of the top of the rectangle. Coordinates are pixel values. */
                      y: number;
                      /** @description Width of the rectangle. Coordinates are pixel values. */
                      width: number;
                      /** @description Height of the rectangle. Coordinates are pixel values. */
                      height: number;
                  }
                | {
                      /**
                       * @description Type of the shape.
                       * @enum {string}
                       */
                      type: 'POLYGON';
                      /** @description Array of points that define the polygon. */
                      points: {
                          /** @description x-coordinate of the point. Coordinates are pixel values. */
                          x: number;
                          /** @description y-coordinate of the point. Coordinates are pixel values. */
                          y: number;
                      }[];
                  }
                | {
                      /**
                       * @description Type of the shape.
                       * @enum {string}
                       */
                      type: 'ELLIPSE';
                      /** @description Lowest x-coordinate of the ellipse. Coordinates are pixel values. */
                      x: number;
                      /** @description Lowest y-coordinate of the ellipse. Coordinates are pixel values. */
                      y: number;
                      /** @description Width of the ellipse. Coordinates are pixel values. */
                      width: number;
                      /** @description Height of the ellipse. Coordinates are pixel values. */
                      height: number;
                  }
                | {
                      /**
                       * @description Type of the shape.
                       * @enum {string}
                       */
                      type: 'ROTATED_RECTANGLE';
                      /** @description Center x-coordinate of the rotated rectangle. Coordinates are pixel values. */
                      x: number;
                      /** @description Center y-coordinate of the rotated rectangle. Coordinates are pixel values. */
                      y: number;
                      /** @description Width of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values. */
                      width: number;
                      /** @description Height of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values. */
                      height: number;
                      /** @description Clockwise angle in degrees for the rectangle. */
                      angle: number;
                  }
                | {
                      /**
                       * @description Type of the shape.
                       * @enum {string}
                       */
                      type: 'KEYPOINT';
                      /** @description X-coordinate of the keypoint. Coordinates are pixel values. */
                      x: number;
                      /** @description Y-coordinate of the keypoint. Coordinates are pixel values. */
                      y: number;
                      /** @description Indicates whether the feature the keypoint is describing is visible in the image. */
                      is_visible: boolean;
                  };
            /** @description List of labels */
            labels: {
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                id: string;
            }[];
            /** @description List of labels IDs for which the annotation should be revisited */
            labels_to_revisit?: string[];
        };
        annotation_scene_image: {
            /** @description List of annotations */
            annotations: {
                /**
                 * @description A UUID, used to identify an annotation.
                 * @example e42cf382-5f7b-4fda-980a-fa0fab00243c
                 */
                id?: string;
                shape:
                    | {
                          /**
                           * @description Type of the shape.
                           * @enum {string}
                           */
                          type: 'RECTANGLE';
                          /** @description x-coordinate of the left side of the rectangle. Coordinates are pixel values. */
                          x: number;
                          /** @description y-coordinate of the top of the rectangle. Coordinates are pixel values. */
                          y: number;
                          /** @description Width of the rectangle. Coordinates are pixel values. */
                          width: number;
                          /** @description Height of the rectangle. Coordinates are pixel values. */
                          height: number;
                      }
                    | {
                          /**
                           * @description Type of the shape.
                           * @enum {string}
                           */
                          type: 'POLYGON';
                          /** @description Array of points that define the polygon. */
                          points: {
                              /** @description x-coordinate of the point. Coordinates are pixel values. */
                              x: number;
                              /** @description y-coordinate of the point. Coordinates are pixel values. */
                              y: number;
                          }[];
                      }
                    | {
                          /**
                           * @description Type of the shape.
                           * @enum {string}
                           */
                          type: 'ELLIPSE';
                          /** @description Lowest x-coordinate of the ellipse. Coordinates are pixel values. */
                          x: number;
                          /** @description Lowest y-coordinate of the ellipse. Coordinates are pixel values. */
                          y: number;
                          /** @description Width of the ellipse. Coordinates are pixel values. */
                          width: number;
                          /** @description Height of the ellipse. Coordinates are pixel values. */
                          height: number;
                      }
                    | {
                          /**
                           * @description Type of the shape.
                           * @enum {string}
                           */
                          type: 'ROTATED_RECTANGLE';
                          /** @description Center x-coordinate of the rotated rectangle. Coordinates are pixel values. */
                          x: number;
                          /** @description Center y-coordinate of the rotated rectangle. Coordinates are pixel values. */
                          y: number;
                          /** @description Width of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values. */
                          width: number;
                          /** @description Height of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values. */
                          height: number;
                          /** @description Clockwise angle in degrees for the rectangle. */
                          angle: number;
                      }
                    | {
                          /**
                           * @description Type of the shape.
                           * @enum {string}
                           */
                          type: 'KEYPOINT';
                          /** @description X-coordinate of the keypoint. Coordinates are pixel values. */
                          x: number;
                          /** @description Y-coordinate of the keypoint. Coordinates are pixel values. */
                          y: number;
                          /** @description Indicates whether the feature the keypoint is describing is visible in the image. */
                          is_visible: boolean;
                      };
                /** @description List of labels */
                labels: {
                    /**
                     * @description Mongo ID of the object
                     * @example 60d31793d5f1fb7e6e3c1a4c
                     */
                    id: string;
                }[];
                /** @description List of labels IDs for which the annotation should be revisited */
                labels_to_revisit?: string[];
            }[];
            media_identifier?: {
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                image_id?: string;
                /**
                 * @description Type of media. 'image' for images, 'video' for videos.
                 * @enum {string}
                 */
                type?: 'image';
            };
            /** @description Modification date */
            modified?: string;
            /** @description List of labels IDs for which the scene (full-image ROI) should be revisited */
            labels_to_revisit_full_scene?: string[];
        };
        'scored_label-2': {
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            id?: string;
            /**
             * Probability
             * Format: float
             * @description Estimated probability of a prediction. For annotations, this is set to 1.
             */
            probability?: number;
            source?: {
                /** @description User name of the user that added the label or accepted the prediction */
                user_id?: string | null;
                /** @description Model id of the model that predicted the label */
                model_id?: string | null;
                /** @description Model storage id of model that predicted the label */
                model_storage_id?: string | null;
            };
        };
        'annotation-2': {
            /**
             * @description A UUID, used to identify an annotation.
             * @example e42cf382-5f7b-4fda-980a-fa0fab00243c
             */
            id: string;
            shape?:
                | {
                      /**
                       * @description Type of the shape.
                       * @enum {string}
                       */
                      type: 'RECTANGLE';
                      /** @description x-coordinate of the left side of the rectangle. Coordinates are pixel values. */
                      x: number;
                      /** @description y-coordinate of the top of the rectangle. Coordinates are pixel values. */
                      y: number;
                      /** @description Width of the rectangle. Coordinates are pixel values. */
                      width: number;
                      /** @description Height of the rectangle. Coordinates are pixel values. */
                      height: number;
                  }
                | {
                      /**
                       * @description Type of the shape.
                       * @enum {string}
                       */
                      type: 'POLYGON';
                      /** @description Array of points that define the polygon. */
                      points: {
                          /** @description x-coordinate of the point. Coordinates are pixel values. */
                          x: number;
                          /** @description y-coordinate of the point. Coordinates are pixel values. */
                          y: number;
                      }[];
                  }
                | {
                      /**
                       * @description Type of the shape.
                       * @enum {string}
                       */
                      type: 'ELLIPSE';
                      /** @description Lowest x-coordinate of the ellipse. Coordinates are pixel values. */
                      x: number;
                      /** @description Lowest y-coordinate of the ellipse. Coordinates are pixel values. */
                      y: number;
                      /** @description Width of the ellipse. Coordinates are pixel values. */
                      width: number;
                      /** @description Height of the ellipse. Coordinates are pixel values. */
                      height: number;
                  }
                | {
                      /**
                       * @description Type of the shape.
                       * @enum {string}
                       */
                      type: 'ROTATED_RECTANGLE';
                      /** @description Center x-coordinate of the rotated rectangle. Coordinates are pixel values. */
                      x: number;
                      /** @description Center y-coordinate of the rotated rectangle. Coordinates are pixel values. */
                      y: number;
                      /** @description Width of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values. */
                      width: number;
                      /** @description Height of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values. */
                      height: number;
                      /** @description Clockwise angle in degrees for the rectangle. */
                      angle: number;
                  }
                | {
                      /**
                       * @description Type of the shape.
                       * @enum {string}
                       */
                      type: 'KEYPOINT';
                      /** @description X-coordinate of the keypoint. Coordinates are pixel values. */
                      x: number;
                      /** @description Y-coordinate of the keypoint. Coordinates are pixel values. */
                      y: number;
                      /** @description Indicates whether the feature the keypoint is describing is visible in the image. */
                      is_visible: boolean;
                  };
            /** @description List of labels */
            labels: {
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                id?: string;
                /**
                 * Probability
                 * Format: float
                 * @description Estimated probability of a prediction. For annotations, this is set to 1.
                 */
                probability?: number;
                source?: {
                    /** @description User name of the user that added the label or accepted the prediction */
                    user_id?: string | null;
                    /** @description Model id of the model that predicted the label */
                    model_id?: string | null;
                    /** @description Model storage id of model that predicted the label */
                    model_storage_id?: string | null;
                };
            }[];
            /** @description Modification date */
            modified: string;
            /** @description List of labels IDs for which the annotation should be revisited */
            labels_to_revisit?: string[];
        };
        /**
         * Annotation state aggregated per task
         * @example {
         *       "task_id": "61012cdb1d38a5e71ef3bafd",
         *       "state": "to_revisit"
         *     }
         */
        'annotation_state_per_task-2': {
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            task_id?: string;
            /**
             * @description Overall state obtained aggregating the annotation states with the 'revisit' information on a per-task basis. This only has meaning for an  image/frame/scene, as a video does not have an annotation scene. - Image/VideoFrame/AnnotationScene: - to_revisit: Some annotations need to be revisited by the user for this task - annotated: All the ROIs for this task are annotated (contain a label for the task) - partially_annotated: Some ROIs for this task do not contain labels, other ones do - none: No label is present for this task - Video: - all tasks are set to null
             * @enum {string|null}
             */
            state?: 'to_revisit' | 'annotated' | 'partially_annotated' | 'none' | null;
        };
        'annotation_scene_image-2': {
            /** @description List of annotations */
            annotations: {
                /**
                 * @description A UUID, used to identify an annotation.
                 * @example e42cf382-5f7b-4fda-980a-fa0fab00243c
                 */
                id: string;
                shape?:
                    | {
                          /**
                           * @description Type of the shape.
                           * @enum {string}
                           */
                          type: 'RECTANGLE';
                          /** @description x-coordinate of the left side of the rectangle. Coordinates are pixel values. */
                          x: number;
                          /** @description y-coordinate of the top of the rectangle. Coordinates are pixel values. */
                          y: number;
                          /** @description Width of the rectangle. Coordinates are pixel values. */
                          width: number;
                          /** @description Height of the rectangle. Coordinates are pixel values. */
                          height: number;
                      }
                    | {
                          /**
                           * @description Type of the shape.
                           * @enum {string}
                           */
                          type: 'POLYGON';
                          /** @description Array of points that define the polygon. */
                          points: {
                              /** @description x-coordinate of the point. Coordinates are pixel values. */
                              x: number;
                              /** @description y-coordinate of the point. Coordinates are pixel values. */
                              y: number;
                          }[];
                      }
                    | {
                          /**
                           * @description Type of the shape.
                           * @enum {string}
                           */
                          type: 'ELLIPSE';
                          /** @description Lowest x-coordinate of the ellipse. Coordinates are pixel values. */
                          x: number;
                          /** @description Lowest y-coordinate of the ellipse. Coordinates are pixel values. */
                          y: number;
                          /** @description Width of the ellipse. Coordinates are pixel values. */
                          width: number;
                          /** @description Height of the ellipse. Coordinates are pixel values. */
                          height: number;
                      }
                    | {
                          /**
                           * @description Type of the shape.
                           * @enum {string}
                           */
                          type: 'ROTATED_RECTANGLE';
                          /** @description Center x-coordinate of the rotated rectangle. Coordinates are pixel values. */
                          x: number;
                          /** @description Center y-coordinate of the rotated rectangle. Coordinates are pixel values. */
                          y: number;
                          /** @description Width of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values. */
                          width: number;
                          /** @description Height of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values. */
                          height: number;
                          /** @description Clockwise angle in degrees for the rectangle. */
                          angle: number;
                      }
                    | {
                          /**
                           * @description Type of the shape.
                           * @enum {string}
                           */
                          type: 'KEYPOINT';
                          /** @description X-coordinate of the keypoint. Coordinates are pixel values. */
                          x: number;
                          /** @description Y-coordinate of the keypoint. Coordinates are pixel values. */
                          y: number;
                          /** @description Indicates whether the feature the keypoint is describing is visible in the image. */
                          is_visible: boolean;
                      };
                /** @description List of labels */
                labels: {
                    /**
                     * @description Mongo ID of the object
                     * @example 60d31793d5f1fb7e6e3c1a4c
                     */
                    id?: string;
                    /**
                     * Probability
                     * Format: float
                     * @description Estimated probability of a prediction. For annotations, this is set to 1.
                     */
                    probability?: number;
                    source?: {
                        /** @description User name of the user that added the label or accepted the prediction */
                        user_id?: string | null;
                        /** @description Model id of the model that predicted the label */
                        model_id?: string | null;
                        /** @description Model storage id of model that predicted the label */
                        model_storage_id?: string | null;
                    };
                }[];
                /** @description Modification date */
                modified: string;
                /** @description List of labels IDs for which the annotation should be revisited */
                labels_to_revisit?: string[];
            }[];
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            id: string;
            /**
             * @description Kind of annotation (prediction or annotation).
             * @enum {string}
             */
            kind: 'prediction' | 'annotation';
            media_identifier: {
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                image_id?: string;
                /**
                 * @description Type of media. 'image' for images, 'video' for videos.
                 * @enum {string}
                 */
                type?: 'image';
            };
            /** @description Modification date */
            modified: string;
            /** @description List of labels IDs for which the scene (full-image ROI) should be revisited */
            labels_to_revisit_full_scene: string[];
            /** @description List of per-task states obtained aggregating the annotation state with the revisit information */
            annotation_state_per_task: {
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                task_id?: string;
                /**
                 * @description Overall state obtained aggregating the annotation states with the 'revisit' information on a per-task basis. This only has meaning for an  image/frame/scene, as a video does not have an annotation scene. - Image/VideoFrame/AnnotationScene: - to_revisit: Some annotations need to be revisited by the user for this task - annotated: All the ROIs for this task are annotated (contain a label for the task) - partially_annotated: Some ROIs for this task do not contain labels, other ones do - none: No label is present for this task - Video: - all tasks are set to null
                 * @enum {string|null}
                 */
                state?: 'to_revisit' | 'annotated' | 'partially_annotated' | 'none' | null;
            }[];
        };
        /** @enum {string} */
        latest: 'latest';
        label_only: boolean;
        annotation_scene_video_frame: {
            /** @description List of annotations */
            annotations: {
                /**
                 * @description A UUID, used to identify an annotation.
                 * @example e42cf382-5f7b-4fda-980a-fa0fab00243c
                 */
                id?: string;
                shape:
                    | {
                          /**
                           * @description Type of the shape.
                           * @enum {string}
                           */
                          type: 'RECTANGLE';
                          /** @description x-coordinate of the left side of the rectangle. Coordinates are pixel values. */
                          x: number;
                          /** @description y-coordinate of the top of the rectangle. Coordinates are pixel values. */
                          y: number;
                          /** @description Width of the rectangle. Coordinates are pixel values. */
                          width: number;
                          /** @description Height of the rectangle. Coordinates are pixel values. */
                          height: number;
                      }
                    | {
                          /**
                           * @description Type of the shape.
                           * @enum {string}
                           */
                          type: 'POLYGON';
                          /** @description Array of points that define the polygon. */
                          points: {
                              /** @description x-coordinate of the point. Coordinates are pixel values. */
                              x: number;
                              /** @description y-coordinate of the point. Coordinates are pixel values. */
                              y: number;
                          }[];
                      }
                    | {
                          /**
                           * @description Type of the shape.
                           * @enum {string}
                           */
                          type: 'ELLIPSE';
                          /** @description Lowest x-coordinate of the ellipse. Coordinates are pixel values. */
                          x: number;
                          /** @description Lowest y-coordinate of the ellipse. Coordinates are pixel values. */
                          y: number;
                          /** @description Width of the ellipse. Coordinates are pixel values. */
                          width: number;
                          /** @description Height of the ellipse. Coordinates are pixel values. */
                          height: number;
                      }
                    | {
                          /**
                           * @description Type of the shape.
                           * @enum {string}
                           */
                          type: 'ROTATED_RECTANGLE';
                          /** @description Center x-coordinate of the rotated rectangle. Coordinates are pixel values. */
                          x: number;
                          /** @description Center y-coordinate of the rotated rectangle. Coordinates are pixel values. */
                          y: number;
                          /** @description Width of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values. */
                          width: number;
                          /** @description Height of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values. */
                          height: number;
                          /** @description Clockwise angle in degrees for the rectangle. */
                          angle: number;
                      }
                    | {
                          /**
                           * @description Type of the shape.
                           * @enum {string}
                           */
                          type: 'KEYPOINT';
                          /** @description X-coordinate of the keypoint. Coordinates are pixel values. */
                          x: number;
                          /** @description Y-coordinate of the keypoint. Coordinates are pixel values. */
                          y: number;
                          /** @description Indicates whether the feature the keypoint is describing is visible in the image. */
                          is_visible: boolean;
                      };
                /** @description List of labels */
                labels: {
                    /**
                     * @description Mongo ID of the object
                     * @example 60d31793d5f1fb7e6e3c1a4c
                     */
                    id: string;
                }[];
                /** @description List of labels IDs for which the annotation should be revisited */
                labels_to_revisit?: string[];
            }[];
            media_identifier?: {
                /** Format: int32 */
                frame_index?: number;
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                video_id?: string;
                /**
                 * @description Type of media. 'image' for images, 'video' for videos.
                 * @enum {string}
                 */
                type?: 'video_frame';
            };
            /** @description Modification date */
            modified?: string;
            /** @description List of labels IDs for which the scene (full-image ROI) should be revisited */
            labels_to_revisit_full_scene?: string[];
        };
        'annotation_scene_video_frame-2': {
            /** @description List of annotations */
            annotations?: {
                /**
                 * @description A UUID, used to identify an annotation.
                 * @example e42cf382-5f7b-4fda-980a-fa0fab00243c
                 */
                id: string;
                shape?:
                    | {
                          /**
                           * @description Type of the shape.
                           * @enum {string}
                           */
                          type: 'RECTANGLE';
                          /** @description x-coordinate of the left side of the rectangle. Coordinates are pixel values. */
                          x: number;
                          /** @description y-coordinate of the top of the rectangle. Coordinates are pixel values. */
                          y: number;
                          /** @description Width of the rectangle. Coordinates are pixel values. */
                          width: number;
                          /** @description Height of the rectangle. Coordinates are pixel values. */
                          height: number;
                      }
                    | {
                          /**
                           * @description Type of the shape.
                           * @enum {string}
                           */
                          type: 'POLYGON';
                          /** @description Array of points that define the polygon. */
                          points: {
                              /** @description x-coordinate of the point. Coordinates are pixel values. */
                              x: number;
                              /** @description y-coordinate of the point. Coordinates are pixel values. */
                              y: number;
                          }[];
                      }
                    | {
                          /**
                           * @description Type of the shape.
                           * @enum {string}
                           */
                          type: 'ELLIPSE';
                          /** @description Lowest x-coordinate of the ellipse. Coordinates are pixel values. */
                          x: number;
                          /** @description Lowest y-coordinate of the ellipse. Coordinates are pixel values. */
                          y: number;
                          /** @description Width of the ellipse. Coordinates are pixel values. */
                          width: number;
                          /** @description Height of the ellipse. Coordinates are pixel values. */
                          height: number;
                      }
                    | {
                          /**
                           * @description Type of the shape.
                           * @enum {string}
                           */
                          type: 'ROTATED_RECTANGLE';
                          /** @description Center x-coordinate of the rotated rectangle. Coordinates are pixel values. */
                          x: number;
                          /** @description Center y-coordinate of the rotated rectangle. Coordinates are pixel values. */
                          y: number;
                          /** @description Width of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values. */
                          width: number;
                          /** @description Height of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values. */
                          height: number;
                          /** @description Clockwise angle in degrees for the rectangle. */
                          angle: number;
                      }
                    | {
                          /**
                           * @description Type of the shape.
                           * @enum {string}
                           */
                          type: 'KEYPOINT';
                          /** @description X-coordinate of the keypoint. Coordinates are pixel values. */
                          x: number;
                          /** @description Y-coordinate of the keypoint. Coordinates are pixel values. */
                          y: number;
                          /** @description Indicates whether the feature the keypoint is describing is visible in the image. */
                          is_visible: boolean;
                      };
                /** @description List of labels */
                labels: {
                    /**
                     * @description Mongo ID of the object
                     * @example 60d31793d5f1fb7e6e3c1a4c
                     */
                    id?: string;
                    /**
                     * Probability
                     * Format: float
                     * @description Estimated probability of a prediction. For annotations, this is set to 1.
                     */
                    probability?: number;
                    source?: {
                        /** @description User name of the user that added the label or accepted the prediction */
                        user_id?: string | null;
                        /** @description Model id of the model that predicted the label */
                        model_id?: string | null;
                        /** @description Model storage id of model that predicted the label */
                        model_storage_id?: string | null;
                    };
                }[];
                /** @description Modification date */
                modified: string;
                /** @description List of labels IDs for which the annotation should be revisited */
                labels_to_revisit?: string[];
            }[];
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            id?: string;
            /**
             * @description Kind of annotation (prediction or annotation).
             * @enum {string}
             */
            kind?: 'prediction' | 'annotation';
            media_identifier?: {
                frame_index?: number;
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                video_id?: string;
                /**
                 * @description Type of media. 'image' for images, 'video' for videos.
                 * @enum {string}
                 */
                type?: 'video_frame';
            };
            /** @description Modification date */
            modified?: string;
            /** @description List of labels IDs for which the scene (full-image ROI) should be revisited */
            labels_to_revisit_full_scene?: string[];
            /** @description List of per-task states obtained aggregating the annotation state with the revisit information */
            annotation_state_per_task?: {
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                task_id?: string;
                /**
                 * @description Overall state obtained aggregating the annotation states with the 'revisit' information on a per-task basis. This only has meaning for an  image/frame/scene, as a video does not have an annotation scene. - Image/VideoFrame/AnnotationScene: - to_revisit: Some annotations need to be revisited by the user for this task - annotated: All the ROIs for this task are annotated (contain a label for the task) - partially_annotated: Some ROIs for this task do not contain labels, other ones do - none: No label is present for this task - Video: - all tasks are set to null
                 * @enum {string|null}
                 */
                state?: 'to_revisit' | 'annotated' | 'partially_annotated' | 'none' | null;
            }[];
        };
        range_labels: {
            /** @description Frame index that represents the left endpoint (inclusive) of the range */
            start_frame: number;
            /** @description Frame index that represents the right endpoint (inclusive) of the range */
            end_frame: number;
            /** @description ids of the labels assigned to the range */
            label_ids: string[];
        };
        video_annotation_range: {
            /**
             * @description A UUID, used to identify an annotation.
             * @example e42cf382-5f7b-4fda-980a-fa0fab00243c
             */
            video_id?: string;
            /** @description List of range labels */
            range_labels: {
                /** @description Frame index that represents the left endpoint (inclusive) of the range */
                start_frame: number;
                /** @description Frame index that represents the right endpoint (inclusive) of the range */
                end_frame: number;
                /** @description ids of the labels assigned to the range */
                label_ids: string[];
            }[];
        };
        'range_labels-2': {
            /** @description Frame index that represents the left endpoint (inclusive) of the range */
            start_frame: number;
            /** @description Frame index that represents the right endpoint (inclusive) of the range */
            end_frame: number;
            /** @description ids of the labels to assign to the range */
            label_ids: string[];
        };
        'video_annotation_range-2': {
            /** @description List of frame ranges and their associated labels */
            range_labels: {
                /** @description Frame index that represents the left endpoint (inclusive) of the range */
                start_frame: number;
                /** @description Frame index that represents the right endpoint (inclusive) of the range */
                end_frame: number;
                /** @description ids of the labels to assign to the range */
                label_ids: string[];
            }[];
        };
        /**
         * @description The current support status of the model architecture. 'Active' algorithms are fully supported and maintained.
         *     'Deprecated' ones are still supported, but not recommended for training; in a later version, they may be
         *     discontinued and become 'obsolete', which means that new models cannot be trained with such algorithms.
         * @enum {string}
         */
        model_template_lifecycle_stage: 'active' | 'deprecated' | 'obsolete';
        supported_algorithm: {
            /** @description List of supported algorithms */
            supported_algorithms?: {
                /** @description Name of the algorithm */
                name?: string;
                /**
                 * @description Task type of the algorithm.
                 * @enum {string}
                 */
                task_type?:
                    | 'detection'
                    | 'rotated_detection'
                    | 'anomaly'
                    | 'segmentation'
                    | 'instance_segmentation'
                    | 'classification'
                    | 'keypoint_detection';
                /**
                 * Format: float
                 * @description Storage size of the model, in MB
                 */
                model_size?: number;
                /** @description Unique identifier for the algorithm */
                model_template_id?: string;
                /**
                 * Format: float
                 * @description Theoretical complexity of the model, in billions of operations
                 */
                gigaflops?: number;
                /** @description A short summary that gives information about the algorithm */
                summary?: string;
                /**
                 * @deprecated
                 * @description Boolean that indicates whether the algorithm supports automatic hyper parameter optimization.
                 *     This field is deprecated and should not be used, it will be removed in the future.
                 */
                supports_auto_hpo?: boolean;
                /** @description Boolean that indicates whether the model template is the default selection for the task */
                default_algorithm?: boolean;
                /**
                 * @description The category of the model template. Some algorithms focus more on accuracy, others on inference speed.
                 * @enum {string}
                 */
                performance_category?: 'balance' | 'speed' | 'accuracy' | 'other';
                /**
                 * @description The current support status of the model architecture. 'Active' algorithms are fully supported and maintained.
                 *     'Deprecated' ones are still supported, but not recommended for training; in a later version, they may be
                 *     discontinued and become 'obsolete', which means that new models cannot be trained with such algorithms.
                 * @enum {string}
                 */
                lifecycle_stage?: 'active' | 'deprecated' | 'obsolete';
            }[];
        };
        /** Hyper parameter group entity identifier */
        hyper_parameter_group_entity_identifier: {
            workspace_id?: string;
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            model_storage_id: string;
            /** @description The name of the hyper parameter group */
            group_name: string;
            /**
             * @description Describes the type of the component. For hyper parameter groups, type is always set to HYPER_PARAMETER_GROUP
             * @enum {string}
             */
            type: 'HYPER_PARAMETER_GROUP';
        };
        parameter: {
            /** @description Value to set the parameter to. */
            value: string | number | boolean;
            /** @description Name to identify the parameter by in the system. */
            name: string;
        };
        /** Parameter group */
        group: {
            /** @description Name of the parameter group */
            name: string;
            /** @description Array of parameters */
            parameters: {
                /** @description Value to set the parameter to. */
                value: string | number | boolean;
                /** @description Name to identify the parameter by in the system. */
                name: string;
            }[];
        };
        /**
         * Hyper parameter group
         * @description The new values for the parameters in the hyper parameter group to set
         */
        hyper_parameter_group: {
            /** Hyper parameter group entity identifier */
            entity_identifier: {
                workspace_id?: string;
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                model_storage_id: string;
                /** @description The name of the hyper parameter group */
                group_name: string;
                /**
                 * @description Describes the type of the component. For hyper parameter groups, type is always set to HYPER_PARAMETER_GROUP
                 * @enum {string}
                 */
                type: 'HYPER_PARAMETER_GROUP';
            };
            groups?: {
                /** @description Name of the parameter group */
                name: string;
                /** @description Array of parameters */
                parameters: {
                    /** @description Value to set the parameter to. */
                    value: string | number | boolean;
                    /** @description Name to identify the parameter by in the system. */
                    name: string;
                }[];
            }[];
            parameters?: {
                /** @description Value to set the parameter to. */
                value: string | number | boolean;
                /** @description Name to identify the parameter by in the system. */
                name: string;
            }[];
        };
        /** @description Hyper parameters for the model to be trained */
        hyper_parameters: {
            /** @description Array of hyper parameter groups */
            components: {
                /** Hyper parameter group entity identifier */
                entity_identifier: {
                    workspace_id?: string;
                    /**
                     * @description Mongo ID of the object
                     * @example 60d31793d5f1fb7e6e3c1a4c
                     */
                    model_storage_id: string;
                    /** @description The name of the hyper parameter group */
                    group_name: string;
                    /**
                     * @description Describes the type of the component. For hyper parameter groups, type is always set to HYPER_PARAMETER_GROUP
                     * @enum {string}
                     */
                    type: 'HYPER_PARAMETER_GROUP';
                };
                groups?: {
                    /** @description Name of the parameter group */
                    name: string;
                    /** @description Array of parameters */
                    parameters: {
                        /** @description Value to set the parameter to. */
                        value: string | number | boolean;
                        /** @description Name to identify the parameter by in the system. */
                        name: string;
                    }[];
                }[];
                parameters?: {
                    /** @description Value to set the parameter to. */
                    value: string | number | boolean;
                    /** @description Name to identify the parameter by in the system. */
                    name: string;
                }[];
            }[];
        };
        train_request: {
            /** @description The ID of the model architecture to be trained. This can be obtained from the [supported algorithms endpoint](#Projects/GetSupportedAlgorithms). */
            model_template_id?: string;
            /** @description The ID of the task to train. For task-chain projects, this is a required parameter.
             *     The task ID can be found in the response body of the [project detail](#Projects/GetProjectInfo) endpoint. */
            task_id?: string;
            /** @description Set to `true` to train the model from scratch (i.e., not finetuning from previous version). */
            train_from_scratch?: boolean;
            /** @description Set to `true` to reset the train, test and validation subsets (Only valid when `train_from_scratch` is set to `true`). */
            reshuffle_subsets?: boolean;
            /** @description Defines the maximum dataset size for training. If no value is provided, the whole dataset is used. */
            max_training_dataset_size?: number;
            /**
             * @deprecated
             * @description Boolean that indicates whether to run hyper-parameter optimization (HPO) before training.
             *     This field is deprecated and should not be used, it will be removed in the future.
             */
            enable_hyper_parameter_optimization?: boolean;
            /**
             * @deprecated
             * @description These parameters control the automatic hyper parameter optimization process, if it is enabled. If `enable_hyper_parameter_optimization` is set to `true`, the hpo_parameters in this field must be specified. Otherwise, this field can be left empty.
             *
             */
            hpo_parameters?: {
                /**
                 * Format: float
                 * @description This parameter controls the time allotted for automatic hyper parameter optimization. It is measured in multiples of training time, e.g. setting `hpo_time_ratio` to `4.0` will result in the hpo process taking approximately 4 times as long as a normal training without hpo would.
                 *
                 */
                hpo_time_ratio?: number;
            };
            /** @description Hyper parameters for the model to be trained */
            hyper_parameters?: {
                /** @description Array of hyper parameter groups */
                components: {
                    /** Hyper parameter group entity identifier */
                    entity_identifier: {
                        workspace_id?: string;
                        /**
                         * @description Mongo ID of the object
                         * @example 60d31793d5f1fb7e6e3c1a4c
                         */
                        model_storage_id: string;
                        /** @description The name of the hyper parameter group */
                        group_name: string;
                        /**
                         * @description Describes the type of the component. For hyper parameter groups, type is always set to HYPER_PARAMETER_GROUP
                         * @enum {string}
                         */
                        type: 'HYPER_PARAMETER_GROUP';
                    };
                    groups?: {
                        /** @description Name of the parameter group */
                        name: string;
                        /** @description Array of parameters */
                        parameters: {
                            /** @description Value to set the parameter to. */
                            value: string | number | boolean;
                            /** @description Name to identify the parameter by in the system. */
                            name: string;
                        }[];
                    }[];
                    parameters?: {
                        /** @description Value to set the parameter to. */
                        value: string | number | boolean;
                        /** @description Name to identify the parameter by in the system. */
                        name: string;
                    }[];
                }[];
            };
        };
        job_id: {
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            job_id?: string;
        };
        model_performance: {
            /**
             * Format: float
             * @description Accuracy score for the model. Only applicable for non-anomaly projects.
             */
            score?: number | null;
        };
        /** @description Purging state of the model. A model is purged when all its binary files are removed from the server.
         *     This is performed through the [purge model](#Models/ArchiveModel) endpoint. */
        model_purge_info: {
            /** @description Boolean indicating if the model is purged. */
            is_purged?: boolean;
            /** @description The user ID who requested the cancellation. */
            user_uid?: string | null;
            /**
             * Format: date-time
             * @description The time when the model was purged.
             */
            purge_time?: string | null;
        };
        /**
         * @description The current support status of the model format. 'Active' models are fully supported and maintained.
         *     'Obsolete' ones can be used for inference and deployment, but they can no longer be optimized.
         *     In addition, training with an 'obsolete' happens from scratch rather than incrementally.
         * @enum {string}
         */
        model_lifecycle_stage: 'active' | 'obsolete';
        model: {
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            id?: string;
            /** @description Name of the model. */
            name?: string;
            /** @description Creation date of the model. */
            creation_date?: string;
            /**
             * Format: int32
             * @description Model size in bytes.
             */
            size?: number;
            /**
             * Format: int32
             * @description The aggregated size (bytes) for model-related files. This includes all the exportable binaries, such as exportable code,
             *     and the binaries from the optimized models.
             */
            total_disk_size?: number;
            performance?: {
                /**
                 * Format: float
                 * @description Accuracy score for the model. Only applicable for non-anomaly projects.
                 */
                score?: number | null;
            };
            /** @description Boolean that indicates whether the label schema for the model is in sync with the latest label schema for the task containing the model */
            label_schema_in_sync?: boolean;
            /**
             * @deprecated
             * @description Boolean indicating whether the score of the model is the most recent score.
             *     This parameter is deprecated and should not be used, it will be removed in the future.
             */
            score_up_to_date?: boolean;
            /** @description ID of the model storage */
            model_storage_id?: string;
            /** @description Boolean indicating that the model is used for inference requests for the project. */
            active_model?: boolean;
            /** @description Version of the model */
            version?: number;
            /** @description Purging state of the model. A model is purged when all its binary files are removed from the server.
             *     This is performed through the [purge model](#Models/ArchiveModel) endpoint. */
            purge_info?: {
                /** @description Boolean indicating if the model is purged. */
                is_purged?: boolean;
                /** @description The user ID who requested the cancellation. */
                user_uid?: string | null;
                /**
                 * Format: date-time
                 * @description The time when the model was purged.
                 */
                purge_time?: string | null;
            };
            /**
             * @description The current support status of the model format. 'Active' models are fully supported and maintained.
             *     'Obsolete' ones can be used for inference and deployment, but they can no longer be optimized.
             *     In addition, training with an 'obsolete' happens from scratch rather than incrementally.
             * @enum {string}
             */
            lifecycle_stage?: 'active' | 'obsolete';
        };
        /**
         * @description The learning approach from which the model is generated.
         *
         *     `fully_supervised` is for models that are trained through training job; while `one_shot` models are not. For example, `one_shot`
         *     is used for visual prompt models.
         * @enum {string}
         */
        learning_approach: 'fully_supervised' | 'one_shot';
        model_group: {
            /** @description Array of models. The models at this level represent the successfully trained models. Note that these are not
             *     the (OpenVINO or ONNX) optimized models;
             *     the list of optimized models can be found through the [model detail](#Models/GetModelDetail) endpoint.   */
            models?: {
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                id?: string;
                /** @description Name of the model. */
                name?: string;
                /** @description Creation date of the model. */
                creation_date?: string;
                /**
                 * Format: int32
                 * @description Model size in bytes.
                 */
                size?: number;
                /**
                 * Format: int32
                 * @description The aggregated size (bytes) for model-related files. This includes all the exportable binaries, such as exportable code,
                 *     and the binaries from the optimized models.
                 */
                total_disk_size?: number;
                performance?: {
                    /**
                     * Format: float
                     * @description Accuracy score for the model. Only applicable for non-anomaly projects.
                     */
                    score?: number | null;
                };
                /** @description Boolean that indicates whether the label schema for the model is in sync with the latest label schema for the task containing the model */
                label_schema_in_sync?: boolean;
                /**
                 * @deprecated
                 * @description Boolean indicating whether the score of the model is the most recent score.
                 *     This parameter is deprecated and should not be used, it will be removed in the future.
                 */
                score_up_to_date?: boolean;
                /** @description ID of the model storage */
                model_storage_id?: string;
                /** @description Boolean indicating that the model is used for inference requests for the project. */
                active_model?: boolean;
                /** @description Version of the model */
                version?: number;
                /** @description Purging state of the model. A model is purged when all its binary files are removed from the server.
                 *     This is performed through the [purge model](#Models/ArchiveModel) endpoint. */
                purge_info?: {
                    /** @description Boolean indicating if the model is purged. */
                    is_purged?: boolean;
                    /** @description The user ID who requested the cancellation. */
                    user_uid?: string | null;
                    /**
                     * Format: date-time
                     * @description The time when the model was purged.
                     */
                    purge_time?: string | null;
                };
                /**
                 * @description The current support status of the model format. 'Active' models are fully supported and maintained.
                 *     'Obsolete' ones can be used for inference and deployment, but they can no longer be optimized.
                 *     In addition, training with an 'obsolete' happens from scratch rather than incrementally.
                 * @enum {string}
                 */
                lifecycle_stage?: 'active' | 'obsolete';
            }[];
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            task_id?: string;
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            id?: string;
            /** @description Name of the model group, typically the name of the architecture. */
            name?: string;
            /** @description The ID of the model architecture. */
            model_template_id?: string;
            /**
             * @description The learning approach from which the model is generated.
             *
             *     `fully_supervised` is for models that are trained through training job; while `one_shot` models are not. For example, `one_shot`
             *     is used for visual prompt models.
             * @enum {string}
             */
            learning_approach?: 'fully_supervised' | 'one_shot';
            /**
             * @description The current support status of the model architecture. 'Active' algorithms are fully supported and maintained.
             *     'Deprecated' ones are still supported, but not recommended for training; in a later version, they may be
             *     discontinued and become 'obsolete', which means that new models cannot be trained with such algorithms.
             * @enum {string}
             */
            lifecycle_stage?: 'active' | 'deprecated' | 'obsolete';
        };
        model_group_list: {
            /** @description Array of model groups */
            model_groups?: {
                /** @description Array of models. The models at this level represent the successfully trained models. Note that these are not
                 *     the (OpenVINO or ONNX) optimized models;
                 *     the list of optimized models can be found through the [model detail](#Models/GetModelDetail) endpoint.   */
                models?: {
                    /**
                     * @description Mongo ID of the object
                     * @example 60d31793d5f1fb7e6e3c1a4c
                     */
                    id?: string;
                    /** @description Name of the model. */
                    name?: string;
                    /** @description Creation date of the model. */
                    creation_date?: string;
                    /**
                     * Format: int32
                     * @description Model size in bytes.
                     */
                    size?: number;
                    /**
                     * Format: int32
                     * @description The aggregated size (bytes) for model-related files. This includes all the exportable binaries, such as exportable code,
                     *     and the binaries from the optimized models.
                     */
                    total_disk_size?: number;
                    performance?: {
                        /**
                         * Format: float
                         * @description Accuracy score for the model. Only applicable for non-anomaly projects.
                         */
                        score?: number | null;
                    };
                    /** @description Boolean that indicates whether the label schema for the model is in sync with the latest label schema for the task containing the model */
                    label_schema_in_sync?: boolean;
                    /**
                     * @deprecated
                     * @description Boolean indicating whether the score of the model is the most recent score.
                     *     This parameter is deprecated and should not be used, it will be removed in the future.
                     */
                    score_up_to_date?: boolean;
                    /** @description ID of the model storage */
                    model_storage_id?: string;
                    /** @description Boolean indicating that the model is used for inference requests for the project. */
                    active_model?: boolean;
                    /** @description Version of the model */
                    version?: number;
                    /** @description Purging state of the model. A model is purged when all its binary files are removed from the server.
                     *     This is performed through the [purge model](#Models/ArchiveModel) endpoint. */
                    purge_info?: {
                        /** @description Boolean indicating if the model is purged. */
                        is_purged?: boolean;
                        /** @description The user ID who requested the cancellation. */
                        user_uid?: string | null;
                        /**
                         * Format: date-time
                         * @description The time when the model was purged.
                         */
                        purge_time?: string | null;
                    };
                    /**
                     * @description The current support status of the model format. 'Active' models are fully supported and maintained.
                     *     'Obsolete' ones can be used for inference and deployment, but they can no longer be optimized.
                     *     In addition, training with an 'obsolete' happens from scratch rather than incrementally.
                     * @enum {string}
                     */
                    lifecycle_stage?: 'active' | 'obsolete';
                }[];
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                task_id?: string;
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                id?: string;
                /** @description Name of the model group, typically the name of the architecture. */
                name?: string;
                /** @description The ID of the model architecture. */
                model_template_id?: string;
                /**
                 * @description The learning approach from which the model is generated.
                 *
                 *     `fully_supervised` is for models that are trained through training job; while `one_shot` models are not. For example, `one_shot`
                 *     is used for visual prompt models.
                 * @enum {string}
                 */
                learning_approach?: 'fully_supervised' | 'one_shot';
                /**
                 * @description The current support status of the model architecture. 'Active' algorithms are fully supported and maintained.
                 *     'Deprecated' ones are still supported, but not recommended for training; in a later version, they may be
                 *     discontinued and become 'obsolete', which means that new models cannot be trained with such algorithms.
                 * @enum {string}
                 */
                lifecycle_stage?: 'active' | 'deprecated' | 'obsolete';
            }[];
        };
        optimized_model: {
            /** @description ID of the optimized model */
            id?: string;
            /**
             * Format: int32
             * @description Model size in bytes
             */
            size?: number;
            /**
             * Format: int32
             * @deprecated
             * @description FPS throughput of the optimized model.
             *     This parameter is deprecated and should not be used, it will be removed in the future.
             */
            fps_throughput?: number;
            /**
             * Format: int32
             * @deprecated
             * @description Latency for the optimized model, in ms.
             *     This parameter is deprecated and should not be used, it will be removed in the future.
             */
            latency?: number;
            optimization_levels?: Record<string, never>;
            /** @description Array of optimization methods */
            optimization_methods?: string[];
            /** @description Optimization type of the model */
            optimization_type?: string;
            /** @description Precision of the model */
            precision?: string[];
            /** @description Whether the model also outputs eXplainable AI artifacts, e.g. saliency maps. */
            has_xai_head?: boolean;
            /**
             * @description Format of the model
             * @enum {string}
             */
            model_format?: 'OpenVINO' | 'ONNX';
            /** @description Version of the model */
            version?: number;
            /** @description ID of the prevoius model */
            previous_revision_id?: string;
            /** @description ID of the previous trained model */
            previous_trained_revision_id?: string;
            performance?: {
                /**
                 * Format: float
                 * @description Accuracy score for the model. Only applicable for non-anomaly projects.
                 */
                score?: number | null;
            };
            /**
             * @deprecated
             * @description Type of device the model is best used on.
             *     This parameter is deprecated and should not be used, it will be removed in the future.
             */
            target_device?: string;
            /**
             * @deprecated
             * @description Detailed type of device the model is best used on.
             *     This parameter is deprecated and should not be used, it will be removed in the future.
             */
            target_device_type?: string;
            /** @description Name of the model */
            name?: string;
            /**
             * @description Status of the model
             * @enum {string}
             */
            model_status?:
                | 'NOT_READY'
                | 'WEIGHTS_INITIALIZED'
                | 'SUCCESS'
                | 'FAILED'
                | 'NOT_IMPROVED';
            /** @description Array of additional configuration parameters */
            configurations?: {
                /** @description name of the configuration parameter */
                name?: string;
                /** @description value of the configuration parameter */
                value?: unknown;
            }[];
            /**
             * @description The current support status of the model format. 'Active' models are fully supported and maintained.
             *     'Obsolete' ones can be used for inference and deployment, but they can no longer be optimized.
             *     In addition, training with an 'obsolete' happens from scratch rather than incrementally.
             * @enum {string}
             */
            lifecycle_stage?: 'active' | 'obsolete';
        };
        /** @description Information about the framework used to train the model */
        training_framework: {
            /**
             * @description Type of the training framework
             * @enum {string}
             */
            type?: 'otx' | 'third_party';
            /** @description Version of the training framework */
            version?: string;
        };
        model_detail: {
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            id?: string;
            /** @description Network architecture of the model */
            architecture?: string;
            /** @description Name of the model */
            name?: string;
            /** @description Creation date of the model */
            creation_date?: string;
            /**
             * Format: int32
             * @description Model size in bytes
             */
            size?: number;
            /**
             * Format: int32
             * @description The aggregated size (bytes) for model-related files. This includes all the exportable binaries, such as exportable code,
             *     and the binaries from the optimized models.
             */
            total_disk_size?: number;
            performance?: {
                /**
                 * Format: float
                 * @description Accuracy score for the model. Only applicable for non-anomaly projects.
                 */
                score?: number | null;
            };
            /** @description Boolean that indicates whether the label schema for the model is in sync with the latest label schema for the task containing the model */
            label_schema_in_sync?: boolean;
            /**
             * @deprecated
             * @description Boolean that indicates whether the score of the model is the most recent score.
             *     This parameter is deprecated and should not be used, it will be removed in the future.
             */
            score_up_to_date?: boolean;
            /**
             * Format: int32
             * @deprecated
             * @description FPS throughput for the model.
             *     This parameter is deprecated and should not be used, it will be removed in the future.
             */
            fps_throughput?: number;
            /**
             * Format: int32
             * @deprecated
             * @description Latency for the model, in ms.
             *     This parameter is deprecated and should not be used, it will be removed in the future.
             */
            latency?: number;
            precision?: string[];
            /**
             * @deprecated
             * @description Type of device the model is best used on.
             *     This parameter is deprecated and should not be used, it will be removed in the future.
             */
            target_device?: string;
            /**
             * @deprecated
             * @description Detailed type of device the model is best used on.
             *     This parameter is deprecated and should not be used, it will be removed in the future.
             */
            target_device_type?: string;
            /** @description Version of the model */
            version?: number;
            /** @description ID of the previous model */
            previous_revision_id?: string;
            /** @description ID of the previous trained model */
            previous_trained_revision_id?: string;
            /** @description Array of optimized models */
            optimized_models?: {
                /** @description ID of the optimized model */
                id?: string;
                /**
                 * Format: int32
                 * @description Model size in bytes
                 */
                size?: number;
                /**
                 * Format: int32
                 * @deprecated
                 * @description FPS throughput of the optimized model.
                 *     This parameter is deprecated and should not be used, it will be removed in the future.
                 */
                fps_throughput?: number;
                /**
                 * Format: int32
                 * @deprecated
                 * @description Latency for the optimized model, in ms.
                 *     This parameter is deprecated and should not be used, it will be removed in the future.
                 */
                latency?: number;
                optimization_levels?: Record<string, never>;
                /** @description Array of optimization methods */
                optimization_methods?: string[];
                /** @description Optimization type of the model */
                optimization_type?: string;
                /** @description Precision of the model */
                precision?: string[];
                /** @description Whether the model also outputs eXplainable AI artifacts, e.g. saliency maps. */
                has_xai_head?: boolean;
                /**
                 * @description Format of the model
                 * @enum {string}
                 */
                model_format?: 'OpenVINO' | 'ONNX';
                /** @description Version of the model */
                version?: number;
                /** @description ID of the prevoius model */
                previous_revision_id?: string;
                /** @description ID of the previous trained model */
                previous_trained_revision_id?: string;
                performance?: {
                    /**
                     * Format: float
                     * @description Accuracy score for the model. Only applicable for non-anomaly projects.
                     */
                    score?: number | null;
                };
                /**
                 * @deprecated
                 * @description Type of device the model is best used on.
                 *     This parameter is deprecated and should not be used, it will be removed in the future.
                 */
                target_device?: string;
                /**
                 * @deprecated
                 * @description Detailed type of device the model is best used on.
                 *     This parameter is deprecated and should not be used, it will be removed in the future.
                 */
                target_device_type?: string;
                /** @description Name of the model */
                name?: string;
                /**
                 * @description Status of the model
                 * @enum {string}
                 */
                model_status?:
                    | 'NOT_READY'
                    | 'WEIGHTS_INITIALIZED'
                    | 'SUCCESS'
                    | 'FAILED'
                    | 'NOT_IMPROVED';
                /** @description Array of additional configuration parameters */
                configurations?: {
                    /** @description name of the configuration parameter */
                    name?: string;
                    /** @description value of the configuration parameter */
                    value?: unknown;
                }[];
                /**
                 * @description The current support status of the model format. 'Active' models are fully supported and maintained.
                 *     'Obsolete' ones can be used for inference and deployment, but they can no longer be optimized.
                 *     In addition, training with an 'obsolete' happens from scratch rather than incrementally.
                 * @enum {string}
                 */
                lifecycle_stage?: 'active' | 'obsolete';
            }[];
            /** @description Array of labels */
            labels?: {
                /** @description Label name, must be unique */
                name: string;
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                id: string;
                /** @description Label color, picked at random if not specified */
                color: string;
                /** @description Name of label group */
                group: string;
                /** @description Name of parent label */
                parent_id: string | null;
                /** @description Indicates whether the label is an empty label */
                is_empty: boolean;
                /** @description Indicates whether the label is anomalous or not */
                is_anomalous: boolean;
                /** @description Indicates whether the label is deleted */
                is_deleted?: boolean;
                /** @description Key or combination of key to select this label. Can be empty (no key). */
                hotkey: string;
            }[];
            training_dataset_info?: {
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                dataset_storage_id?: string;
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                dataset_revision_id?: string;
                /**
                 * Format: int32
                 * @description The number of items in the training dataset. Note that for the second task in a task chain, this could be more than
                 *     `n_images + n_frames` because each bounding box of the first task corresponds to one dataset item of the second task.
                 */
                n_samples?: number;
                /**
                 * Format: int32
                 * @description The number of distinct images in the dataset
                 */
                n_images?: number;
                /**
                 * Format: int32
                 * @description The number of distinct video frames in the dataset
                 */
                n_frames?: number;
            };
            /** @description Information about the framework used to train the model */
            training_framework?: {
                /**
                 * @description Type of the training framework
                 * @enum {string}
                 */
                type?: 'otx' | 'third_party';
                /** @description Version of the training framework */
                version?: string;
            };
            /** @description Purging state of the model. A model is purged when all its binary files are removed from the server.
             *     This is performed through the [purge model](#Models/ArchiveModel) endpoint. */
            purge_info?: {
                /** @description Boolean indicating if the model is purged. */
                is_purged?: boolean;
                /** @description The user ID who requested the cancellation. */
                user_uid?: string | null;
                /**
                 * Format: date-time
                 * @description The time when the model was purged.
                 */
                purge_time?: string | null;
            };
            /**
             * @description The learning approach from which the model is generated.
             *
             *     `fully_supervised` is for models that are trained through training job; while `one_shot` models are not. For example, `one_shot`
             *     is used for visual prompt models.
             * @enum {string}
             */
            learning_approach?: 'fully_supervised' | 'one_shot';
            /**
             * @description The current support status of the model format. 'Active' models are fully supported and maintained.
             *     'Obsolete' ones can be used for inference and deployment, but they can no longer be optimized.
             *     In addition, training with an 'obsolete' happens from scratch rather than incrementally.
             * @enum {string}
             */
            lifecycle_stage?: 'active' | 'obsolete';
        };
        /** @description Text chart, containing string or number to display */
        text_chart: string | number;
        /** @description Bar (also for radial bar) chart, depicted by an array containing values describing the bars in the chart. */
        bar_chart: {
            /** @description Name of the bar */
            header?: string;
            /** @description Unique key for the bar */
            key?: string;
            /** @description Value for the bar */
            value?: number;
            /** @description Color of the bar in hex format */
            color?: string | null;
        }[];
        /** @description Line chart, containing description of the chart and the lines coordinates. */
        line_chart: {
            /** @description Label of the x-axis for the line chart */
            x_axis_label: string;
            /** @description Label of the y-axis for the line chart */
            y_axis_label: string;
            /** @description Color of the bar in hex format */
            color?: string | null;
            /** @description Array of line data, each containing the information for one line. */
            line_data: {
                /** @description List of coordinates of the points in the line chart */
                points?: {
                    /** @description X coordinate of the point */
                    x?: number;
                    /** @description Y coordinate of the point */
                    y?: number;
                }[];
            }[];
        };
        /** @description Matrix chart, containing multiple matrices. Typically used for confusion matrices in classification projects. */
        matrix_chart: {
            /** @description The header for all the rows in the matrix */
            row_header: string;
            /** @description The header for all the columns in the matrix */
            column_header: string;
            /** @description Array of matrices */
            matrix_data: {
                /** @description Array containing the names of the matrix rows */
                row_names?: string[];
                /** @description Array containing the names of the matrix columns */
                column_names?: string[];
                /** @description Array of matrix values */
                matrix_values?: number[][];
            }[];
        };
        model_statistics: {
            model_statistics?: {
                /** @description Header describing the chart */
                header?: string;
                /** @description Unique key for the chart */
                key?: string;
                /**
                 * @description Type of chart. Current implementation allows 'line', 'text', 'bar', 'radial_bar' and 'matrix'.
                 * @enum {string}
                 */
                type?: 'text' | 'line' | 'bar' | 'radial_bar' | 'matrix';
                value?:
                    | (string | number)
                    | {
                          /** @description Name of the bar */
                          header?: string;
                          /** @description Unique key for the bar */
                          key?: string;
                          /** @description Value for the bar */
                          value?: number;
                          /** @description Color of the bar in hex format */
                          color?: string | null;
                      }[]
                    | {
                          /** @description Label of the x-axis for the line chart */
                          x_axis_label: string;
                          /** @description Label of the y-axis for the line chart */
                          y_axis_label: string;
                          /** @description Color of the bar in hex format */
                          color?: string | null;
                          /** @description Array of line data, each containing the information for one line. */
                          line_data: {
                              /** @description List of coordinates of the points in the line chart */
                              points?: {
                                  /** @description X coordinate of the point */
                                  x?: number;
                                  /** @description Y coordinate of the point */
                                  y?: number;
                              }[];
                          }[];
                      }
                    | {
                          /** @description The header for all the rows in the matrix */
                          row_header: string;
                          /** @description The header for all the columns in the matrix */
                          column_header: string;
                          /** @description Array of matrices */
                          matrix_data: {
                              /** @description Array containing the names of the matrix rows */
                              row_names?: string[];
                              /** @description Array containing the names of the matrix columns */
                              column_names?: string[];
                              /** @description Array of matrix values */
                              matrix_values?: number[][];
                          }[];
                      };
            }[];
        };
        /** @description Request to optimize a model */
        optimization_request: {
            /** @description This field is deprecated and ignored by the server. */
            enable_nncf_optimization?: boolean;
            /** @description This field is deprecated and ignored by the server. */
            enable_pot_optimization?: boolean;
            /** @description This field is deprecated and ignored by the server. */
            optimization_parameters?: Record<string, never>;
        };
        /** @description Identifier for an image which already exists on the system. */
        image_identifier: {
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            dataset_id?: string;
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            image_id?: string;
        };
        /** @description Identifier for a single video frame. */
        video_frame_identifier: {
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            dataset_id?: string;
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            video_id?: string;
            /** @description This is a 0-based index, meaning to retrieve the first frame of the video, this parameter should be set to `0`.
             *     The possible values for this parameter range from `0` to `frame_count-1`. The `frame_count` is the total number of frames contained in the video
             *     and it can be retrieved from the response body of [video detail](#Media/GetVideoDetail) endpoint.  */
            frame_index: number;
        };
        prediction_label: {
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            id?: string;
            /**
             * Probability
             * Format: float
             * @description Estimated probability of a prediction. For annotations, this is set to 1.
             */
            probability?: number;
        };
        prediction: {
            shape?:
                | {
                      /**
                       * @description Type of the shape.
                       * @enum {string}
                       */
                      type: 'RECTANGLE';
                      /** @description x-coordinate of the left side of the rectangle. Coordinates are pixel values. */
                      x: number;
                      /** @description y-coordinate of the top of the rectangle. Coordinates are pixel values. */
                      y: number;
                      /** @description Width of the rectangle. Coordinates are pixel values. */
                      width: number;
                      /** @description Height of the rectangle. Coordinates are pixel values. */
                      height: number;
                  }
                | {
                      /**
                       * @description Type of the shape.
                       * @enum {string}
                       */
                      type: 'POLYGON';
                      /** @description Array of points that define the polygon. */
                      points: {
                          /** @description x-coordinate of the point. Coordinates are pixel values. */
                          x: number;
                          /** @description y-coordinate of the point. Coordinates are pixel values. */
                          y: number;
                      }[];
                  }
                | {
                      /**
                       * @description Type of the shape.
                       * @enum {string}
                       */
                      type: 'ELLIPSE';
                      /** @description Lowest x-coordinate of the ellipse. Coordinates are pixel values. */
                      x: number;
                      /** @description Lowest y-coordinate of the ellipse. Coordinates are pixel values. */
                      y: number;
                      /** @description Width of the ellipse. Coordinates are pixel values. */
                      width: number;
                      /** @description Height of the ellipse. Coordinates are pixel values. */
                      height: number;
                  }
                | {
                      /**
                       * @description Type of the shape.
                       * @enum {string}
                       */
                      type: 'ROTATED_RECTANGLE';
                      /** @description Center x-coordinate of the rotated rectangle. Coordinates are pixel values. */
                      x: number;
                      /** @description Center y-coordinate of the rotated rectangle. Coordinates are pixel values. */
                      y: number;
                      /** @description Width of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values. */
                      width: number;
                      /** @description Height of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values. */
                      height: number;
                      /** @description Clockwise angle in degrees for the rectangle. */
                      angle: number;
                  }
                | {
                      /**
                       * @description Type of the shape.
                       * @enum {string}
                       */
                      type: 'KEYPOINT';
                      /** @description X-coordinate of the keypoint. Coordinates are pixel values. */
                      x: number;
                      /** @description Y-coordinate of the keypoint. Coordinates are pixel values. */
                      y: number;
                      /** @description Indicates whether the feature the keypoint is describing is visible in the image. */
                      is_visible: boolean;
                  };
            /** @description List of labels */
            labels?: {
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                id?: string;
                /**
                 * Probability
                 * Format: float
                 * @description Estimated probability of a prediction. For annotations, this is set to 1.
                 */
                probability?: number;
            }[];
        };
        'image_identifier-2': {
            /** @enum {string} */
            type?: 'image';
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            image_id?: string;
        };
        'video_frame_identifier-2': {
            /** @enum {string} */
            type?: 'video_frame';
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            video_id?: string;
            frame_index?: number;
        };
        single_prediction: {
            /** @description List of predictions */
            predictions?: {
                shape?:
                    | {
                          /**
                           * @description Type of the shape.
                           * @enum {string}
                           */
                          type: 'RECTANGLE';
                          /** @description x-coordinate of the left side of the rectangle. Coordinates are pixel values. */
                          x: number;
                          /** @description y-coordinate of the top of the rectangle. Coordinates are pixel values. */
                          y: number;
                          /** @description Width of the rectangle. Coordinates are pixel values. */
                          width: number;
                          /** @description Height of the rectangle. Coordinates are pixel values. */
                          height: number;
                      }
                    | {
                          /**
                           * @description Type of the shape.
                           * @enum {string}
                           */
                          type: 'POLYGON';
                          /** @description Array of points that define the polygon. */
                          points: {
                              /** @description x-coordinate of the point. Coordinates are pixel values. */
                              x: number;
                              /** @description y-coordinate of the point. Coordinates are pixel values. */
                              y: number;
                          }[];
                      }
                    | {
                          /**
                           * @description Type of the shape.
                           * @enum {string}
                           */
                          type: 'ELLIPSE';
                          /** @description Lowest x-coordinate of the ellipse. Coordinates are pixel values. */
                          x: number;
                          /** @description Lowest y-coordinate of the ellipse. Coordinates are pixel values. */
                          y: number;
                          /** @description Width of the ellipse. Coordinates are pixel values. */
                          width: number;
                          /** @description Height of the ellipse. Coordinates are pixel values. */
                          height: number;
                      }
                    | {
                          /**
                           * @description Type of the shape.
                           * @enum {string}
                           */
                          type: 'ROTATED_RECTANGLE';
                          /** @description Center x-coordinate of the rotated rectangle. Coordinates are pixel values. */
                          x: number;
                          /** @description Center y-coordinate of the rotated rectangle. Coordinates are pixel values. */
                          y: number;
                          /** @description Width of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values. */
                          width: number;
                          /** @description Height of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values. */
                          height: number;
                          /** @description Clockwise angle in degrees for the rectangle. */
                          angle: number;
                      }
                    | {
                          /**
                           * @description Type of the shape.
                           * @enum {string}
                           */
                          type: 'KEYPOINT';
                          /** @description X-coordinate of the keypoint. Coordinates are pixel values. */
                          x: number;
                          /** @description Y-coordinate of the keypoint. Coordinates are pixel values. */
                          y: number;
                          /** @description Indicates whether the feature the keypoint is describing is visible in the image. */
                          is_visible: boolean;
                      };
                /** @description List of labels */
                labels?: {
                    /**
                     * @description Mongo ID of the object
                     * @example 60d31793d5f1fb7e6e3c1a4c
                     */
                    id?: string;
                    /**
                     * Probability
                     * Format: float
                     * @description Estimated probability of a prediction. For annotations, this is set to 1.
                     */
                    probability?: number;
                }[];
            }[];
            /** @description Creation date */
            created?: string;
            /** @description Optional identifier for the media item on which the prediction was made. Only included for persistent media. */
            media_identifier?:
                | {
                      /** @enum {string} */
                      type?: 'image';
                      /**
                       * @description Mongo ID of the object
                       * @example 60d31793d5f1fb7e6e3c1a4c
                       */
                      image_id?: string;
                  }
                | {
                      /** @enum {string} */
                      type?: 'video_frame';
                      /**
                       * @description Mongo ID of the object
                       * @example 60d31793d5f1fb7e6e3c1a4c
                       */
                      video_id?: string;
                      frame_index?: number;
                  };
        };
        map: {
            /** @description Binary representation of the saliency map */
            data?: string;
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            label_id?: string;
        };
        single_explanation: {
            /** @description List of explanations (saliency maps) */
            maps?: {
                /** @description Binary representation of the saliency map */
                data?: string;
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                label_id?: string;
            }[];
            /** @description Creation date */
            created?: string;
            /** @description Optional identifier for the media item on which the prediction was made. Only included for persistent media. */
            media_identifier?:
                | {
                      /** @enum {string} */
                      type?: 'image';
                      /**
                       * @description Mongo ID of the object
                       * @example 60d31793d5f1fb7e6e3c1a4c
                       */
                      image_id?: string;
                  }
                | {
                      /** @enum {string} */
                      type?: 'video_frame';
                      /**
                       * @description Mongo ID of the object
                       * @example 60d31793d5f1fb7e6e3c1a4c
                       */
                      video_id?: string;
                      frame_index?: number;
                  };
        };
        /** @description Identifier for a range of video frames. */
        video_frame_range_identifier: {
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            dataset_id?: string;
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            video_id?: string;
            /**
             * @description Index of the first frame in the range.
             * @default 0
             */
            start_frame: number;
            /** @description Index of the last frame in the range. */
            end_frame: number;
            /** @description Stride (step size), that is the interval between two consecutive frames in the range.
             *     If `frame_skip` is 1, all frames are considered to be part of the range. */
            frame_skip: number;
        };
        batch_prediction: {
            /** @description List of predictions. Each entry corresponds to the prediction for a single media item in the batch. */
            batch_predictions?: {
                /** @description List of predictions */
                predictions?: {
                    shape?:
                        | {
                              /**
                               * @description Type of the shape.
                               * @enum {string}
                               */
                              type: 'RECTANGLE';
                              /** @description x-coordinate of the left side of the rectangle. Coordinates are pixel values. */
                              x: number;
                              /** @description y-coordinate of the top of the rectangle. Coordinates are pixel values. */
                              y: number;
                              /** @description Width of the rectangle. Coordinates are pixel values. */
                              width: number;
                              /** @description Height of the rectangle. Coordinates are pixel values. */
                              height: number;
                          }
                        | {
                              /**
                               * @description Type of the shape.
                               * @enum {string}
                               */
                              type: 'POLYGON';
                              /** @description Array of points that define the polygon. */
                              points: {
                                  /** @description x-coordinate of the point. Coordinates are pixel values. */
                                  x: number;
                                  /** @description y-coordinate of the point. Coordinates are pixel values. */
                                  y: number;
                              }[];
                          }
                        | {
                              /**
                               * @description Type of the shape.
                               * @enum {string}
                               */
                              type: 'ELLIPSE';
                              /** @description Lowest x-coordinate of the ellipse. Coordinates are pixel values. */
                              x: number;
                              /** @description Lowest y-coordinate of the ellipse. Coordinates are pixel values. */
                              y: number;
                              /** @description Width of the ellipse. Coordinates are pixel values. */
                              width: number;
                              /** @description Height of the ellipse. Coordinates are pixel values. */
                              height: number;
                          }
                        | {
                              /**
                               * @description Type of the shape.
                               * @enum {string}
                               */
                              type: 'ROTATED_RECTANGLE';
                              /** @description Center x-coordinate of the rotated rectangle. Coordinates are pixel values. */
                              x: number;
                              /** @description Center y-coordinate of the rotated rectangle. Coordinates are pixel values. */
                              y: number;
                              /** @description Width of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values. */
                              width: number;
                              /** @description Height of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values. */
                              height: number;
                              /** @description Clockwise angle in degrees for the rectangle. */
                              angle: number;
                          }
                        | {
                              /**
                               * @description Type of the shape.
                               * @enum {string}
                               */
                              type: 'KEYPOINT';
                              /** @description X-coordinate of the keypoint. Coordinates are pixel values. */
                              x: number;
                              /** @description Y-coordinate of the keypoint. Coordinates are pixel values. */
                              y: number;
                              /** @description Indicates whether the feature the keypoint is describing is visible in the image. */
                              is_visible: boolean;
                          };
                    /** @description List of labels */
                    labels?: {
                        /**
                         * @description Mongo ID of the object
                         * @example 60d31793d5f1fb7e6e3c1a4c
                         */
                        id?: string;
                        /**
                         * Probability
                         * Format: float
                         * @description Estimated probability of a prediction. For annotations, this is set to 1.
                         */
                        probability?: number;
                    }[];
                }[];
                /** @description Creation date */
                created?: string;
                /** @description Optional identifier for the media item on which the prediction was made. Only included for persistent media. */
                media_identifier?:
                    | {
                          /** @enum {string} */
                          type?: 'image';
                          /**
                           * @description Mongo ID of the object
                           * @example 60d31793d5f1fb7e6e3c1a4c
                           */
                          image_id?: string;
                      }
                    | {
                          /** @enum {string} */
                          type?: 'video_frame';
                          /**
                           * @description Mongo ID of the object
                           * @example 60d31793d5f1fb7e6e3c1a4c
                           */
                          video_id?: string;
                          frame_index?: number;
                      };
            }[];
        };
        batch_explanation: {
            /** @description List of explanations. Each entry corresponds to the explanations for a single media item in the batch. */
            explanations?: {
                /** @description List of explanations (saliency maps) */
                maps?: {
                    /** @description Binary representation of the saliency map */
                    data?: string;
                    /**
                     * @description Mongo ID of the object
                     * @example 60d31793d5f1fb7e6e3c1a4c
                     */
                    label_id?: string;
                }[];
                /** @description Creation date */
                created?: string;
                /** @description Optional identifier for the media item on which the prediction was made. Only included for persistent media. */
                media_identifier?:
                    | {
                          /** @enum {string} */
                          type?: 'image';
                          /**
                           * @description Mongo ID of the object
                           * @example 60d31793d5f1fb7e6e3c1a4c
                           */
                          image_id?: string;
                      }
                    | {
                          /** @enum {string} */
                          type?: 'video_frame';
                          /**
                           * @description Mongo ID of the object
                           * @example 60d31793d5f1fb7e6e3c1a4c
                           */
                          video_id?: string;
                          frame_index?: number;
                      };
            }[];
        };
        training_revision: {
            /**
             * Format: int32
             * @description Number of images in the dataset
             */
            id?: number;
            /** @description Creation time of the project */
            creation_time?: string;
            /** @description Number of items in each subset */
            subset_info?: {
                /**
                 * Format: int32
                 * @description Number of media in the training set
                 */
                training?: number;
                /**
                 * Format: int32
                 * @description Number of media in the testing set
                 */
                testing?: number;
                /**
                 * Format: int32
                 * @description Number of media in the validation set
                 */
                validation?: number;
            }[];
            /** @description Amount per media type in the dataset */
            dataset_info?: {
                /**
                 * Format: int32
                 * @description Number of videos in the dataset
                 */
                videos?: number;
                /**
                 * Format: int32
                 * @description Number of frames in the dataset
                 */
                frames?: number;
                /**
                 * Format: int32
                 * @description Number of images in the dataset
                 */
                images?: number;
            }[];
        };
        image_in_active_dataset: {
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            id?: string;
            media_information?: {
                /** @description Display URL of the image or video frame */
                display_url?: string;
                /** @description Height of the image or video frame */
                height?: number;
                /** @description Width of the image or video frame */
                width?: number;
                /** @description Size of the image or video in bytes */
                size?: number;
                /** @description Extension of the image or video in lowercase with a dot (e.g. '.jpg') */
                extension?: string;
            };
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            dataset_id?: string;
            /** @description Name of the image */
            name?: string;
            /** @description List of per-task states obtained aggregating the annotation state with the revisit information */
            annotation_state_per_task?: {
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                task_id?: string;
                /**
                 * @description Annotation state of the media for this task
                 * @enum {string|null}
                 */
                state?: 'annotated' | 'partially_annotated' | 'none' | 'to_revisit' | null;
            }[];
            /** @description Relative URL to the image thumbnail */
            thumbnail?: string;
            /**
             * @description Type of media. 'image' for images, 'video' for video.
             * @enum {string}
             */
            type?: 'image';
            /** @description Upload time of the media file */
            upload_time?: string;
        };
        video_in_active_dataset: {
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            id?: string;
            media_information?: {
                /** @description Display URL of the image or video */
                display_url?: string;
                /** @description Duration of the video */
                duration?: number;
                /** @description Number of frames in the video */
                frame_count?: number;
                /** @description Frame stride of the video */
                frame_stride?: number;
                /** @description Frame rate of the video */
                frame_rate?: number;
                /** @description Height of the video */
                height?: number;
                /** @description Width of the video */
                width?: number;
                /** @description Size of the video in bytes */
                size?: number;
            };
            /** @description List of video frame indices */
            active_frames?: number[];
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            dataset_id?: string;
            /** @description Name of the image */
            name?: string;
            /** @description List of per-task states obtained aggregating the annotation state with the revisit information */
            annotation_state_per_task?: {
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                task_id?: string;
                /**
                 * @description Annotation state of the media for this task
                 * @enum {string|null}
                 */
                state?: 'annotated' | 'partially_annotated' | 'none' | 'to_revisit' | null;
            }[];
            /** @description Relative URL to the image thumbnail */
            thumbnail?: string;
            /**
             * @description Type of media. 'image' for images, 'video' for video.
             * @enum {string}
             */
            type?: 'video';
            /** @description Upload time of the media file */
            upload_time?: string;
        };
        active_set: {
            /** @description List of media items */
            active_set?: (
                | {
                      /**
                       * @description Mongo ID of the object
                       * @example 60d31793d5f1fb7e6e3c1a4c
                       */
                      id?: string;
                      media_information?: {
                          /** @description Display URL of the image or video frame */
                          display_url?: string;
                          /** @description Height of the image or video frame */
                          height?: number;
                          /** @description Width of the image or video frame */
                          width?: number;
                          /** @description Size of the image or video in bytes */
                          size?: number;
                          /** @description Extension of the image or video in lowercase with a dot (e.g. '.jpg') */
                          extension?: string;
                      };
                      /**
                       * @description Mongo ID of the object
                       * @example 60d31793d5f1fb7e6e3c1a4c
                       */
                      dataset_id?: string;
                      /** @description Name of the image */
                      name?: string;
                      /** @description List of per-task states obtained aggregating the annotation state with the revisit information */
                      annotation_state_per_task?: {
                          /**
                           * @description Mongo ID of the object
                           * @example 60d31793d5f1fb7e6e3c1a4c
                           */
                          task_id?: string;
                          /**
                           * @description Annotation state of the media for this task
                           * @enum {string|null}
                           */
                          state?:
                              | 'annotated'
                              | 'partially_annotated'
                              | 'none'
                              | 'to_revisit'
                              | null;
                      }[];
                      /** @description Relative URL to the image thumbnail */
                      thumbnail?: string;
                      /**
                       * @description Type of media. 'image' for images, 'video' for video.
                       * @enum {string}
                       */
                      type?: 'image';
                      /** @description Upload time of the media file */
                      upload_time?: string;
                  }
                | {
                      /**
                       * @description Mongo ID of the object
                       * @example 60d31793d5f1fb7e6e3c1a4c
                       */
                      id?: string;
                      media_information?: {
                          /** @description Display URL of the image or video */
                          display_url?: string;
                          /** @description Duration of the video */
                          duration?: number;
                          /** @description Number of frames in the video */
                          frame_count?: number;
                          /** @description Frame stride of the video */
                          frame_stride?: number;
                          /** @description Frame rate of the video */
                          frame_rate?: number;
                          /** @description Height of the video */
                          height?: number;
                          /** @description Width of the video */
                          width?: number;
                          /** @description Size of the video in bytes */
                          size?: number;
                      };
                      /** @description List of video frame indices */
                      active_frames?: number[];
                      /**
                       * @description Mongo ID of the object
                       * @example 60d31793d5f1fb7e6e3c1a4c
                       */
                      dataset_id?: string;
                      /** @description Name of the image */
                      name?: string;
                      /** @description List of per-task states obtained aggregating the annotation state with the revisit information */
                      annotation_state_per_task?: {
                          /**
                           * @description Mongo ID of the object
                           * @example 60d31793d5f1fb7e6e3c1a4c
                           */
                          task_id?: string;
                          /**
                           * @description Annotation state of the media for this task
                           * @enum {string|null}
                           */
                          state?:
                              | 'annotated'
                              | 'partially_annotated'
                              | 'none'
                              | 'to_revisit'
                              | null;
                      }[];
                      /** @description Relative URL to the image thumbnail */
                      thumbnail?: string;
                      /**
                       * @description Type of media. 'image' for images, 'video' for video.
                       * @enum {string}
                       */
                      type?: 'video';
                      /** @description Upload time of the media file */
                      upload_time?: string;
                  }
            )[];
        };
        /** @description Info of job related to the model test result. This attribute is only present after job is created for the model test. */
        job_info: {
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            id?: string;
            /** @description Status of the testing operation; should be one of: [ PENDING, CREATING_DATASET, INFERRING, EVALUATING, DONE ] */
            status?: string;
        };
        /** @description Array of datasets */
        datasets_info: {
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            id?: string;
            /** @description boolean showing whether the dataset is deleted */
            is_deleted?: boolean;
            /** @description Name of the dataset */
            name?: string;
            /**
             * Format: int32
             * @description Number of images in the dataset
             */
            n_images?: number;
            /**
             * Format: int32
             * @description Number of frames in the dataset
             */
            n_frames?: number;
            /**
             * Format: int32
             * @description Number of samples in the dataset
             */
            n_samples?: number;
        }[];
        model_info: {
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            group_id?: string;
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            id?: string;
            /**
             * Format: int32
             * @description Number of labels model was trained with
             */
            n_labels?: number;
            /** @description Task type; should be one of: [ classification, detection, segmentation, crop, dataset ] */
            task_type?: string;
            /** @description Name of the model template for the model */
            template_id?: string;
            /** @description Optimization type of the model, one of [ NONE, MO, POT, NNCF ] */
            optimization_type?: string;
            /**
             * Format: int32
             * @description Version of the model
             */
            version?: number;
        };
        /** @description Array of scores */
        scores: {
            /** @description Name of the metric */
            name?: string;
            /**
             * Format: float
             * @description Value of the score
             */
            value?: number;
            /** @description ID of the label corresponding to the score. If  null, the score is for all labels */
            label_id?: string | null;
        }[];
        model_test_result: {
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            id: string;
            /** @description Test name */
            name: string;
            /** @description Creation time of the test */
            creation_time: string;
            /** @description Info of job related to the model test result. This attribute is only present after job is created for the model test. */
            job_info: {
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                id?: string;
                /** @description Status of the testing operation; should be one of: [ PENDING, CREATING_DATASET, INFERRING, EVALUATING, DONE ] */
                status?: string;
            };
            /** @description Array of datasets */
            datasets_info: {
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                id?: string;
                /** @description boolean showing whether the dataset is deleted */
                is_deleted?: boolean;
                /** @description Name of the dataset */
                name?: string;
                /**
                 * Format: int32
                 * @description Number of images in the dataset
                 */
                n_images?: number;
                /**
                 * Format: int32
                 * @description Number of frames in the dataset
                 */
                n_frames?: number;
                /**
                 * Format: int32
                 * @description Number of samples in the dataset
                 */
                n_samples?: number;
            }[];
            model_info: {
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                group_id?: string;
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                id?: string;
                /**
                 * Format: int32
                 * @description Number of labels model was trained with
                 */
                n_labels?: number;
                /** @description Task type; should be one of: [ classification, detection, segmentation, crop, dataset ] */
                task_type?: string;
                /** @description Name of the model template for the model */
                template_id?: string;
                /** @description Optimization type of the model, one of [ NONE, MO, POT, NNCF ] */
                optimization_type?: string;
                /**
                 * Format: int32
                 * @description Version of the model
                 */
                version?: number;
            };
            /** @description Array of scores */
            scores: {
                /** @description Name of the metric */
                name?: string;
                /**
                 * Format: float
                 * @description Value of the score
                 */
                value?: number;
                /** @description ID of the label corresponding to the score. If  null, the score is for all labels */
                label_id?: string | null;
            }[];
        };
        model_test_result_list: {
            /** @description Array of tests */
            test_results: {
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                id: string;
                /** @description Test name */
                name: string;
                /** @description Creation time of the test */
                creation_time: string;
                /** @description Info of job related to the model test result. This attribute is only present after job is created for the model test. */
                job_info: {
                    /**
                     * @description Mongo ID of the object
                     * @example 60d31793d5f1fb7e6e3c1a4c
                     */
                    id?: string;
                    /** @description Status of the testing operation; should be one of: [ PENDING, CREATING_DATASET, INFERRING, EVALUATING, DONE ] */
                    status?: string;
                };
                /** @description Array of datasets */
                datasets_info: {
                    /**
                     * @description Mongo ID of the object
                     * @example 60d31793d5f1fb7e6e3c1a4c
                     */
                    id?: string;
                    /** @description boolean showing whether the dataset is deleted */
                    is_deleted?: boolean;
                    /** @description Name of the dataset */
                    name?: string;
                    /**
                     * Format: int32
                     * @description Number of images in the dataset
                     */
                    n_images?: number;
                    /**
                     * Format: int32
                     * @description Number of frames in the dataset
                     */
                    n_frames?: number;
                    /**
                     * Format: int32
                     * @description Number of samples in the dataset
                     */
                    n_samples?: number;
                }[];
                model_info: {
                    /**
                     * @description Mongo ID of the object
                     * @example 60d31793d5f1fb7e6e3c1a4c
                     */
                    group_id?: string;
                    /**
                     * @description Mongo ID of the object
                     * @example 60d31793d5f1fb7e6e3c1a4c
                     */
                    id?: string;
                    /**
                     * Format: int32
                     * @description Number of labels model was trained with
                     */
                    n_labels?: number;
                    /** @description Task type; should be one of: [ classification, detection, segmentation, crop, dataset ] */
                    task_type?: string;
                    /** @description Name of the model template for the model */
                    template_id?: string;
                    /** @description Optimization type of the model, one of [ NONE, MO, POT, NNCF ] */
                    optimization_type?: string;
                    /**
                     * Format: int32
                     * @description Version of the model
                     */
                    version?: number;
                };
                /** @description Array of scores */
                scores: {
                    /** @description Name of the metric */
                    name?: string;
                    /**
                     * Format: float
                     * @description Value of the score
                     */
                    value?: number;
                    /** @description ID of the label corresponding to the score. If  null, the score is for all labels */
                    label_id?: string | null;
                }[];
            }[];
        };
        model_test_post: {
            /** @description Name of the test */
            name: string;
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            model_group_id: string;
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            model_id: string;
            /** @description Array of dataset ids */
            dataset_ids: string[];
            /**
             * @description Pick global to compute the media-level performance (e.g., accuracy), and pick local to compute localized metrics \
             *     (e.g., dice for segmentation and f-measure for detection). If no value is passed, we default to local metric.
             *
             * @enum {string}
             */
            metric?: 'global';
        };
        media_score_query: {
            /**
             * @description Connection between the rules of the query
             * @enum {string}
             */
            condition: 'and';
            /** @description list of rules used to filter test media results */
            rules: {
                field: string;
                operator: string;
                value: string | number | null;
            }[];
        };
        score: {
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            label_id?: string | null;
            /** @description The name of the metric of this score */
            name?: string;
            /** @description The score in percentage (0-100) */
            value?: number;
        };
        /** @description The media's test info */
        test_result: {
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            annotation_id?: string;
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            prediction_id?: string;
            scores?: {
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                label_id?: string | null;
                /** @description The name of the metric of this score */
                name?: string;
                /** @description The score in percentage (0-100) */
                value?: number;
            }[];
        };
        'filtered_image-2': {
            annotation_scene_id?: string | null;
            /** @description Annotation state per task of the image. */
            annotation_state_per_task?: {
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                task_id?: string;
                /**
                 * @description Overall state obtained aggregating the annotation states with the 'revisit' information on a per-task basis. This only has meaning for an  image/frame/scene, as a video does not have an annotation scene. - Image/VideoFrame/AnnotationScene: - to_revisit: Some annotations need to be revisited by the user for this task - annotated: All the ROIs for this task are annotated (contain a label for the task) - partially_annotated: Some ROIs for this task do not contain labels, other ones do - none: No label is present for this task - Video: - all tasks are set to null
                 * @enum {string|null}
                 */
                state?: 'to_revisit' | 'annotated' | 'partially_annotated' | 'none' | null;
            }[];
            last_annotator_id?: string | null;
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            id: string;
            media_information: {
                /** @description Display URL of the image or video frame */
                display_url?: string;
                /** @description Height of the image or video frame */
                height?: number;
                /** @description Width of the image or video frame */
                width?: number;
                /** @description Size of the image or video in bytes */
                size?: number;
                /** @description Extension of the image or video in lowercase with a dot (e.g. '.jpg') */
                extension?: string;
            };
            /**
             * @description Status of the preprocessing operation
             * @enum {string}
             */
            preprocessing: 'SCHEDULED' | 'IN_PROGRESS' | 'FINISHED' | 'FAILED';
            /** @description Name of the image */
            name: string;
            roi_id?: string | null;
            /** @description The media's test info */
            test_result: {
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                annotation_id?: string;
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                prediction_id?: string;
                scores?: {
                    /**
                     * @description Mongo ID of the object
                     * @example 60d31793d5f1fb7e6e3c1a4c
                     */
                    label_id?: string | null;
                    /** @description The name of the metric of this score */
                    name?: string;
                    /** @description The score in percentage (0-100) */
                    value?: number;
                }[];
            };
            /** @description Relative URL to the image thumbnail */
            thumbnail: string;
            /**
             * @description Type of media. 'image' for images, and 'video_frame' for video frames.
             * @enum {string}
             */
            type: 'image';
            /** @description Upload time of the media file */
            upload_time?: string;
            /** @description The ID of the user who uploaded the image */
            uploader_id?: string;
        };
        'filtered_video_frame-2': {
            annotation_scene_id?: string | null;
            /** @description Annotation state per task of the image. */
            annotation_state_per_task?: {
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                task_id?: string;
                /**
                 * @description Overall state obtained aggregating the annotation states with the 'revisit' information on a per-task basis. This only has meaning for an  image/frame/scene, as a video does not have an annotation scene. - Image/VideoFrame/AnnotationScene: - to_revisit: Some annotations need to be revisited by the user for this task - annotated: All the ROIs for this task are annotated (contain a label for the task) - partially_annotated: Some ROIs for this task do not contain labels, other ones do - none: No label is present for this task - Video: - all tasks are set to null
                 * @enum {string|null}
                 */
                state?: 'to_revisit' | 'annotated' | 'partially_annotated' | 'none' | null;
            }[];
            last_annotator_id?: string | null;
            /** @description The index of the video frame (0-based) */
            frame_index: number;
            media_information: {
                /** @description Display URL of the image or video frame */
                display_url?: string;
                /** @description Height of the image or video frame */
                height?: number;
                /** @description Width of the image or video frame */
                width?: number;
                /** @description Size of the image or video in bytes */
                size?: number;
                /** @description Extension of the image or video in lowercase with a dot (e.g. '.jpg') */
                extension?: string;
            };
            /**
             * @description Status of the preprocessing operation
             * @enum {string}
             */
            preprocessing: 'SCHEDULED' | 'IN_PROGRESS' | 'FINISHED' | 'FAILED';
            /** @description The title of the video frame */
            name: string;
            roi_id?: string | null;
            /** @description The media's test info */
            test_result: {
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                annotation_id?: string;
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                prediction_id?: string;
                scores?: {
                    /**
                     * @description Mongo ID of the object
                     * @example 60d31793d5f1fb7e6e3c1a4c
                     */
                    label_id?: string | null;
                    /** @description The name of the metric of this score */
                    name?: string;
                    /** @description The score in percentage (0-100) */
                    value?: number;
                }[];
            };
            /** @description Relative URL to the video frame thumbnail */
            thumbnail: string;
            /**
             * @description Type of media. 'image' for images, 'video' for video and 'video_frame' for video frames.
             * @enum {string}
             */
            type: 'video_frame';
            /** @description Upload time of the media file */
            upload_time?: string;
            /** @description The ID of the user who uploaded the video */
            uploader_id?: string;
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            video_id: string;
        };
        filtered_media_scores: {
            /** @description List of media items */
            media?: (
                | {
                      annotation_scene_id?: string | null;
                      /** @description Annotation state per task of the image. */
                      annotation_state_per_task?: {
                          /**
                           * @description Mongo ID of the object
                           * @example 60d31793d5f1fb7e6e3c1a4c
                           */
                          task_id?: string;
                          /**
                           * @description Overall state obtained aggregating the annotation states with the 'revisit' information on a per-task basis. This only has meaning for an  image/frame/scene, as a video does not have an annotation scene. - Image/VideoFrame/AnnotationScene: - to_revisit: Some annotations need to be revisited by the user for this task - annotated: All the ROIs for this task are annotated (contain a label for the task) - partially_annotated: Some ROIs for this task do not contain labels, other ones do - none: No label is present for this task - Video: - all tasks are set to null
                           * @enum {string|null}
                           */
                          state?:
                              | 'to_revisit'
                              | 'annotated'
                              | 'partially_annotated'
                              | 'none'
                              | null;
                      }[];
                      last_annotator_id?: string | null;
                      /**
                       * @description Mongo ID of the object
                       * @example 60d31793d5f1fb7e6e3c1a4c
                       */
                      id: string;
                      media_information: {
                          /** @description Display URL of the image or video frame */
                          display_url?: string;
                          /** @description Height of the image or video frame */
                          height?: number;
                          /** @description Width of the image or video frame */
                          width?: number;
                          /** @description Size of the image or video in bytes */
                          size?: number;
                          /** @description Extension of the image or video in lowercase with a dot (e.g. '.jpg') */
                          extension?: string;
                      };
                      /**
                       * @description Status of the preprocessing operation
                       * @enum {string}
                       */
                      preprocessing: 'SCHEDULED' | 'IN_PROGRESS' | 'FINISHED' | 'FAILED';
                      /** @description Name of the image */
                      name: string;
                      roi_id?: string | null;
                      /** @description The media's test info */
                      test_result: {
                          /**
                           * @description Mongo ID of the object
                           * @example 60d31793d5f1fb7e6e3c1a4c
                           */
                          annotation_id?: string;
                          /**
                           * @description Mongo ID of the object
                           * @example 60d31793d5f1fb7e6e3c1a4c
                           */
                          prediction_id?: string;
                          scores?: {
                              /**
                               * @description Mongo ID of the object
                               * @example 60d31793d5f1fb7e6e3c1a4c
                               */
                              label_id?: string | null;
                              /** @description The name of the metric of this score */
                              name?: string;
                              /** @description The score in percentage (0-100) */
                              value?: number;
                          }[];
                      };
                      /** @description Relative URL to the image thumbnail */
                      thumbnail: string;
                      /**
                       * @description Type of media. 'image' for images, and 'video_frame' for video frames.
                       * @enum {string}
                       */
                      type: 'image';
                      /** @description Upload time of the media file */
                      upload_time?: string;
                      /** @description The ID of the user who uploaded the image */
                      uploader_id?: string;
                  }
                | {
                      annotation_scene_id?: string | null;
                      /** @description Annotation state per task of the image. */
                      annotation_state_per_task?: {
                          /**
                           * @description Mongo ID of the object
                           * @example 60d31793d5f1fb7e6e3c1a4c
                           */
                          task_id?: string;
                          /**
                           * @description Overall state obtained aggregating the annotation states with the 'revisit' information on a per-task basis. This only has meaning for an  image/frame/scene, as a video does not have an annotation scene. - Image/VideoFrame/AnnotationScene: - to_revisit: Some annotations need to be revisited by the user for this task - annotated: All the ROIs for this task are annotated (contain a label for the task) - partially_annotated: Some ROIs for this task do not contain labels, other ones do - none: No label is present for this task - Video: - all tasks are set to null
                           * @enum {string|null}
                           */
                          state?:
                              | 'to_revisit'
                              | 'annotated'
                              | 'partially_annotated'
                              | 'none'
                              | null;
                      }[];
                      last_annotator_id?: string | null;
                      /** @description The index of the video frame (0-based) */
                      frame_index: number;
                      media_information: {
                          /** @description Display URL of the image or video frame */
                          display_url?: string;
                          /** @description Height of the image or video frame */
                          height?: number;
                          /** @description Width of the image or video frame */
                          width?: number;
                          /** @description Size of the image or video in bytes */
                          size?: number;
                          /** @description Extension of the image or video in lowercase with a dot (e.g. '.jpg') */
                          extension?: string;
                      };
                      /**
                       * @description Status of the preprocessing operation
                       * @enum {string}
                       */
                      preprocessing: 'SCHEDULED' | 'IN_PROGRESS' | 'FINISHED' | 'FAILED';
                      /** @description The title of the video frame */
                      name: string;
                      roi_id?: string | null;
                      /** @description The media's test info */
                      test_result: {
                          /**
                           * @description Mongo ID of the object
                           * @example 60d31793d5f1fb7e6e3c1a4c
                           */
                          annotation_id?: string;
                          /**
                           * @description Mongo ID of the object
                           * @example 60d31793d5f1fb7e6e3c1a4c
                           */
                          prediction_id?: string;
                          scores?: {
                              /**
                               * @description Mongo ID of the object
                               * @example 60d31793d5f1fb7e6e3c1a4c
                               */
                              label_id?: string | null;
                              /** @description The name of the metric of this score */
                              name?: string;
                              /** @description The score in percentage (0-100) */
                              value?: number;
                          }[];
                      };
                      /** @description Relative URL to the video frame thumbnail */
                      thumbnail: string;
                      /**
                       * @description Type of media. 'image' for images, 'video' for video and 'video_frame' for video frames.
                       * @enum {string}
                       */
                      type: 'video_frame';
                      /** @description Upload time of the media file */
                      upload_time?: string;
                      /** @description The ID of the user who uploaded the video */
                      uploader_id?: string;
                      /**
                       * @description Mongo ID of the object
                       * @example 60d31793d5f1fb7e6e3c1a4c
                       */
                      video_id: string;
                  }
            )[];
            /** @description URL to the next page of results, if the same parameters are used. */
            next_page?: string;
            /** @description Total images that match the query. */
            total_matched_images?: number;
            /** @description Total videos that match the query. */
            total_matched_videos?: number;
            /** @description Total video frames that match the query. */
            total_matched_video_frames?: number;
            /** @description Total images in the dataset. */
            total_images?: number;
            /** @description Total videos in the dataset. */
            total_videos?: number;
        };
        /** @enum {string} */
        job_state: 'idle' | 'running' | 'paused' | 'finished' | 'error' | 'failed' | 'cancelled';
        job_type: ('train' | 'optimize_pot' | 'test')[];
        /** Format: date-time */
        timestamp: string;
        /** @enum {string} */
        jobs_sort_by: 'job_name' | 'start_time' | 'end_time' | 'creation_date' | 'priority';
        /** @description Information detailing the cancellation status of the job */
        cancellation_info: {
            /** @description whether the job can be cancelled after startup */
            cancellable?: boolean | null;
            /** @description whether the job is cancelled */
            is_cancelled?: boolean | null;
            /** @description The user UID who requested the cancellation */
            user_uid?: string | null;
            /**
             * Format: date-time
             * @description The time of cancellation
             */
            cancel_time?: string | null;
        };
        /** @description Progress details for each step of the job */
        steps: {
            /** @description Status message */
            message?: string | null;
            /** @description The index of the step within the job */
            index?: number;
            /**
             * Format: float
             * @description Step progress from 0 to 100
             */
            progress?: number;
            /** @description Step state */
            state?: string;
            /** @description Step name */
            step_name?: string;
            /**
             * Format: float
             * @description Step duration in seconds
             */
            duration?: number | null;
            /** @description Step warning message */
            warning?: string | null;
        }[];
        /** Format: date-time */
        time: string | null;
        /**
         * Metadata of train job
         * @description Additional information associated with the train job
         */
        train_metadata: {
            /** @description Information about the task associated with the job, if any */
            task?: {
                /** @description Name of the task */
                name?: string;
                /** @description Identifier of the model template used by the task */
                model_template_id?: string;
                /** @description Neural network architecture used for the model */
                model_architecture?: string;
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                dataset_storage_id?: string;
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                task_id?: string;
            };
            /** @description Information about the project associated with the job */
            project?: {
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                id?: string;
                /** @description Name of the project */
                name?: string;
            };
            /** @description Information about the trained model */
            trained_model?: {
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                model_storage_id?: string;
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                model_id?: string;
                /** @description Whether the model became the active one after training */
                model_activated?: boolean;
            };
        };
        /** train job */
        job_train: {
            /** @description Name of the job */
            name?: string;
            /** @description The time at which the job was created */
            creation_time?: string;
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            id?: string;
            /** @description Identifier of the user who submitted the job */
            author?: string;
            /** @description Information detailing the cancellation status of the job */
            cancellation_info?: {
                /** @description whether the job can be cancelled after startup */
                cancellable?: boolean | null;
                /** @description whether the job is cancelled */
                is_cancelled?: boolean | null;
                /** @description The user UID who requested the cancellation */
                user_uid?: string | null;
                /**
                 * Format: date-time
                 * @description The time of cancellation
                 */
                cancel_time?: string | null;
            };
            /** @description Progress details for each step of the job */
            steps?: {
                /** @description Status message */
                message?: string | null;
                /** @description The index of the step within the job */
                index?: number;
                /**
                 * Format: float
                 * @description Step progress from 0 to 100
                 */
                progress?: number;
                /** @description Step state */
                state?: string;
                /** @description Step name */
                step_name?: string;
                /**
                 * Format: float
                 * @description Step duration in seconds
                 */
                duration?: number | null;
                /** @description Step warning message */
                warning?: string | null;
            }[];
            /**
             * Format: date-time
             * @description Start time of the job
             */
            start_time?: string | null;
            /**
             * Format: date-time
             * @description End time of the job
             */
            end_time?: string | null;
            /** @description The state of the job */
            state?: string;
            /**
             * @description Type of the job.
             * @enum {string}
             */
            type?: 'train';
            /**
             * Metadata of train job
             * @description Additional information associated with the train job
             */
            metadata?: {
                /** @description Information about the task associated with the job, if any */
                task?: {
                    /** @description Name of the task */
                    name?: string;
                    /** @description Identifier of the model template used by the task */
                    model_template_id?: string;
                    /** @description Neural network architecture used for the model */
                    model_architecture?: string;
                    /**
                     * @description Mongo ID of the object
                     * @example 60d31793d5f1fb7e6e3c1a4c
                     */
                    dataset_storage_id?: string;
                    /**
                     * @description Mongo ID of the object
                     * @example 60d31793d5f1fb7e6e3c1a4c
                     */
                    task_id?: string;
                };
                /** @description Information about the project associated with the job */
                project?: {
                    /**
                     * @description Mongo ID of the object
                     * @example 60d31793d5f1fb7e6e3c1a4c
                     */
                    id?: string;
                    /** @description Name of the project */
                    name?: string;
                };
                /** @description Information about the trained model */
                trained_model?: {
                    /**
                     * @description Mongo ID of the object
                     * @example 60d31793d5f1fb7e6e3c1a4c
                     */
                    model_storage_id?: string;
                    /**
                     * @description Mongo ID of the object
                     * @example 60d31793d5f1fb7e6e3c1a4c
                     */
                    model_id?: string;
                    /** @description Whether the model became the active one after training */
                    model_activated?: boolean;
                };
            };
        };
        /**
         * Metadata of train/optimize/test job
         * @description Additional information associated with the train/optimize/test job
         */
        test_metadata: {
            /** @description Information about the task associated with the job, if any */
            task?: {
                /** @description Name of the task */
                name?: string;
                /** @description Identifier of the model template used by the task */
                model_template_id?: string;
                /** @description Neural network architecture used for the model */
                model_architecture?: string;
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                dataset_storage_id?: string;
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                task_id?: string;
            };
            /** @description Information about the test associated with the job, if any */
            test?: {
                /** @description Identifier of the model template used by the task */
                model_template_id?: string;
                /** @description Neural network architecture used for the model */
                model_architecture?: string;
                model?: unknown;
                /** @description Array of datasets */
                datasets?: {
                    /**
                     * @description Mongo ID of the object
                     * @example 60d31793d5f1fb7e6e3c1a4c
                     */
                    id?: string;
                    /** @description boolean showing whether the dataset is deleted */
                    is_deleted?: boolean;
                    /** @description Name of the dataset */
                    name?: string;
                    /**
                     * Format: int32
                     * @description Number of images in the dataset
                     */
                    n_images?: number;
                    /**
                     * Format: int32
                     * @description Number of frames in the dataset
                     */
                    n_frames?: number;
                    /**
                     * Format: int32
                     * @description Number of samples in the dataset
                     */
                    n_samples?: number;
                }[];
            };
            /** @description Information about the project associated with the job */
            project?: {
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                id?: string;
                /** @description Name of the project */
                name?: string;
            };
        };
        /** test job */
        job_test: {
            /** @description Name of the job */
            name?: string;
            /** @description The time at which the job was created */
            creation_time?: string;
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            id?: string;
            /** @description Identifier of the user who submitted the job */
            author?: string;
            /** @description Information detailing the cancellation status of the job */
            cancellation_info?: {
                /** @description whether the job can be cancelled after startup */
                cancellable?: boolean | null;
                /** @description whether the job is cancelled */
                is_cancelled?: boolean | null;
                /** @description The user UID who requested the cancellation */
                user_uid?: string | null;
                /**
                 * Format: date-time
                 * @description The time of cancellation
                 */
                cancel_time?: string | null;
            };
            /** @description Progress details for each step of the job */
            steps?: {
                /** @description Status message */
                message?: string | null;
                /** @description The index of the step within the job */
                index?: number;
                /**
                 * Format: float
                 * @description Step progress from 0 to 100
                 */
                progress?: number;
                /** @description Step state */
                state?: string;
                /** @description Step name */
                step_name?: string;
                /**
                 * Format: float
                 * @description Step duration in seconds
                 */
                duration?: number | null;
                /** @description Step warning message */
                warning?: string | null;
            }[];
            /**
             * Format: date-time
             * @description Start time of the job
             */
            start_time?: string | null;
            /**
             * Format: date-time
             * @description End time of the job
             */
            end_time?: string | null;
            /** @description The state of the job */
            state?: string;
            /**
             * @description Type of the job.
             * @enum {string}
             */
            type?: 'test';
            /**
             * Metadata of train/optimize/test job
             * @description Additional information associated with the train/optimize/test job
             */
            metadata?: {
                /** @description Information about the task associated with the job, if any */
                task?: {
                    /** @description Name of the task */
                    name?: string;
                    /** @description Identifier of the model template used by the task */
                    model_template_id?: string;
                    /** @description Neural network architecture used for the model */
                    model_architecture?: string;
                    /**
                     * @description Mongo ID of the object
                     * @example 60d31793d5f1fb7e6e3c1a4c
                     */
                    dataset_storage_id?: string;
                    /**
                     * @description Mongo ID of the object
                     * @example 60d31793d5f1fb7e6e3c1a4c
                     */
                    task_id?: string;
                };
                /** @description Information about the test associated with the job, if any */
                test?: {
                    /** @description Identifier of the model template used by the task */
                    model_template_id?: string;
                    /** @description Neural network architecture used for the model */
                    model_architecture?: string;
                    model?: unknown;
                    /** @description Array of datasets */
                    datasets?: {
                        /**
                         * @description Mongo ID of the object
                         * @example 60d31793d5f1fb7e6e3c1a4c
                         */
                        id?: string;
                        /** @description boolean showing whether the dataset is deleted */
                        is_deleted?: boolean;
                        /** @description Name of the dataset */
                        name?: string;
                        /**
                         * Format: int32
                         * @description Number of images in the dataset
                         */
                        n_images?: number;
                        /**
                         * Format: int32
                         * @description Number of frames in the dataset
                         */
                        n_frames?: number;
                        /**
                         * Format: int32
                         * @description Number of samples in the dataset
                         */
                        n_samples?: number;
                    }[];
                };
                /** @description Information about the project associated with the job */
                project?: {
                    /**
                     * @description Mongo ID of the object
                     * @example 60d31793d5f1fb7e6e3c1a4c
                     */
                    id?: string;
                    /** @description Name of the project */
                    name?: string;
                };
            };
        };
        /**
         * Metadata of optimize job
         * @description Additional information associated with the optimize job
         */
        optimize_metadata: {
            /** @description Information about the task associated with the job, if any */
            task?: {
                /** @description Name of the task */
                name?: string;
                /** @description Identifier of the model template used by the task */
                model_template_id?: string;
                /** @description Neural network architecture used for the model */
                model_architecture?: string;
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                dataset_storage_id?: string;
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                task_id?: string;
            };
            /** @description Information about the project associated with the job */
            project?: {
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                id?: string;
                /** @description Name of the project */
                name?: string;
            };
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            model_storage_id?: string;
            /**
             * @description Type of optimization
             * @enum {string}
             */
            optimization_type?: 'POT';
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            base_model_id?: string;
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            optimized_model_id?: string;
        };
        /** optimize job */
        job_optimize: {
            /** @description Name of the job */
            name?: string;
            /** @description The time at which the job was created */
            creation_time?: string;
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            id?: string;
            /** @description Identifier of the user who submitted the job */
            author?: string;
            /** @description Information detailing the cancellation status of the job */
            cancellation_info?: {
                /** @description whether the job can be cancelled after startup */
                cancellable?: boolean | null;
                /** @description whether the job is cancelled */
                is_cancelled?: boolean | null;
                /** @description The user UID who requested the cancellation */
                user_uid?: string | null;
                /**
                 * Format: date-time
                 * @description The time of cancellation
                 */
                cancel_time?: string | null;
            };
            /** @description Progress details for each step of the job */
            steps?: {
                /** @description Status message */
                message?: string | null;
                /** @description The index of the step within the job */
                index?: number;
                /**
                 * Format: float
                 * @description Step progress from 0 to 100
                 */
                progress?: number;
                /** @description Step state */
                state?: string;
                /** @description Step name */
                step_name?: string;
                /**
                 * Format: float
                 * @description Step duration in seconds
                 */
                duration?: number | null;
                /** @description Step warning message */
                warning?: string | null;
            }[];
            /**
             * Format: date-time
             * @description Start time of the job
             */
            start_time?: string | null;
            /**
             * Format: date-time
             * @description End time of the job
             */
            end_time?: string | null;
            /** @description The state of the job */
            state?: string;
            /**
             * @description Type of the job.
             * @enum {string}
             */
            type?: 'optimize_pot';
            /**
             * Metadata of optimize job
             * @description Additional information associated with the optimize job
             */
            metadata?: {
                /** @description Information about the task associated with the job, if any */
                task?: {
                    /** @description Name of the task */
                    name?: string;
                    /** @description Identifier of the model template used by the task */
                    model_template_id?: string;
                    /** @description Neural network architecture used for the model */
                    model_architecture?: string;
                    /**
                     * @description Mongo ID of the object
                     * @example 60d31793d5f1fb7e6e3c1a4c
                     */
                    dataset_storage_id?: string;
                    /**
                     * @description Mongo ID of the object
                     * @example 60d31793d5f1fb7e6e3c1a4c
                     */
                    task_id?: string;
                };
                /** @description Information about the project associated with the job */
                project?: {
                    /**
                     * @description Mongo ID of the object
                     * @example 60d31793d5f1fb7e6e3c1a4c
                     */
                    id?: string;
                    /** @description Name of the project */
                    name?: string;
                };
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                model_storage_id?: string;
                /**
                 * @description Type of optimization
                 * @enum {string}
                 */
                optimization_type?: 'POT';
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                base_model_id?: string;
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                optimized_model_id?: string;
            };
        };
        /** @description ID of the uploaded dataset file to be imported */
        file_id: string;
        /** @description Warnings to import dataset to specific domain */
        warnings: {
            /**
             * @description Type of the warning
             * @enum {string}
             */
            type: 'error' | 'warning';
            /**
             * @description Name of the warning
             * @example Missing expected annotation type for classification domain
             */
            name: string;
            /** @description Detailed description of the warning */
            description: string;
            /** @description How to handle the warning */
            resolve_strategy?: string;
            /**
             * Format: int32
             * @description Number of affected images
             */
            affected_images?: number;
        }[];
        /** @enum {unknown} */
        project_types:
            | 'classification'
            | 'classification_hierarchical'
            | 'detection'
            | 'segmentation'
            | 'instance_segmentation'
            | 'anomaly'
            | 'detection_oriented'
            | 'detection_classification'
            | 'detection_segmentation'
            | 'keypoint_detection';
        /**
         * Metadata of `prepare_import_to_new_project` job
         * @description Supported project types and warnings
         */
        prepare_import_to_new_project: {
            /** @description ID of the uploaded dataset file to be imported */
            file_id?: string;
            /** @description Warnings to import dataset to specific domain */
            warnings?: {
                /**
                 * @description Type of the warning
                 * @enum {string}
                 */
                type: 'error' | 'warning';
                /**
                 * @description Name of the warning
                 * @example Missing expected annotation type for classification domain
                 */
                name: string;
                /** @description Detailed description of the warning */
                description: string;
                /** @description How to handle the warning */
                resolve_strategy?: string;
                /**
                 * Format: int32
                 * @description Number of affected images
                 */
                affected_images?: number;
            }[];
            /** @description Supported project types and corresponding labels */
            supported_project_types?: {
                /**
                 * @description Project type name
                 * @enum {string}
                 */
                project_type:
                    | 'classification'
                    | 'classification_hierarchical'
                    | 'detection'
                    | 'segmentation'
                    | 'instance_segmentation'
                    | 'anomaly'
                    | 'detection_oriented'
                    | 'detection_classification'
                    | 'detection_segmentation'
                    | 'keypoint_detection';
                pipeline: {
                    connections: {
                        /** @description Source task name */
                        from: string;
                        /** @description Target task name */
                        to: string;
                    }[];
                    tasks: {
                        /** @description Task name */
                        title: string;
                        /**
                         * @description OTX Task type name in lowercase
                         * @enum {string}
                         */
                        task_type:
                            | 'dataset'
                            | 'classification'
                            | 'segmentation'
                            | 'detection'
                            | 'crop'
                            | 'instance_segmentation'
                            | 'keypoint_detection'
                            | 'anomaly'
                            | 'rotated_detection';
                        labels: {
                            /** @description Label name */
                            name: string;
                            /** @description Label group name */
                            group?: string;
                            /** @description Label parent name */
                            parent?: string;
                        }[];
                    }[];
                };
            }[];
        };
        /** prepare_import_to_new_project job */
        job_prepare_import_to_new_project: {
            /** @description Name of the job */
            name?: string;
            /** @description The time at which the job was created */
            creation_time?: string;
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            id?: string;
            /** @description Identifier of the user who submitted the job */
            author?: string;
            /** @description Information detailing the cancellation status of the job */
            cancellation_info?: {
                /** @description whether the job can be cancelled after startup */
                cancellable?: boolean | null;
                /** @description whether the job is cancelled */
                is_cancelled?: boolean | null;
                /** @description The user UID who requested the cancellation */
                user_uid?: string | null;
                /**
                 * Format: date-time
                 * @description The time of cancellation
                 */
                cancel_time?: string | null;
            };
            /** @description Progress details for each step of the job */
            steps?: {
                /** @description Status message */
                message?: string | null;
                /** @description The index of the step within the job */
                index?: number;
                /**
                 * Format: float
                 * @description Step progress from 0 to 100
                 */
                progress?: number;
                /** @description Step state */
                state?: string;
                /** @description Step name */
                step_name?: string;
                /**
                 * Format: float
                 * @description Step duration in seconds
                 */
                duration?: number | null;
                /** @description Step warning message */
                warning?: string | null;
            }[];
            /**
             * Format: date-time
             * @description Start time of the job
             */
            start_time?: string | null;
            /**
             * Format: date-time
             * @description End time of the job
             */
            end_time?: string | null;
            /** @description The state of the job */
            state?: string;
            /**
             * @description Type of the job.
             * @enum {string}
             */
            type?: 'prepare_import_to_new_project';
            /**
             * Metadata of `prepare_import_to_new_project` job
             * @description Supported project types and warnings
             */
            metadata?: {
                /** @description ID of the uploaded dataset file to be imported */
                file_id?: string;
                /** @description Warnings to import dataset to specific domain */
                warnings?: {
                    /**
                     * @description Type of the warning
                     * @enum {string}
                     */
                    type: 'error' | 'warning';
                    /**
                     * @description Name of the warning
                     * @example Missing expected annotation type for classification domain
                     */
                    name: string;
                    /** @description Detailed description of the warning */
                    description: string;
                    /** @description How to handle the warning */
                    resolve_strategy?: string;
                    /**
                     * Format: int32
                     * @description Number of affected images
                     */
                    affected_images?: number;
                }[];
                /** @description Supported project types and corresponding labels */
                supported_project_types?: {
                    /**
                     * @description Project type name
                     * @enum {string}
                     */
                    project_type:
                        | 'classification'
                        | 'classification_hierarchical'
                        | 'detection'
                        | 'segmentation'
                        | 'instance_segmentation'
                        | 'anomaly'
                        | 'detection_oriented'
                        | 'detection_classification'
                        | 'detection_segmentation'
                        | 'keypoint_detection';
                    pipeline: {
                        connections: {
                            /** @description Source task name */
                            from: string;
                            /** @description Target task name */
                            to: string;
                        }[];
                        tasks: {
                            /** @description Task name */
                            title: string;
                            /**
                             * @description OTX Task type name in lowercase
                             * @enum {string}
                             */
                            task_type:
                                | 'dataset'
                                | 'classification'
                                | 'segmentation'
                                | 'detection'
                                | 'crop'
                                | 'instance_segmentation'
                                | 'keypoint_detection'
                                | 'anomaly'
                                | 'rotated_detection';
                            labels: {
                                /** @description Label name */
                                name: string;
                                /** @description Label group name */
                                group?: string;
                                /** @description Label parent name */
                                parent?: string;
                            }[];
                        }[];
                    };
                }[];
            };
        };
        /**
         * Metadata of `perform_import_to_new_project` job
         * @description Created project ID
         */
        perform_import_to_new_project: {
            /** @description ID of the uploaded dataset file to be imported */
            file_id?: string;
            /** @description Information about the project to create */
            project?: {
                id?: string;
                name?: string;
            };
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            project_id?: string;
        };
        /** perform_import_to_new_project job */
        job_perform_import_to_new_project: {
            /** @description Name of the job */
            name?: string;
            /** @description The time at which the job was created */
            creation_time?: string;
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            id?: string;
            /** @description Identifier of the user who submitted the job */
            author?: string;
            /** @description Information detailing the cancellation status of the job */
            cancellation_info?: {
                /** @description whether the job can be cancelled after startup */
                cancellable?: boolean | null;
                /** @description whether the job is cancelled */
                is_cancelled?: boolean | null;
                /** @description The user UID who requested the cancellation */
                user_uid?: string | null;
                /**
                 * Format: date-time
                 * @description The time of cancellation
                 */
                cancel_time?: string | null;
            };
            /** @description Progress details for each step of the job */
            steps?: {
                /** @description Status message */
                message?: string | null;
                /** @description The index of the step within the job */
                index?: number;
                /**
                 * Format: float
                 * @description Step progress from 0 to 100
                 */
                progress?: number;
                /** @description Step state */
                state?: string;
                /** @description Step name */
                step_name?: string;
                /**
                 * Format: float
                 * @description Step duration in seconds
                 */
                duration?: number | null;
                /** @description Step warning message */
                warning?: string | null;
            }[];
            /**
             * Format: date-time
             * @description Start time of the job
             */
            start_time?: string | null;
            /**
             * Format: date-time
             * @description End time of the job
             */
            end_time?: string | null;
            /** @description The state of the job */
            state?: string;
            /**
             * @description Type of the job.
             * @enum {string}
             */
            type?: 'perform_import_to_new_project';
            /**
             * Metadata of `perform_import_to_new_project` job
             * @description Created project ID
             */
            metadata?: {
                /** @description ID of the uploaded dataset file to be imported */
                file_id?: string;
                /** @description Information about the project to create */
                project?: {
                    id?: string;
                    name?: string;
                };
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                project_id?: string;
            };
        };
        'project-4': {
            /** @description ID of the project */
            id?: string;
            /** @description Name of the project */
            name?: string;
            /**
             * @description Type name of the project
             * @enum {string}
             */
            type?:
                | 'classification'
                | 'classification_hierarchical'
                | 'detection'
                | 'segmentation'
                | 'instance_segmentation'
                | 'anomaly'
                | 'detection_oriented'
                | 'detection_classification'
                | 'detection_segmentation'
                | 'keypoint_detection';
        };
        /**
         * Metadata of `prepare_import_to_existing_project` job
         * @description Labels in the dataset and warnings
         */
        prepare_import_to_existing_project: {
            /** @description ID of the uploaded dataset file to be imported */
            file_id?: string;
            /** @description Information about the project where the dataset is imported */
            project?: {
                /** @description ID of the project */
                id?: string;
                /** @description Name of the project */
                name?: string;
                /**
                 * @description Type name of the project
                 * @enum {string}
                 */
                type?:
                    | 'classification'
                    | 'classification_hierarchical'
                    | 'detection'
                    | 'segmentation'
                    | 'instance_segmentation'
                    | 'anomaly'
                    | 'detection_oriented'
                    | 'detection_classification'
                    | 'detection_segmentation'
                    | 'keypoint_detection';
            };
            /** @description Warnings to import dataset to specific domain */
            warnings?: {
                /**
                 * @description Type of the warning
                 * @enum {string}
                 */
                type: 'error' | 'warning';
                /**
                 * @description Name of the warning
                 * @example Missing expected annotation type for classification domain
                 */
                name: string;
                /** @description Detailed description of the warning */
                description: string;
                /** @description How to handle the warning */
                resolve_strategy?: string;
                /**
                 * Format: int32
                 * @description Number of affected images
                 */
                affected_images?: number;
            }[];
            /** @description Label names in the dataset */
            labels?: string[];
        };
        /** prepare_import_to_existing_project job */
        job_prepare_import_to_existing_project: {
            /** @description Name of the job */
            name?: string;
            /** @description The time at which the job was created */
            creation_time?: string;
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            id?: string;
            /** @description Identifier of the user who submitted the job */
            author?: string;
            /** @description Information detailing the cancellation status of the job */
            cancellation_info?: {
                /** @description whether the job can be cancelled after startup */
                cancellable?: boolean | null;
                /** @description whether the job is cancelled */
                is_cancelled?: boolean | null;
                /** @description The user UID who requested the cancellation */
                user_uid?: string | null;
                /**
                 * Format: date-time
                 * @description The time of cancellation
                 */
                cancel_time?: string | null;
            };
            /** @description Progress details for each step of the job */
            steps?: {
                /** @description Status message */
                message?: string | null;
                /** @description The index of the step within the job */
                index?: number;
                /**
                 * Format: float
                 * @description Step progress from 0 to 100
                 */
                progress?: number;
                /** @description Step state */
                state?: string;
                /** @description Step name */
                step_name?: string;
                /**
                 * Format: float
                 * @description Step duration in seconds
                 */
                duration?: number | null;
                /** @description Step warning message */
                warning?: string | null;
            }[];
            /**
             * Format: date-time
             * @description Start time of the job
             */
            start_time?: string | null;
            /**
             * Format: date-time
             * @description End time of the job
             */
            end_time?: string | null;
            /** @description The state of the job */
            state?: string;
            /**
             * @description Type of the job.
             * @enum {string}
             */
            type?: 'prepare_import_to_existing_project';
            /**
             * Metadata of `prepare_import_to_existing_project` job
             * @description Labels in the dataset and warnings
             */
            metadata?: {
                /** @description ID of the uploaded dataset file to be imported */
                file_id?: string;
                /** @description Information about the project where the dataset is imported */
                project?: {
                    /** @description ID of the project */
                    id?: string;
                    /** @description Name of the project */
                    name?: string;
                    /**
                     * @description Type name of the project
                     * @enum {string}
                     */
                    type?:
                        | 'classification'
                        | 'classification_hierarchical'
                        | 'detection'
                        | 'segmentation'
                        | 'instance_segmentation'
                        | 'anomaly'
                        | 'detection_oriented'
                        | 'detection_classification'
                        | 'detection_segmentation'
                        | 'keypoint_detection';
                };
                /** @description Warnings to import dataset to specific domain */
                warnings?: {
                    /**
                     * @description Type of the warning
                     * @enum {string}
                     */
                    type: 'error' | 'warning';
                    /**
                     * @description Name of the warning
                     * @example Missing expected annotation type for classification domain
                     */
                    name: string;
                    /** @description Detailed description of the warning */
                    description: string;
                    /** @description How to handle the warning */
                    resolve_strategy?: string;
                    /**
                     * Format: int32
                     * @description Number of affected images
                     */
                    affected_images?: number;
                }[];
                /** @description Label names in the dataset */
                labels?: string[];
            };
        };
        /**
         * Metadata of `perform_import_to_existing_project` job
         * @description Imported dataset information
         */
        perform_import_to_existing_project: {
            /** @description ID of the uploaded dataset file to be imported */
            file_id?: string;
            /** @description Information about the project where the dataset is imported */
            project?: {
                /** @description ID of the project */
                id?: string;
                /** @description Name of the project */
                name?: string;
                /**
                 * @description Type name of the project
                 * @enum {string}
                 */
                type?:
                    | 'classification'
                    | 'classification_hierarchical'
                    | 'detection'
                    | 'segmentation'
                    | 'instance_segmentation'
                    | 'anomaly'
                    | 'detection_oriented'
                    | 'detection_classification'
                    | 'detection_segmentation'
                    | 'keypoint_detection';
            };
            /** @description The dataset information for importing the uploaded dataset file */
            dataset?: {
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                id?: string;
                /** @description Name of the dataset storage */
                name?: string;
                /** @description Whether the dataset will be used for training or not */
                use_for_training?: boolean;
                /**
                 * @description The time at which the dataset was created
                 * @example 2024-03-05T06:34:32.332000+00:00
                 */
                creation_time?: string;
            };
        };
        /** perform_import_to_existing_project job */
        job_perform_import_to_existing_project: {
            /** @description Name of the job */
            name?: string;
            /** @description The time at which the job was created */
            creation_time?: string;
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            id?: string;
            /** @description Identifier of the user who submitted the job */
            author?: string;
            /** @description Information detailing the cancellation status of the job */
            cancellation_info?: {
                /** @description whether the job can be cancelled after startup */
                cancellable?: boolean | null;
                /** @description whether the job is cancelled */
                is_cancelled?: boolean | null;
                /** @description The user UID who requested the cancellation */
                user_uid?: string | null;
                /**
                 * Format: date-time
                 * @description The time of cancellation
                 */
                cancel_time?: string | null;
            };
            /** @description Progress details for each step of the job */
            steps?: {
                /** @description Status message */
                message?: string | null;
                /** @description The index of the step within the job */
                index?: number;
                /**
                 * Format: float
                 * @description Step progress from 0 to 100
                 */
                progress?: number;
                /** @description Step state */
                state?: string;
                /** @description Step name */
                step_name?: string;
                /**
                 * Format: float
                 * @description Step duration in seconds
                 */
                duration?: number | null;
                /** @description Step warning message */
                warning?: string | null;
            }[];
            /**
             * Format: date-time
             * @description Start time of the job
             */
            start_time?: string | null;
            /**
             * Format: date-time
             * @description End time of the job
             */
            end_time?: string | null;
            /** @description The state of the job */
            state?: string;
            /**
             * @description Type of the job.
             * @enum {string}
             */
            type?: 'perform_import_to_existing_project';
            /**
             * Metadata of `perform_import_to_existing_project` job
             * @description Imported dataset information
             */
            metadata?: {
                /** @description ID of the uploaded dataset file to be imported */
                file_id?: string;
                /** @description Information about the project where the dataset is imported */
                project?: {
                    /** @description ID of the project */
                    id?: string;
                    /** @description Name of the project */
                    name?: string;
                    /**
                     * @description Type name of the project
                     * @enum {string}
                     */
                    type?:
                        | 'classification'
                        | 'classification_hierarchical'
                        | 'detection'
                        | 'segmentation'
                        | 'instance_segmentation'
                        | 'anomaly'
                        | 'detection_oriented'
                        | 'detection_classification'
                        | 'detection_segmentation'
                        | 'keypoint_detection';
                };
                /** @description The dataset information for importing the uploaded dataset file */
                dataset?: {
                    /**
                     * @description Mongo ID of the object
                     * @example 60d31793d5f1fb7e6e3c1a4c
                     */
                    id?: string;
                    /** @description Name of the dataset storage */
                    name?: string;
                    /** @description Whether the dataset will be used for training or not */
                    use_for_training?: boolean;
                    /**
                     * @description The time at which the dataset was created
                     * @example 2024-03-05T06:34:32.332000+00:00
                     */
                    creation_time?: string;
                };
            };
        };
        'dataset-4': {
            /** @description ID of the dataset storage */
            id?: string;
            /** @description Name of the dataset storage */
            name?: string;
        };
        /**
         * Metadata of `export_dataset` job
         * @description Information about the exported dataset
         */
        export_dataset: {
            /** @description Information about the project to export */
            project?: {
                /** @description ID of the project */
                id?: string;
                /** @description Name of the project */
                name?: string;
                /**
                 * @description Type name of the project
                 * @enum {string}
                 */
                type?:
                    | 'classification'
                    | 'classification_hierarchical'
                    | 'detection'
                    | 'segmentation'
                    | 'instance_segmentation'
                    | 'anomaly'
                    | 'detection_oriented'
                    | 'detection_classification'
                    | 'detection_segmentation'
                    | 'keypoint_detection';
            };
            /** @description Thd dataset information to be exported */
            dataset?: {
                /** @description ID of the dataset storage */
                id?: string;
                /** @description Name of the dataset storage */
                name?: string;
            };
            /**
             * @description Format of the dataset to be exported
             * @enum {string}
             */
            export_format?: 'voc' | 'coco' | 'yolo' | 'datumaro';
            /** @description URL to download the prepared dataset */
            download_url?: string;
        };
        /** export_dataset job */
        job_export_dataset: {
            /** @description Name of the job */
            name?: string;
            /** @description The time at which the job was created */
            creation_time?: string;
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            id?: string;
            /** @description Identifier of the user who submitted the job */
            author?: string;
            /** @description Information detailing the cancellation status of the job */
            cancellation_info?: {
                /** @description whether the job can be cancelled after startup */
                cancellable?: boolean | null;
                /** @description whether the job is cancelled */
                is_cancelled?: boolean | null;
                /** @description The user UID who requested the cancellation */
                user_uid?: string | null;
                /**
                 * Format: date-time
                 * @description The time of cancellation
                 */
                cancel_time?: string | null;
            };
            /** @description Progress details for each step of the job */
            steps?: {
                /** @description Status message */
                message?: string | null;
                /** @description The index of the step within the job */
                index?: number;
                /**
                 * Format: float
                 * @description Step progress from 0 to 100
                 */
                progress?: number;
                /** @description Step state */
                state?: string;
                /** @description Step name */
                step_name?: string;
                /**
                 * Format: float
                 * @description Step duration in seconds
                 */
                duration?: number | null;
                /** @description Step warning message */
                warning?: string | null;
            }[];
            /**
             * Format: date-time
             * @description Start time of the job
             */
            start_time?: string | null;
            /**
             * Format: date-time
             * @description End time of the job
             */
            end_time?: string | null;
            /** @description The state of the job */
            state?: string;
            /**
             * @description Type of the job.
             * @enum {string}
             */
            type?: 'export_dataset';
            /**
             * Metadata of `export_dataset` job
             * @description Information about the exported dataset
             */
            metadata?: {
                /** @description Information about the project to export */
                project?: {
                    /** @description ID of the project */
                    id?: string;
                    /** @description Name of the project */
                    name?: string;
                    /**
                     * @description Type name of the project
                     * @enum {string}
                     */
                    type?:
                        | 'classification'
                        | 'classification_hierarchical'
                        | 'detection'
                        | 'segmentation'
                        | 'instance_segmentation'
                        | 'anomaly'
                        | 'detection_oriented'
                        | 'detection_classification'
                        | 'detection_segmentation'
                        | 'keypoint_detection';
                };
                /** @description Thd dataset information to be exported */
                dataset?: {
                    /** @description ID of the dataset storage */
                    id?: string;
                    /** @description Name of the dataset storage */
                    name?: string;
                };
                /**
                 * @description Format of the dataset to be exported
                 * @enum {string}
                 */
                export_format?: 'voc' | 'coco' | 'yolo' | 'datumaro';
                /** @description URL to download the prepared dataset */
                download_url?: string;
            };
        };
        job_list: {
            /** @description Array of jobs */
            jobs?: (
                | {
                      /** @description Name of the job */
                      name?: string;
                      /** @description The time at which the job was created */
                      creation_time?: string;
                      /**
                       * @description Mongo ID of the object
                       * @example 60d31793d5f1fb7e6e3c1a4c
                       */
                      id?: string;
                      /** @description Identifier of the user who submitted the job */
                      author?: string;
                      /** @description Information detailing the cancellation status of the job */
                      cancellation_info?: {
                          /** @description whether the job can be cancelled after startup */
                          cancellable?: boolean | null;
                          /** @description whether the job is cancelled */
                          is_cancelled?: boolean | null;
                          /** @description The user UID who requested the cancellation */
                          user_uid?: string | null;
                          /**
                           * Format: date-time
                           * @description The time of cancellation
                           */
                          cancel_time?: string | null;
                      };
                      /** @description Progress details for each step of the job */
                      steps?: {
                          /** @description Status message */
                          message?: string | null;
                          /** @description The index of the step within the job */
                          index?: number;
                          /**
                           * Format: float
                           * @description Step progress from 0 to 100
                           */
                          progress?: number;
                          /** @description Step state */
                          state?: string;
                          /** @description Step name */
                          step_name?: string;
                          /**
                           * Format: float
                           * @description Step duration in seconds
                           */
                          duration?: number | null;
                          /** @description Step warning message */
                          warning?: string | null;
                      }[];
                      /**
                       * Format: date-time
                       * @description Start time of the job
                       */
                      start_time?: string | null;
                      /**
                       * Format: date-time
                       * @description End time of the job
                       */
                      end_time?: string | null;
                      /** @description The state of the job */
                      state?: string;
                      /**
                       * @description Type of the job.
                       * @enum {string}
                       */
                      type?: 'train';
                      /**
                       * Metadata of train job
                       * @description Additional information associated with the train job
                       */
                      metadata?: {
                          /** @description Information about the task associated with the job, if any */
                          task?: {
                              /** @description Name of the task */
                              name?: string;
                              /** @description Identifier of the model template used by the task */
                              model_template_id?: string;
                              /** @description Neural network architecture used for the model */
                              model_architecture?: string;
                              /**
                               * @description Mongo ID of the object
                               * @example 60d31793d5f1fb7e6e3c1a4c
                               */
                              dataset_storage_id?: string;
                              /**
                               * @description Mongo ID of the object
                               * @example 60d31793d5f1fb7e6e3c1a4c
                               */
                              task_id?: string;
                          };
                          /** @description Information about the project associated with the job */
                          project?: {
                              /**
                               * @description Mongo ID of the object
                               * @example 60d31793d5f1fb7e6e3c1a4c
                               */
                              id?: string;
                              /** @description Name of the project */
                              name?: string;
                          };
                          /** @description Information about the trained model */
                          trained_model?: {
                              /**
                               * @description Mongo ID of the object
                               * @example 60d31793d5f1fb7e6e3c1a4c
                               */
                              model_storage_id?: string;
                              /**
                               * @description Mongo ID of the object
                               * @example 60d31793d5f1fb7e6e3c1a4c
                               */
                              model_id?: string;
                              /** @description Whether the model became the active one after training */
                              model_activated?: boolean;
                          };
                      };
                  }
                | {
                      /** @description Name of the job */
                      name?: string;
                      /** @description The time at which the job was created */
                      creation_time?: string;
                      /**
                       * @description Mongo ID of the object
                       * @example 60d31793d5f1fb7e6e3c1a4c
                       */
                      id?: string;
                      /** @description Identifier of the user who submitted the job */
                      author?: string;
                      /** @description Information detailing the cancellation status of the job */
                      cancellation_info?: {
                          /** @description whether the job can be cancelled after startup */
                          cancellable?: boolean | null;
                          /** @description whether the job is cancelled */
                          is_cancelled?: boolean | null;
                          /** @description The user UID who requested the cancellation */
                          user_uid?: string | null;
                          /**
                           * Format: date-time
                           * @description The time of cancellation
                           */
                          cancel_time?: string | null;
                      };
                      /** @description Progress details for each step of the job */
                      steps?: {
                          /** @description Status message */
                          message?: string | null;
                          /** @description The index of the step within the job */
                          index?: number;
                          /**
                           * Format: float
                           * @description Step progress from 0 to 100
                           */
                          progress?: number;
                          /** @description Step state */
                          state?: string;
                          /** @description Step name */
                          step_name?: string;
                          /**
                           * Format: float
                           * @description Step duration in seconds
                           */
                          duration?: number | null;
                          /** @description Step warning message */
                          warning?: string | null;
                      }[];
                      /**
                       * Format: date-time
                       * @description Start time of the job
                       */
                      start_time?: string | null;
                      /**
                       * Format: date-time
                       * @description End time of the job
                       */
                      end_time?: string | null;
                      /** @description The state of the job */
                      state?: string;
                      /**
                       * @description Type of the job.
                       * @enum {string}
                       */
                      type?: 'test';
                      /**
                       * Metadata of train/optimize/test job
                       * @description Additional information associated with the train/optimize/test job
                       */
                      metadata?: {
                          /** @description Information about the task associated with the job, if any */
                          task?: {
                              /** @description Name of the task */
                              name?: string;
                              /** @description Identifier of the model template used by the task */
                              model_template_id?: string;
                              /** @description Neural network architecture used for the model */
                              model_architecture?: string;
                              /**
                               * @description Mongo ID of the object
                               * @example 60d31793d5f1fb7e6e3c1a4c
                               */
                              dataset_storage_id?: string;
                              /**
                               * @description Mongo ID of the object
                               * @example 60d31793d5f1fb7e6e3c1a4c
                               */
                              task_id?: string;
                          };
                          /** @description Information about the test associated with the job, if any */
                          test?: {
                              /** @description Identifier of the model template used by the task */
                              model_template_id?: string;
                              /** @description Neural network architecture used for the model */
                              model_architecture?: string;
                              model?: unknown;
                              /** @description Array of datasets */
                              datasets?: {
                                  /**
                                   * @description Mongo ID of the object
                                   * @example 60d31793d5f1fb7e6e3c1a4c
                                   */
                                  id?: string;
                                  /** @description boolean showing whether the dataset is deleted */
                                  is_deleted?: boolean;
                                  /** @description Name of the dataset */
                                  name?: string;
                                  /**
                                   * Format: int32
                                   * @description Number of images in the dataset
                                   */
                                  n_images?: number;
                                  /**
                                   * Format: int32
                                   * @description Number of frames in the dataset
                                   */
                                  n_frames?: number;
                                  /**
                                   * Format: int32
                                   * @description Number of samples in the dataset
                                   */
                                  n_samples?: number;
                              }[];
                          };
                          /** @description Information about the project associated with the job */
                          project?: {
                              /**
                               * @description Mongo ID of the object
                               * @example 60d31793d5f1fb7e6e3c1a4c
                               */
                              id?: string;
                              /** @description Name of the project */
                              name?: string;
                          };
                      };
                  }
                | {
                      /** @description Name of the job */
                      name?: string;
                      /** @description The time at which the job was created */
                      creation_time?: string;
                      /**
                       * @description Mongo ID of the object
                       * @example 60d31793d5f1fb7e6e3c1a4c
                       */
                      id?: string;
                      /** @description Identifier of the user who submitted the job */
                      author?: string;
                      /** @description Information detailing the cancellation status of the job */
                      cancellation_info?: {
                          /** @description whether the job can be cancelled after startup */
                          cancellable?: boolean | null;
                          /** @description whether the job is cancelled */
                          is_cancelled?: boolean | null;
                          /** @description The user UID who requested the cancellation */
                          user_uid?: string | null;
                          /**
                           * Format: date-time
                           * @description The time of cancellation
                           */
                          cancel_time?: string | null;
                      };
                      /** @description Progress details for each step of the job */
                      steps?: {
                          /** @description Status message */
                          message?: string | null;
                          /** @description The index of the step within the job */
                          index?: number;
                          /**
                           * Format: float
                           * @description Step progress from 0 to 100
                           */
                          progress?: number;
                          /** @description Step state */
                          state?: string;
                          /** @description Step name */
                          step_name?: string;
                          /**
                           * Format: float
                           * @description Step duration in seconds
                           */
                          duration?: number | null;
                          /** @description Step warning message */
                          warning?: string | null;
                      }[];
                      /**
                       * Format: date-time
                       * @description Start time of the job
                       */
                      start_time?: string | null;
                      /**
                       * Format: date-time
                       * @description End time of the job
                       */
                      end_time?: string | null;
                      /** @description The state of the job */
                      state?: string;
                      /**
                       * @description Type of the job.
                       * @enum {string}
                       */
                      type?: 'optimize_pot';
                      /**
                       * Metadata of optimize job
                       * @description Additional information associated with the optimize job
                       */
                      metadata?: {
                          /** @description Information about the task associated with the job, if any */
                          task?: {
                              /** @description Name of the task */
                              name?: string;
                              /** @description Identifier of the model template used by the task */
                              model_template_id?: string;
                              /** @description Neural network architecture used for the model */
                              model_architecture?: string;
                              /**
                               * @description Mongo ID of the object
                               * @example 60d31793d5f1fb7e6e3c1a4c
                               */
                              dataset_storage_id?: string;
                              /**
                               * @description Mongo ID of the object
                               * @example 60d31793d5f1fb7e6e3c1a4c
                               */
                              task_id?: string;
                          };
                          /** @description Information about the project associated with the job */
                          project?: {
                              /**
                               * @description Mongo ID of the object
                               * @example 60d31793d5f1fb7e6e3c1a4c
                               */
                              id?: string;
                              /** @description Name of the project */
                              name?: string;
                          };
                          /**
                           * @description Mongo ID of the object
                           * @example 60d31793d5f1fb7e6e3c1a4c
                           */
                          model_storage_id?: string;
                          /**
                           * @description Type of optimization
                           * @enum {string}
                           */
                          optimization_type?: 'POT';
                          /**
                           * @description Mongo ID of the object
                           * @example 60d31793d5f1fb7e6e3c1a4c
                           */
                          base_model_id?: string;
                          /**
                           * @description Mongo ID of the object
                           * @example 60d31793d5f1fb7e6e3c1a4c
                           */
                          optimized_model_id?: string;
                      };
                  }
                | {
                      /** @description Name of the job */
                      name?: string;
                      /** @description The time at which the job was created */
                      creation_time?: string;
                      /**
                       * @description Mongo ID of the object
                       * @example 60d31793d5f1fb7e6e3c1a4c
                       */
                      id?: string;
                      /** @description Identifier of the user who submitted the job */
                      author?: string;
                      /** @description Information detailing the cancellation status of the job */
                      cancellation_info?: {
                          /** @description whether the job can be cancelled after startup */
                          cancellable?: boolean | null;
                          /** @description whether the job is cancelled */
                          is_cancelled?: boolean | null;
                          /** @description The user UID who requested the cancellation */
                          user_uid?: string | null;
                          /**
                           * Format: date-time
                           * @description The time of cancellation
                           */
                          cancel_time?: string | null;
                      };
                      /** @description Progress details for each step of the job */
                      steps?: {
                          /** @description Status message */
                          message?: string | null;
                          /** @description The index of the step within the job */
                          index?: number;
                          /**
                           * Format: float
                           * @description Step progress from 0 to 100
                           */
                          progress?: number;
                          /** @description Step state */
                          state?: string;
                          /** @description Step name */
                          step_name?: string;
                          /**
                           * Format: float
                           * @description Step duration in seconds
                           */
                          duration?: number | null;
                          /** @description Step warning message */
                          warning?: string | null;
                      }[];
                      /**
                       * Format: date-time
                       * @description Start time of the job
                       */
                      start_time?: string | null;
                      /**
                       * Format: date-time
                       * @description End time of the job
                       */
                      end_time?: string | null;
                      /** @description The state of the job */
                      state?: string;
                      /**
                       * @description Type of the job.
                       * @enum {string}
                       */
                      type?: 'prepare_import_to_new_project';
                      /**
                       * Metadata of `prepare_import_to_new_project` job
                       * @description Supported project types and warnings
                       */
                      metadata?: {
                          /** @description ID of the uploaded dataset file to be imported */
                          file_id?: string;
                          /** @description Warnings to import dataset to specific domain */
                          warnings?: {
                              /**
                               * @description Type of the warning
                               * @enum {string}
                               */
                              type: 'error' | 'warning';
                              /**
                               * @description Name of the warning
                               * @example Missing expected annotation type for classification domain
                               */
                              name: string;
                              /** @description Detailed description of the warning */
                              description: string;
                              /** @description How to handle the warning */
                              resolve_strategy?: string;
                              /**
                               * Format: int32
                               * @description Number of affected images
                               */
                              affected_images?: number;
                          }[];
                          /** @description Supported project types and corresponding labels */
                          supported_project_types?: {
                              /**
                               * @description Project type name
                               * @enum {string}
                               */
                              project_type:
                                  | 'classification'
                                  | 'classification_hierarchical'
                                  | 'detection'
                                  | 'segmentation'
                                  | 'instance_segmentation'
                                  | 'anomaly'
                                  | 'detection_oriented'
                                  | 'detection_classification'
                                  | 'detection_segmentation'
                                  | 'keypoint_detection';
                              pipeline: {
                                  connections: {
                                      /** @description Source task name */
                                      from: string;
                                      /** @description Target task name */
                                      to: string;
                                  }[];
                                  tasks: {
                                      /** @description Task name */
                                      title: string;
                                      /**
                                       * @description OTX Task type name in lowercase
                                       * @enum {string}
                                       */
                                      task_type:
                                          | 'dataset'
                                          | 'classification'
                                          | 'segmentation'
                                          | 'detection'
                                          | 'crop'
                                          | 'instance_segmentation'
                                          | 'keypoint_detection'
                                          | 'anomaly'
                                          | 'rotated_detection';
                                      labels: {
                                          /** @description Label name */
                                          name: string;
                                          /** @description Label group name */
                                          group?: string;
                                          /** @description Label parent name */
                                          parent?: string;
                                      }[];
                                  }[];
                              };
                          }[];
                      };
                  }
                | {
                      /** @description Name of the job */
                      name?: string;
                      /** @description The time at which the job was created */
                      creation_time?: string;
                      /**
                       * @description Mongo ID of the object
                       * @example 60d31793d5f1fb7e6e3c1a4c
                       */
                      id?: string;
                      /** @description Identifier of the user who submitted the job */
                      author?: string;
                      /** @description Information detailing the cancellation status of the job */
                      cancellation_info?: {
                          /** @description whether the job can be cancelled after startup */
                          cancellable?: boolean | null;
                          /** @description whether the job is cancelled */
                          is_cancelled?: boolean | null;
                          /** @description The user UID who requested the cancellation */
                          user_uid?: string | null;
                          /**
                           * Format: date-time
                           * @description The time of cancellation
                           */
                          cancel_time?: string | null;
                      };
                      /** @description Progress details for each step of the job */
                      steps?: {
                          /** @description Status message */
                          message?: string | null;
                          /** @description The index of the step within the job */
                          index?: number;
                          /**
                           * Format: float
                           * @description Step progress from 0 to 100
                           */
                          progress?: number;
                          /** @description Step state */
                          state?: string;
                          /** @description Step name */
                          step_name?: string;
                          /**
                           * Format: float
                           * @description Step duration in seconds
                           */
                          duration?: number | null;
                          /** @description Step warning message */
                          warning?: string | null;
                      }[];
                      /**
                       * Format: date-time
                       * @description Start time of the job
                       */
                      start_time?: string | null;
                      /**
                       * Format: date-time
                       * @description End time of the job
                       */
                      end_time?: string | null;
                      /** @description The state of the job */
                      state?: string;
                      /**
                       * @description Type of the job.
                       * @enum {string}
                       */
                      type?: 'perform_import_to_new_project';
                      /**
                       * Metadata of `perform_import_to_new_project` job
                       * @description Created project ID
                       */
                      metadata?: {
                          /** @description ID of the uploaded dataset file to be imported */
                          file_id?: string;
                          /** @description Information about the project to create */
                          project?: {
                              id?: string;
                              name?: string;
                          };
                          /**
                           * @description Mongo ID of the object
                           * @example 60d31793d5f1fb7e6e3c1a4c
                           */
                          project_id?: string;
                      };
                  }
                | {
                      /** @description Name of the job */
                      name?: string;
                      /** @description The time at which the job was created */
                      creation_time?: string;
                      /**
                       * @description Mongo ID of the object
                       * @example 60d31793d5f1fb7e6e3c1a4c
                       */
                      id?: string;
                      /** @description Identifier of the user who submitted the job */
                      author?: string;
                      /** @description Information detailing the cancellation status of the job */
                      cancellation_info?: {
                          /** @description whether the job can be cancelled after startup */
                          cancellable?: boolean | null;
                          /** @description whether the job is cancelled */
                          is_cancelled?: boolean | null;
                          /** @description The user UID who requested the cancellation */
                          user_uid?: string | null;
                          /**
                           * Format: date-time
                           * @description The time of cancellation
                           */
                          cancel_time?: string | null;
                      };
                      /** @description Progress details for each step of the job */
                      steps?: {
                          /** @description Status message */
                          message?: string | null;
                          /** @description The index of the step within the job */
                          index?: number;
                          /**
                           * Format: float
                           * @description Step progress from 0 to 100
                           */
                          progress?: number;
                          /** @description Step state */
                          state?: string;
                          /** @description Step name */
                          step_name?: string;
                          /**
                           * Format: float
                           * @description Step duration in seconds
                           */
                          duration?: number | null;
                          /** @description Step warning message */
                          warning?: string | null;
                      }[];
                      /**
                       * Format: date-time
                       * @description Start time of the job
                       */
                      start_time?: string | null;
                      /**
                       * Format: date-time
                       * @description End time of the job
                       */
                      end_time?: string | null;
                      /** @description The state of the job */
                      state?: string;
                      /**
                       * @description Type of the job.
                       * @enum {string}
                       */
                      type?: 'prepare_import_to_existing_project';
                      /**
                       * Metadata of `prepare_import_to_existing_project` job
                       * @description Labels in the dataset and warnings
                       */
                      metadata?: {
                          /** @description ID of the uploaded dataset file to be imported */
                          file_id?: string;
                          /** @description Information about the project where the dataset is imported */
                          project?: {
                              /** @description ID of the project */
                              id?: string;
                              /** @description Name of the project */
                              name?: string;
                              /**
                               * @description Type name of the project
                               * @enum {string}
                               */
                              type?:
                                  | 'classification'
                                  | 'classification_hierarchical'
                                  | 'detection'
                                  | 'segmentation'
                                  | 'instance_segmentation'
                                  | 'anomaly'
                                  | 'detection_oriented'
                                  | 'detection_classification'
                                  | 'detection_segmentation'
                                  | 'keypoint_detection';
                          };
                          /** @description Warnings to import dataset to specific domain */
                          warnings?: {
                              /**
                               * @description Type of the warning
                               * @enum {string}
                               */
                              type: 'error' | 'warning';
                              /**
                               * @description Name of the warning
                               * @example Missing expected annotation type for classification domain
                               */
                              name: string;
                              /** @description Detailed description of the warning */
                              description: string;
                              /** @description How to handle the warning */
                              resolve_strategy?: string;
                              /**
                               * Format: int32
                               * @description Number of affected images
                               */
                              affected_images?: number;
                          }[];
                          /** @description Label names in the dataset */
                          labels?: string[];
                      };
                  }
                | {
                      /** @description Name of the job */
                      name?: string;
                      /** @description The time at which the job was created */
                      creation_time?: string;
                      /**
                       * @description Mongo ID of the object
                       * @example 60d31793d5f1fb7e6e3c1a4c
                       */
                      id?: string;
                      /** @description Identifier of the user who submitted the job */
                      author?: string;
                      /** @description Information detailing the cancellation status of the job */
                      cancellation_info?: {
                          /** @description whether the job can be cancelled after startup */
                          cancellable?: boolean | null;
                          /** @description whether the job is cancelled */
                          is_cancelled?: boolean | null;
                          /** @description The user UID who requested the cancellation */
                          user_uid?: string | null;
                          /**
                           * Format: date-time
                           * @description The time of cancellation
                           */
                          cancel_time?: string | null;
                      };
                      /** @description Progress details for each step of the job */
                      steps?: {
                          /** @description Status message */
                          message?: string | null;
                          /** @description The index of the step within the job */
                          index?: number;
                          /**
                           * Format: float
                           * @description Step progress from 0 to 100
                           */
                          progress?: number;
                          /** @description Step state */
                          state?: string;
                          /** @description Step name */
                          step_name?: string;
                          /**
                           * Format: float
                           * @description Step duration in seconds
                           */
                          duration?: number | null;
                          /** @description Step warning message */
                          warning?: string | null;
                      }[];
                      /**
                       * Format: date-time
                       * @description Start time of the job
                       */
                      start_time?: string | null;
                      /**
                       * Format: date-time
                       * @description End time of the job
                       */
                      end_time?: string | null;
                      /** @description The state of the job */
                      state?: string;
                      /**
                       * @description Type of the job.
                       * @enum {string}
                       */
                      type?: 'perform_import_to_existing_project';
                      /**
                       * Metadata of `perform_import_to_existing_project` job
                       * @description Imported dataset information
                       */
                      metadata?: {
                          /** @description ID of the uploaded dataset file to be imported */
                          file_id?: string;
                          /** @description Information about the project where the dataset is imported */
                          project?: {
                              /** @description ID of the project */
                              id?: string;
                              /** @description Name of the project */
                              name?: string;
                              /**
                               * @description Type name of the project
                               * @enum {string}
                               */
                              type?:
                                  | 'classification'
                                  | 'classification_hierarchical'
                                  | 'detection'
                                  | 'segmentation'
                                  | 'instance_segmentation'
                                  | 'anomaly'
                                  | 'detection_oriented'
                                  | 'detection_classification'
                                  | 'detection_segmentation'
                                  | 'keypoint_detection';
                          };
                          /** @description The dataset information for importing the uploaded dataset file */
                          dataset?: {
                              /**
                               * @description Mongo ID of the object
                               * @example 60d31793d5f1fb7e6e3c1a4c
                               */
                              id?: string;
                              /** @description Name of the dataset storage */
                              name?: string;
                              /** @description Whether the dataset will be used for training or not */
                              use_for_training?: boolean;
                              /**
                               * @description The time at which the dataset was created
                               * @example 2024-03-05T06:34:32.332000+00:00
                               */
                              creation_time?: string;
                          };
                      };
                  }
                | {
                      /** @description Name of the job */
                      name?: string;
                      /** @description The time at which the job was created */
                      creation_time?: string;
                      /**
                       * @description Mongo ID of the object
                       * @example 60d31793d5f1fb7e6e3c1a4c
                       */
                      id?: string;
                      /** @description Identifier of the user who submitted the job */
                      author?: string;
                      /** @description Information detailing the cancellation status of the job */
                      cancellation_info?: {
                          /** @description whether the job can be cancelled after startup */
                          cancellable?: boolean | null;
                          /** @description whether the job is cancelled */
                          is_cancelled?: boolean | null;
                          /** @description The user UID who requested the cancellation */
                          user_uid?: string | null;
                          /**
                           * Format: date-time
                           * @description The time of cancellation
                           */
                          cancel_time?: string | null;
                      };
                      /** @description Progress details for each step of the job */
                      steps?: {
                          /** @description Status message */
                          message?: string | null;
                          /** @description The index of the step within the job */
                          index?: number;
                          /**
                           * Format: float
                           * @description Step progress from 0 to 100
                           */
                          progress?: number;
                          /** @description Step state */
                          state?: string;
                          /** @description Step name */
                          step_name?: string;
                          /**
                           * Format: float
                           * @description Step duration in seconds
                           */
                          duration?: number | null;
                          /** @description Step warning message */
                          warning?: string | null;
                      }[];
                      /**
                       * Format: date-time
                       * @description Start time of the job
                       */
                      start_time?: string | null;
                      /**
                       * Format: date-time
                       * @description End time of the job
                       */
                      end_time?: string | null;
                      /** @description The state of the job */
                      state?: string;
                      /**
                       * @description Type of the job.
                       * @enum {string}
                       */
                      type?: 'export_dataset';
                      /**
                       * Metadata of `export_dataset` job
                       * @description Information about the exported dataset
                       */
                      metadata?: {
                          /** @description Information about the project to export */
                          project?: {
                              /** @description ID of the project */
                              id?: string;
                              /** @description Name of the project */
                              name?: string;
                              /**
                               * @description Type name of the project
                               * @enum {string}
                               */
                              type?:
                                  | 'classification'
                                  | 'classification_hierarchical'
                                  | 'detection'
                                  | 'segmentation'
                                  | 'instance_segmentation'
                                  | 'anomaly'
                                  | 'detection_oriented'
                                  | 'detection_classification'
                                  | 'detection_segmentation'
                                  | 'keypoint_detection';
                          };
                          /** @description Thd dataset information to be exported */
                          dataset?: {
                              /** @description ID of the dataset storage */
                              id?: string;
                              /** @description Name of the dataset storage */
                              name?: string;
                          };
                          /**
                           * @description Format of the dataset to be exported
                           * @enum {string}
                           */
                          export_format?: 'voc' | 'coco' | 'yolo' | 'datumaro';
                          /** @description URL to download the prepared dataset */
                          download_url?: string;
                      };
                  }
            )[];
            /** @description Jobs count information for each job state */
            jobs_count?: {
                /** @description Number of scheduled jobs */
                n_scheduled_jobs?: number;
                /** @description Number of running jobs */
                n_running_jobs?: number;
                /** @description Number of finished jobs */
                n_finished_jobs?: number;
                /** @description Number of failed jobs */
                n_failed_jobs?: number;
                /** @description Number of cancelled jobs */
                n_cancelled_jobs?: number;
            };
            /** @description URL to the next jobs page */
            next_page?: string;
        };
        'project-5': {
            /** @description ID of the project */
            id?: string;
            /** @description Name of the project */
            name?: string;
        };
        /**
         * Metadata of `export_project` job
         * @description Information about the project export operation
         */
        export_project_metadata: {
            /** @description Information about the project being export */
            project?: {
                /** @description ID of the project */
                id?: string;
                /** @description Name of the project */
                name?: string;
            };
            /** @description URL to download the exported project archive */
            download_url?: string;
        };
        /** export_project job */
        job_export_project: {
            /** @description Name of the job */
            name?: string;
            /** @description The time at which the job was created */
            creation_time?: string;
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            id?: string;
            /** @description Identifier of the user who submitted the job */
            author?: string;
            /** @description Information detailing the cancellation status of the job */
            cancellation_info?: {
                /** @description whether the job can be cancelled after startup */
                cancellable?: boolean | null;
                /** @description whether the job is cancelled */
                is_cancelled?: boolean | null;
                /** @description The user UID who requested the cancellation */
                user_uid?: string | null;
                /**
                 * Format: date-time
                 * @description The time of cancellation
                 */
                cancel_time?: string | null;
            };
            /** @description Progress details for each step of the job */
            steps?: {
                /** @description Status message */
                message?: string | null;
                /** @description The index of the step within the job */
                index?: number;
                /**
                 * Format: float
                 * @description Step progress from 0 to 100
                 */
                progress?: number;
                /** @description Step state */
                state?: string;
                /** @description Step name */
                step_name?: string;
                /**
                 * Format: float
                 * @description Step duration in seconds
                 */
                duration?: number | null;
                /** @description Step warning message */
                warning?: string | null;
            }[];
            /**
             * Format: date-time
             * @description Start time of the job
             */
            start_time?: string | null;
            /**
             * Format: date-time
             * @description End time of the job
             */
            end_time?: string | null;
            /** @description The state of the job */
            state?: string;
            /**
             * @description Type of the job.
             * @enum {string}
             */
            type?: 'export_project';
            /**
             * Metadata of `export_project` job
             * @description Information about the project export operation
             */
            metadata?: {
                /** @description Information about the project being export */
                project?: {
                    /** @description ID of the project */
                    id?: string;
                    /** @description Name of the project */
                    name?: string;
                };
                /** @description URL to download the exported project archive */
                download_url?: string;
            };
        };
        /**
         * Import project parameters
         * @description Parameters of the import request
         */
        import_parameters: {
            /** @description ID of the uploaded project zip archive */
            file_id?: string;
        };
        /**
         * Metadata of `import_project` job
         * @description Information about the project import operation
         */
        import_project_metadata: {
            /** @description Information about the imported project */
            project?: {
                /** @description ID of the project */
                id?: string;
                /** @description Name of the project */
                name?: string;
            };
            /**
             * Import project parameters
             * @description Parameters of the import request
             */
            parameters?: {
                /** @description ID of the uploaded project zip archive */
                file_id?: string;
            };
        };
        /** import_project job */
        job_import_project: {
            /** @description Name of the job */
            name?: string;
            /** @description The time at which the job was created */
            creation_time?: string;
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            id?: string;
            /** @description Identifier of the user who submitted the job */
            author?: string;
            /** @description Information detailing the cancellation status of the job */
            cancellation_info?: {
                /** @description whether the job can be cancelled after startup */
                cancellable?: boolean | null;
                /** @description whether the job is cancelled */
                is_cancelled?: boolean | null;
                /** @description The user UID who requested the cancellation */
                user_uid?: string | null;
                /**
                 * Format: date-time
                 * @description The time of cancellation
                 */
                cancel_time?: string | null;
            };
            /** @description Progress details for each step of the job */
            steps?: {
                /** @description Status message */
                message?: string | null;
                /** @description The index of the step within the job */
                index?: number;
                /**
                 * Format: float
                 * @description Step progress from 0 to 100
                 */
                progress?: number;
                /** @description Step state */
                state?: string;
                /** @description Step name */
                step_name?: string;
                /**
                 * Format: float
                 * @description Step duration in seconds
                 */
                duration?: number | null;
                /** @description Step warning message */
                warning?: string | null;
            }[];
            /**
             * Format: date-time
             * @description Start time of the job
             */
            start_time?: string | null;
            /**
             * Format: date-time
             * @description End time of the job
             */
            end_time?: string | null;
            /** @description The state of the job */
            state?: string;
            /**
             * @description Type of the job.
             * @enum {string}
             */
            type?: 'import_project';
            /**
             * Metadata of `import_project` job
             * @description Information about the project import operation
             */
            metadata?: {
                /** @description Information about the imported project */
                project?: {
                    /** @description ID of the project */
                    id?: string;
                    /** @description Name of the project */
                    name?: string;
                };
                /**
                 * Import project parameters
                 * @description Parameters of the import request
                 */
                parameters?: {
                    /** @description ID of the uploaded project zip archive */
                    file_id?: string;
                };
            };
        };
        /** Component entity identifier */
        component_entity_identifier: {
            workspace_id?: string;
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            project_id?: string;
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            task_id?: string;
            /** @description Describes the component to which the configurable parameters apply */
            component?: string;
            /**
             * @description Describes the type of the configuration. Set to COMPONENT_PARAMETERS for a configuration that relates to a component.
             * @enum {string}
             */
            type?: 'COMPONENT_PARAMETERS';
        };
        /** Model entity identifier */
        model_entity_identifier: {
            workspace_id?: string;
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            model_storage_id?: string;
            /**
             * @description Describes the type of the configurable parameters. For hyper parameters, type is set to HYPER_PARAMETERS.
             * @enum {string}
             */
            type?: 'HYPER_PARAMETERS';
        };
        /** Hyper parameter group entity identifier */
        'hyper_parameter_group_entity_identifier-2': {
            workspace_id?: string;
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            model_storage_id?: string;
            /** @description Name of the hyper parameter group */
            group_name?: string;
            /**
             * @description Describes the type of the component. For hyper parameter groups, type is always set to HYPER_PARAMETER_GROUP
             * @enum {string}
             */
            type?: 'HYPER_PARAMETER_GROUP';
        };
        entity_identifier:
            | {
                  workspace_id?: string;
                  /**
                   * @description Mongo ID of the object
                   * @example 60d31793d5f1fb7e6e3c1a4c
                   */
                  project_id?: string;
                  /**
                   * @description Mongo ID of the object
                   * @example 60d31793d5f1fb7e6e3c1a4c
                   */
                  task_id?: string;
                  /** @description Describes the component to which the configurable parameters apply */
                  component?: string;
                  /**
                   * @description Describes the type of the configuration. Set to COMPONENT_PARAMETERS for a configuration that relates to a component.
                   * @enum {string}
                   */
                  type?: 'COMPONENT_PARAMETERS';
              }
            | {
                  workspace_id?: string;
                  /**
                   * @description Mongo ID of the object
                   * @example 60d31793d5f1fb7e6e3c1a4c
                   */
                  model_storage_id?: string;
                  /**
                   * @description Describes the type of the configurable parameters. For hyper parameters, type is set to HYPER_PARAMETERS.
                   * @enum {string}
                   */
                  type?: 'HYPER_PARAMETERS';
              }
            | {
                  workspace_id?: string;
                  /**
                   * @description Mongo ID of the object
                   * @example 60d31793d5f1fb7e6e3c1a4c
                   */
                  model_storage_id?: string;
                  /** @description Name of the hyper parameter group */
                  group_name?: string;
                  /**
                   * @description Describes the type of the component. For hyper parameter groups, type is always set to HYPER_PARAMETER_GROUP
                   * @enum {string}
                   */
                  type?: 'HYPER_PARAMETER_GROUP';
              };
        /** Configurable parameter */
        generic_parameter: {
            /** @description User friendly title for the parameter. */
            header?: string;
            /** @description User friendly description for what the parameter does. */
            description?: string;
            /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
            warning?: unknown;
            /** @description Value that this parameter currently takes. */
            value?: string | number | boolean;
            /** @description Default value that should be set for this parameter. */
            default_value?: string | number | boolean;
            /** @description Name to identify the parameter by in the system. */
            name?: string;
            /**
             * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range.
             * @enum {string}
             */
            template_type?: 'selectable' | 'input';
            /**
             * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string.
             * @enum {string}
             */
            data_type?: 'float' | 'integer' | 'boolean' | 'string';
            /** @description List of values that this parameter can take. Only used for selectable string and selectable float parameters */
            options?: (number | string)[];
            /**
             * Format: float
             * @description Minimum value that can be set for this parameter. Only used for numeric parameters.
             */
            min_value?: number;
            /**
             * Format: float
             * @description Minimum value that can be set for this parameter. Only used for numeric parameters.
             */
            max_value?: number;
            /** @description Not implemented at this moment */
            ui_rules?: Record<string, never>;
            /** @description Not implemented at this moment. */
            editable?: boolean;
        };
        generic_group: {
            /**
             * @description Defines the parameter group
             * @example Learning Parameters
             */
            header?: string;
            /**
             * @description Description of the parameter group
             * @example Configuration to control training behaviour
             */
            description?: string;
            /** @enum {string} */
            type?: 'PARAMETER_GROUP';
            /** @description Name of the parameter group */
            name?: string;
            parameters?: {
                /** @description User friendly title for the parameter. */
                header?: string;
                /** @description User friendly description for what the parameter does. */
                description?: string;
                /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                warning?: unknown;
                /** @description Value that this parameter currently takes. */
                value?: string | number | boolean;
                /** @description Default value that should be set for this parameter. */
                default_value?: string | number | boolean;
                /** @description Name to identify the parameter by in the system. */
                name?: string;
                /**
                 * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range.
                 * @enum {string}
                 */
                template_type?: 'selectable' | 'input';
                /**
                 * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string.
                 * @enum {string}
                 */
                data_type?: 'float' | 'integer' | 'boolean' | 'string';
                /** @description List of values that this parameter can take. Only used for selectable string and selectable float parameters */
                options?: (number | string)[];
                /**
                 * Format: float
                 * @description Minimum value that can be set for this parameter. Only used for numeric parameters.
                 */
                min_value?: number;
                /**
                 * Format: float
                 * @description Minimum value that can be set for this parameter. Only used for numeric parameters.
                 */
                max_value?: number;
                /** @description Not implemented at this moment */
                ui_rules?: Record<string, never>;
                /** @description Not implemented at this moment. */
                editable?: boolean;
            }[];
        };
        /** Configurable boolean */
        boolean: {
            /** @description User friendly title for the configurable boolean. */
            header?: string;
            /** @description User friendly description for what the boolean does. */
            description?: string;
            /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
            warning?: unknown;
            /** @description Value that this boolean currently takes. */
            value?: boolean;
            /** @description Default value that should be set for this boolean. */
            default_value?: boolean;
            /** @description Name to identify the configurable boolean by in the system. */
            name?: string;
            /**
             * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable boolean.
             * @enum {string}
             */
            template_type?: 'input';
            /**
             * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'boolean' for a configurable boolean.
             * @enum {string}
             */
            data_type?: 'boolean';
            /** @description Not implemented at this moment */
            ui_rules?: Record<string, never>;
            /** @description Not implemented at this moment. */
            editable?: boolean;
        };
        /** Configurable float */
        float: {
            /** @description User friendly title for the float. */
            header?: string;
            /** @description User friendly description for what the float does. */
            description?: string;
            /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
            warning?: unknown;
            /**
             * Format: float
             * @description Value that this configurable float currently takes.
             */
            value?: number;
            /**
             * Format: float
             * @description Default value that should be set for this float.
             */
            default_value?: number;
            /** @description Name to identify the configurable float by in the system. */
            name?: string;
            /**
             * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable float.
             * @enum {string}
             */
            template_type?: 'input';
            /**
             * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a configurable float.
             * @enum {string}
             */
            data_type?: 'float';
            /**
             * Format: float
             * @description Minimum value that can be set for this parameter.
             */
            min_value?: number;
            /**
             * Format: float
             * @description Minimum value that can be set for this parameter.
             */
            max_value?: number;
            /** @description Not implemented at this moment */
            ui_rules?: Record<string, never>;
            /** @description Not implemented at this moment. */
            editable?: boolean;
        };
        /** Configurable integer */
        integer: {
            /** @description User friendly title for the integer. */
            header?: string;
            /** @description User friendly description for what the integer does. */
            description?: string;
            /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
            warning?: unknown;
            /** @description Value that this configurable integer currently takes. */
            value?: number;
            /** @description Default value that should be set for this integer. */
            default_value?: number;
            /** @description Name to identify the configurable integer by in the system. */
            name?: string;
            /**
             * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable integer.
             * @enum {string}
             */
            template_type?: 'input';
            /**
             * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'integer' for a configurable integer.
             * @enum {string}
             */
            data_type?: 'integer';
            /** @description Minimum value that can be set for this parameter. */
            min_value?: number;
            /** @description Minimum value that can be set for this parameter. */
            max_value?: number;
            /** @description Not implemented at this moment */
            ui_rules?: Record<string, never>;
            /** @description Not implemented at this moment. */
            editable?: boolean;
        };
        /** Selectable string */
        string_selectable: {
            /** @description User friendly title for the selectable string. */
            header?: string;
            /** @description User friendly description for what the selectable string parameter does. */
            description?: string;
            /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
            warning?: unknown;
            /** @description Value that this selectable string currently takes. */
            value?: string;
            /** @description Default value that should be set for this selectable string. */
            default_value?: string;
            /** @description Name to identify the selectable string parameter by in the system. */
            name?: string;
            /**
             * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable string parameter.
             * @enum {string}
             */
            template_type?: 'selectable';
            /**
             * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'string' for a selectable string parameter.
             * @enum {string}
             */
            data_type?: 'string';
            /** @description List of values that this selectable string can take. */
            options?: string[];
            /** @description Not implemented at this moment */
            ui_rules?: Record<string, never>;
            /** @description Not implemented at this moment. */
            editable?: boolean;
        };
        /** Selectable float */
        float_selectable: {
            /** @description User friendly title for the selectable. */
            header?: string;
            /** @description User friendly description for what the selectable parameter does. */
            description?: string;
            /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
            warning?: unknown;
            /** @description Value that this selectable currently takes. */
            value?: string;
            /** @description Default value that should be set for this selectable. */
            default_value?: string;
            /** @description Name to identify the selectable parameter by in the system. */
            name?: string;
            /**
             * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable parameter.
             * @enum {string}
             */
            template_type?: 'selectable';
            /**
             * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a selectable float.
             * @enum {string}
             */
            data_type?: 'float';
            /** @description List of values that this float selectable can take. */
            options?: number[];
            /** @description Not implemented at this moment */
            ui_rules?: Record<string, never>;
            /** @description Not implemented at this moment. */
            editable?: boolean;
        };
        /** @description Array of configurable parameters */
        parameters: (
            | {
                  /** @description User friendly title for the configurable boolean. */
                  header?: string;
                  /** @description User friendly description for what the boolean does. */
                  description?: string;
                  /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                  warning?: unknown;
                  /** @description Value that this boolean currently takes. */
                  value?: boolean;
                  /** @description Default value that should be set for this boolean. */
                  default_value?: boolean;
                  /** @description Name to identify the configurable boolean by in the system. */
                  name?: string;
                  /**
                   * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable boolean.
                   * @enum {string}
                   */
                  template_type?: 'input';
                  /**
                   * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'boolean' for a configurable boolean.
                   * @enum {string}
                   */
                  data_type?: 'boolean';
                  /** @description Not implemented at this moment */
                  ui_rules?: Record<string, never>;
                  /** @description Not implemented at this moment. */
                  editable?: boolean;
              }
            | {
                  /** @description User friendly title for the float. */
                  header?: string;
                  /** @description User friendly description for what the float does. */
                  description?: string;
                  /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                  warning?: unknown;
                  /**
                   * Format: float
                   * @description Value that this configurable float currently takes.
                   */
                  value?: number;
                  /**
                   * Format: float
                   * @description Default value that should be set for this float.
                   */
                  default_value?: number;
                  /** @description Name to identify the configurable float by in the system. */
                  name?: string;
                  /**
                   * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable float.
                   * @enum {string}
                   */
                  template_type?: 'input';
                  /**
                   * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a configurable float.
                   * @enum {string}
                   */
                  data_type?: 'float';
                  /**
                   * Format: float
                   * @description Minimum value that can be set for this parameter.
                   */
                  min_value?: number;
                  /**
                   * Format: float
                   * @description Minimum value that can be set for this parameter.
                   */
                  max_value?: number;
                  /** @description Not implemented at this moment */
                  ui_rules?: Record<string, never>;
                  /** @description Not implemented at this moment. */
                  editable?: boolean;
              }
            | {
                  /** @description User friendly title for the integer. */
                  header?: string;
                  /** @description User friendly description for what the integer does. */
                  description?: string;
                  /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                  warning?: unknown;
                  /** @description Value that this configurable integer currently takes. */
                  value?: number;
                  /** @description Default value that should be set for this integer. */
                  default_value?: number;
                  /** @description Name to identify the configurable integer by in the system. */
                  name?: string;
                  /**
                   * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable integer.
                   * @enum {string}
                   */
                  template_type?: 'input';
                  /**
                   * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'integer' for a configurable integer.
                   * @enum {string}
                   */
                  data_type?: 'integer';
                  /** @description Minimum value that can be set for this parameter. */
                  min_value?: number;
                  /** @description Minimum value that can be set for this parameter. */
                  max_value?: number;
                  /** @description Not implemented at this moment */
                  ui_rules?: Record<string, never>;
                  /** @description Not implemented at this moment. */
                  editable?: boolean;
              }
            | {
                  /** @description User friendly title for the selectable string. */
                  header?: string;
                  /** @description User friendly description for what the selectable string parameter does. */
                  description?: string;
                  /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                  warning?: unknown;
                  /** @description Value that this selectable string currently takes. */
                  value?: string;
                  /** @description Default value that should be set for this selectable string. */
                  default_value?: string;
                  /** @description Name to identify the selectable string parameter by in the system. */
                  name?: string;
                  /**
                   * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable string parameter.
                   * @enum {string}
                   */
                  template_type?: 'selectable';
                  /**
                   * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'string' for a selectable string parameter.
                   * @enum {string}
                   */
                  data_type?: 'string';
                  /** @description List of values that this selectable string can take. */
                  options?: string[];
                  /** @description Not implemented at this moment */
                  ui_rules?: Record<string, never>;
                  /** @description Not implemented at this moment. */
                  editable?: boolean;
              }
            | {
                  /** @description User friendly title for the selectable. */
                  header?: string;
                  /** @description User friendly description for what the selectable parameter does. */
                  description?: string;
                  /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                  warning?: unknown;
                  /** @description Value that this selectable currently takes. */
                  value?: string;
                  /** @description Default value that should be set for this selectable. */
                  default_value?: string;
                  /** @description Name to identify the selectable parameter by in the system. */
                  name?: string;
                  /**
                   * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable parameter.
                   * @enum {string}
                   */
                  template_type?: 'selectable';
                  /**
                   * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a selectable float.
                   * @enum {string}
                   */
                  data_type?: 'float';
                  /** @description List of values that this float selectable can take. */
                  options?: number[];
                  /** @description Not implemented at this moment */
                  ui_rules?: Record<string, never>;
                  /** @description Not implemented at this moment. */
                  editable?: boolean;
              }
        )[];
        /** Component parameters */
        component_parameters: {
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            id?: string;
            /**
             * @description Type of the configurable parameters. For component parameters the type is always 'CONFIGURABLE_PARAMETERS'.
             * @enum {string}
             */
            type?: 'CONFIGURABLE_PARAMETERS' | 'PARAMETER_GROUP';
            entity_identifier?:
                | {
                      workspace_id?: string;
                      /**
                       * @description Mongo ID of the object
                       * @example 60d31793d5f1fb7e6e3c1a4c
                       */
                      project_id?: string;
                      /**
                       * @description Mongo ID of the object
                       * @example 60d31793d5f1fb7e6e3c1a4c
                       */
                      task_id?: string;
                      /** @description Describes the component to which the configurable parameters apply */
                      component?: string;
                      /**
                       * @description Describes the type of the configuration. Set to COMPONENT_PARAMETERS for a configuration that relates to a component.
                       * @enum {string}
                       */
                      type?: 'COMPONENT_PARAMETERS';
                  }
                | {
                      workspace_id?: string;
                      /**
                       * @description Mongo ID of the object
                       * @example 60d31793d5f1fb7e6e3c1a4c
                       */
                      model_storage_id?: string;
                      /**
                       * @description Describes the type of the configurable parameters. For hyper parameters, type is set to HYPER_PARAMETERS.
                       * @enum {string}
                       */
                      type?: 'HYPER_PARAMETERS';
                  }
                | {
                      workspace_id?: string;
                      /**
                       * @description Mongo ID of the object
                       * @example 60d31793d5f1fb7e6e3c1a4c
                       */
                      model_storage_id?: string;
                      /** @description Name of the hyper parameter group */
                      group_name?: string;
                      /**
                       * @description Describes the type of the component. For hyper parameter groups, type is always set to HYPER_PARAMETER_GROUP
                       * @enum {string}
                       */
                      type?: 'HYPER_PARAMETER_GROUP';
                  };
            /**
             * @description Name of the configuration
             * @example Subset splitting
             */
            header?: string;
            /**
             * @description Description of the configuration, indicating which part of the system it controls.
             * @example These parameters control the splitting of the dataset into training, validation and test set.
             */
            description?: string;
            groups?: {
                /**
                 * @description Defines the parameter group
                 * @example Learning Parameters
                 */
                header?: string;
                /**
                 * @description Description of the parameter group
                 * @example Configuration to control training behaviour
                 */
                description?: string;
                /** @enum {string} */
                type?: 'PARAMETER_GROUP';
                /** @description Name of the parameter group */
                name?: string;
                parameters?: {
                    /** @description User friendly title for the parameter. */
                    header?: string;
                    /** @description User friendly description for what the parameter does. */
                    description?: string;
                    /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                    warning?: unknown;
                    /** @description Value that this parameter currently takes. */
                    value?: string | number | boolean;
                    /** @description Default value that should be set for this parameter. */
                    default_value?: string | number | boolean;
                    /** @description Name to identify the parameter by in the system. */
                    name?: string;
                    /**
                     * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range.
                     * @enum {string}
                     */
                    template_type?: 'selectable' | 'input';
                    /**
                     * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string.
                     * @enum {string}
                     */
                    data_type?: 'float' | 'integer' | 'boolean' | 'string';
                    /** @description List of values that this parameter can take. Only used for selectable string and selectable float parameters */
                    options?: (number | string)[];
                    /**
                     * Format: float
                     * @description Minimum value that can be set for this parameter. Only used for numeric parameters.
                     */
                    min_value?: number;
                    /**
                     * Format: float
                     * @description Minimum value that can be set for this parameter. Only used for numeric parameters.
                     */
                    max_value?: number;
                    /** @description Not implemented at this moment */
                    ui_rules?: Record<string, never>;
                    /** @description Not implemented at this moment. */
                    editable?: boolean;
                }[];
            }[];
            /** @description Array of configurable parameters */
            parameters?: (
                | {
                      /** @description User friendly title for the configurable boolean. */
                      header?: string;
                      /** @description User friendly description for what the boolean does. */
                      description?: string;
                      /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                      warning?: unknown;
                      /** @description Value that this boolean currently takes. */
                      value?: boolean;
                      /** @description Default value that should be set for this boolean. */
                      default_value?: boolean;
                      /** @description Name to identify the configurable boolean by in the system. */
                      name?: string;
                      /**
                       * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable boolean.
                       * @enum {string}
                       */
                      template_type?: 'input';
                      /**
                       * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'boolean' for a configurable boolean.
                       * @enum {string}
                       */
                      data_type?: 'boolean';
                      /** @description Not implemented at this moment */
                      ui_rules?: Record<string, never>;
                      /** @description Not implemented at this moment. */
                      editable?: boolean;
                  }
                | {
                      /** @description User friendly title for the float. */
                      header?: string;
                      /** @description User friendly description for what the float does. */
                      description?: string;
                      /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                      warning?: unknown;
                      /**
                       * Format: float
                       * @description Value that this configurable float currently takes.
                       */
                      value?: number;
                      /**
                       * Format: float
                       * @description Default value that should be set for this float.
                       */
                      default_value?: number;
                      /** @description Name to identify the configurable float by in the system. */
                      name?: string;
                      /**
                       * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable float.
                       * @enum {string}
                       */
                      template_type?: 'input';
                      /**
                       * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a configurable float.
                       * @enum {string}
                       */
                      data_type?: 'float';
                      /**
                       * Format: float
                       * @description Minimum value that can be set for this parameter.
                       */
                      min_value?: number;
                      /**
                       * Format: float
                       * @description Minimum value that can be set for this parameter.
                       */
                      max_value?: number;
                      /** @description Not implemented at this moment */
                      ui_rules?: Record<string, never>;
                      /** @description Not implemented at this moment. */
                      editable?: boolean;
                  }
                | {
                      /** @description User friendly title for the integer. */
                      header?: string;
                      /** @description User friendly description for what the integer does. */
                      description?: string;
                      /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                      warning?: unknown;
                      /** @description Value that this configurable integer currently takes. */
                      value?: number;
                      /** @description Default value that should be set for this integer. */
                      default_value?: number;
                      /** @description Name to identify the configurable integer by in the system. */
                      name?: string;
                      /**
                       * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable integer.
                       * @enum {string}
                       */
                      template_type?: 'input';
                      /**
                       * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'integer' for a configurable integer.
                       * @enum {string}
                       */
                      data_type?: 'integer';
                      /** @description Minimum value that can be set for this parameter. */
                      min_value?: number;
                      /** @description Minimum value that can be set for this parameter. */
                      max_value?: number;
                      /** @description Not implemented at this moment */
                      ui_rules?: Record<string, never>;
                      /** @description Not implemented at this moment. */
                      editable?: boolean;
                  }
                | {
                      /** @description User friendly title for the selectable string. */
                      header?: string;
                      /** @description User friendly description for what the selectable string parameter does. */
                      description?: string;
                      /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                      warning?: unknown;
                      /** @description Value that this selectable string currently takes. */
                      value?: string;
                      /** @description Default value that should be set for this selectable string. */
                      default_value?: string;
                      /** @description Name to identify the selectable string parameter by in the system. */
                      name?: string;
                      /**
                       * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable string parameter.
                       * @enum {string}
                       */
                      template_type?: 'selectable';
                      /**
                       * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'string' for a selectable string parameter.
                       * @enum {string}
                       */
                      data_type?: 'string';
                      /** @description List of values that this selectable string can take. */
                      options?: string[];
                      /** @description Not implemented at this moment */
                      ui_rules?: Record<string, never>;
                      /** @description Not implemented at this moment. */
                      editable?: boolean;
                  }
                | {
                      /** @description User friendly title for the selectable. */
                      header?: string;
                      /** @description User friendly description for what the selectable parameter does. */
                      description?: string;
                      /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                      warning?: unknown;
                      /** @description Value that this selectable currently takes. */
                      value?: string;
                      /** @description Default value that should be set for this selectable. */
                      default_value?: string;
                      /** @description Name to identify the selectable parameter by in the system. */
                      name?: string;
                      /**
                       * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable parameter.
                       * @enum {string}
                       */
                      template_type?: 'selectable';
                      /**
                       * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a selectable float.
                       * @enum {string}
                       */
                      data_type?: 'float';
                      /** @description List of values that this float selectable can take. */
                      options?: number[];
                      /** @description Not implemented at this moment */
                      ui_rules?: Record<string, never>;
                      /** @description Not implemented at this moment. */
                      editable?: boolean;
                  }
            )[];
        };
        /** Hyper parameter group */
        'hyper_parameter_group-2': {
            /** @description Name of the hyper parameter group */
            name?: string;
            /**
             * @description ID of the hyper parameter group. The first 24 characters refer to the ID of the underlying HyperParameter object. This is followed by a dash ('-') and the group number (0 to 99) of this particular hyper parameter group.
             * @example 60d31793d5f1fb7e6e3c1a4c-1
             */
            id?: string;
            /**
             * @description Type of the configurable parameters. For a hyper parameter group the type is always 'PARAMETER_GROUP'.
             * @enum {string}
             */
            type?: 'CONFIGURABLE_PARAMETERS' | 'PARAMETER_GROUP';
            entity_identifier?:
                | {
                      workspace_id?: string;
                      /**
                       * @description Mongo ID of the object
                       * @example 60d31793d5f1fb7e6e3c1a4c
                       */
                      project_id?: string;
                      /**
                       * @description Mongo ID of the object
                       * @example 60d31793d5f1fb7e6e3c1a4c
                       */
                      task_id?: string;
                      /** @description Describes the component to which the configurable parameters apply */
                      component?: string;
                      /**
                       * @description Describes the type of the configuration. Set to COMPONENT_PARAMETERS for a configuration that relates to a component.
                       * @enum {string}
                       */
                      type?: 'COMPONENT_PARAMETERS';
                  }
                | {
                      workspace_id?: string;
                      /**
                       * @description Mongo ID of the object
                       * @example 60d31793d5f1fb7e6e3c1a4c
                       */
                      model_storage_id?: string;
                      /**
                       * @description Describes the type of the configurable parameters. For hyper parameters, type is set to HYPER_PARAMETERS.
                       * @enum {string}
                       */
                      type?: 'HYPER_PARAMETERS';
                  }
                | {
                      workspace_id?: string;
                      /**
                       * @description Mongo ID of the object
                       * @example 60d31793d5f1fb7e6e3c1a4c
                       */
                      model_storage_id?: string;
                      /** @description Name of the hyper parameter group */
                      group_name?: string;
                      /**
                       * @description Describes the type of the component. For hyper parameter groups, type is always set to HYPER_PARAMETER_GROUP
                       * @enum {string}
                       */
                      type?: 'HYPER_PARAMETER_GROUP';
                  };
            /**
             * @description The name of the hyper parameter group
             * @example Learning parameters
             */
            header?: string;
            /**
             * @description Description of the hyper parameter group.
             * @example A set of parameters that control the training process.
             */
            description?: string;
            groups?: {
                /**
                 * @description Defines the parameter group
                 * @example Learning Parameters
                 */
                header?: string;
                /**
                 * @description Description of the parameter group
                 * @example Configuration to control training behaviour
                 */
                description?: string;
                /** @enum {string} */
                type?: 'PARAMETER_GROUP';
                /** @description Name of the parameter group */
                name?: string;
                parameters?: {
                    /** @description User friendly title for the parameter. */
                    header?: string;
                    /** @description User friendly description for what the parameter does. */
                    description?: string;
                    /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                    warning?: unknown;
                    /** @description Value that this parameter currently takes. */
                    value?: string | number | boolean;
                    /** @description Default value that should be set for this parameter. */
                    default_value?: string | number | boolean;
                    /** @description Name to identify the parameter by in the system. */
                    name?: string;
                    /**
                     * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range.
                     * @enum {string}
                     */
                    template_type?: 'selectable' | 'input';
                    /**
                     * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string.
                     * @enum {string}
                     */
                    data_type?: 'float' | 'integer' | 'boolean' | 'string';
                    /** @description List of values that this parameter can take. Only used for selectable string and selectable float parameters */
                    options?: (number | string)[];
                    /**
                     * Format: float
                     * @description Minimum value that can be set for this parameter. Only used for numeric parameters.
                     */
                    min_value?: number;
                    /**
                     * Format: float
                     * @description Minimum value that can be set for this parameter. Only used for numeric parameters.
                     */
                    max_value?: number;
                    /** @description Not implemented at this moment */
                    ui_rules?: Record<string, never>;
                    /** @description Not implemented at this moment. */
                    editable?: boolean;
                }[];
            }[];
            /** @description Array of configurable parameters */
            parameters?: (
                | {
                      /** @description User friendly title for the configurable boolean. */
                      header?: string;
                      /** @description User friendly description for what the boolean does. */
                      description?: string;
                      /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                      warning?: unknown;
                      /** @description Value that this boolean currently takes. */
                      value?: boolean;
                      /** @description Default value that should be set for this boolean. */
                      default_value?: boolean;
                      /** @description Name to identify the configurable boolean by in the system. */
                      name?: string;
                      /**
                       * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable boolean.
                       * @enum {string}
                       */
                      template_type?: 'input';
                      /**
                       * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'boolean' for a configurable boolean.
                       * @enum {string}
                       */
                      data_type?: 'boolean';
                      /** @description Not implemented at this moment */
                      ui_rules?: Record<string, never>;
                      /** @description Not implemented at this moment. */
                      editable?: boolean;
                  }
                | {
                      /** @description User friendly title for the float. */
                      header?: string;
                      /** @description User friendly description for what the float does. */
                      description?: string;
                      /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                      warning?: unknown;
                      /**
                       * Format: float
                       * @description Value that this configurable float currently takes.
                       */
                      value?: number;
                      /**
                       * Format: float
                       * @description Default value that should be set for this float.
                       */
                      default_value?: number;
                      /** @description Name to identify the configurable float by in the system. */
                      name?: string;
                      /**
                       * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable float.
                       * @enum {string}
                       */
                      template_type?: 'input';
                      /**
                       * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a configurable float.
                       * @enum {string}
                       */
                      data_type?: 'float';
                      /**
                       * Format: float
                       * @description Minimum value that can be set for this parameter.
                       */
                      min_value?: number;
                      /**
                       * Format: float
                       * @description Minimum value that can be set for this parameter.
                       */
                      max_value?: number;
                      /** @description Not implemented at this moment */
                      ui_rules?: Record<string, never>;
                      /** @description Not implemented at this moment. */
                      editable?: boolean;
                  }
                | {
                      /** @description User friendly title for the integer. */
                      header?: string;
                      /** @description User friendly description for what the integer does. */
                      description?: string;
                      /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                      warning?: unknown;
                      /** @description Value that this configurable integer currently takes. */
                      value?: number;
                      /** @description Default value that should be set for this integer. */
                      default_value?: number;
                      /** @description Name to identify the configurable integer by in the system. */
                      name?: string;
                      /**
                       * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable integer.
                       * @enum {string}
                       */
                      template_type?: 'input';
                      /**
                       * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'integer' for a configurable integer.
                       * @enum {string}
                       */
                      data_type?: 'integer';
                      /** @description Minimum value that can be set for this parameter. */
                      min_value?: number;
                      /** @description Minimum value that can be set for this parameter. */
                      max_value?: number;
                      /** @description Not implemented at this moment */
                      ui_rules?: Record<string, never>;
                      /** @description Not implemented at this moment. */
                      editable?: boolean;
                  }
                | {
                      /** @description User friendly title for the selectable string. */
                      header?: string;
                      /** @description User friendly description for what the selectable string parameter does. */
                      description?: string;
                      /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                      warning?: unknown;
                      /** @description Value that this selectable string currently takes. */
                      value?: string;
                      /** @description Default value that should be set for this selectable string. */
                      default_value?: string;
                      /** @description Name to identify the selectable string parameter by in the system. */
                      name?: string;
                      /**
                       * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable string parameter.
                       * @enum {string}
                       */
                      template_type?: 'selectable';
                      /**
                       * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'string' for a selectable string parameter.
                       * @enum {string}
                       */
                      data_type?: 'string';
                      /** @description List of values that this selectable string can take. */
                      options?: string[];
                      /** @description Not implemented at this moment */
                      ui_rules?: Record<string, never>;
                      /** @description Not implemented at this moment. */
                      editable?: boolean;
                  }
                | {
                      /** @description User friendly title for the selectable. */
                      header?: string;
                      /** @description User friendly description for what the selectable parameter does. */
                      description?: string;
                      /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                      warning?: unknown;
                      /** @description Value that this selectable currently takes. */
                      value?: string;
                      /** @description Default value that should be set for this selectable. */
                      default_value?: string;
                      /** @description Name to identify the selectable parameter by in the system. */
                      name?: string;
                      /**
                       * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable parameter.
                       * @enum {string}
                       */
                      template_type?: 'selectable';
                      /**
                       * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a selectable float.
                       * @enum {string}
                       */
                      data_type?: 'float';
                      /** @description List of values that this float selectable can take. */
                      options?: number[];
                      /** @description Not implemented at this moment */
                      ui_rules?: Record<string, never>;
                      /** @description Not implemented at this moment. */
                      editable?: boolean;
                  }
            )[];
        };
        /** Hyper parameters */
        'hyper_parameters-2': {
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            id?: string;
            entity_identifier?:
                | {
                      workspace_id?: string;
                      /**
                       * @description Mongo ID of the object
                       * @example 60d31793d5f1fb7e6e3c1a4c
                       */
                      project_id?: string;
                      /**
                       * @description Mongo ID of the object
                       * @example 60d31793d5f1fb7e6e3c1a4c
                       */
                      task_id?: string;
                      /** @description Describes the component to which the configurable parameters apply */
                      component?: string;
                      /**
                       * @description Describes the type of the configuration. Set to COMPONENT_PARAMETERS for a configuration that relates to a component.
                       * @enum {string}
                       */
                      type?: 'COMPONENT_PARAMETERS';
                  }
                | {
                      workspace_id?: string;
                      /**
                       * @description Mongo ID of the object
                       * @example 60d31793d5f1fb7e6e3c1a4c
                       */
                      model_storage_id?: string;
                      /**
                       * @description Describes the type of the configurable parameters. For hyper parameters, type is set to HYPER_PARAMETERS.
                       * @enum {string}
                       */
                      type?: 'HYPER_PARAMETERS';
                  }
                | {
                      workspace_id?: string;
                      /**
                       * @description Mongo ID of the object
                       * @example 60d31793d5f1fb7e6e3c1a4c
                       */
                      model_storage_id?: string;
                      /** @description Name of the hyper parameter group */
                      group_name?: string;
                      /**
                       * @description Describes the type of the component. For hyper parameter groups, type is always set to HYPER_PARAMETER_GROUP
                       * @enum {string}
                       */
                      type?: 'HYPER_PARAMETER_GROUP';
                  };
            /**
             * @description Type of the configurable parameters. For hyper parameters the type is always 'CONFIGURABLE_PARAMETERS'.
             * @enum {string}
             */
            type?: 'CONFIGURABLE_PARAMETERS' | 'PARAMETER_GROUP';
            /**
             * @description The name of the configuration
             * @example Hyper parameters for a segmentation task
             */
            header?: string;
            /**
             * @description Description of model to which this configuration belongs
             * @example Hyper parameters for a segmentation task
             */
            description?: string;
            groups?: {
                /**
                 * @description Defines the parameter group
                 * @example Learning Parameters
                 */
                header?: string;
                /**
                 * @description Description of the parameter group
                 * @example Configuration to control training behaviour
                 */
                description?: string;
                /** @enum {string} */
                type?: 'PARAMETER_GROUP';
                /** @description Name of the parameter group */
                name?: string;
                parameters?: {
                    /** @description User friendly title for the parameter. */
                    header?: string;
                    /** @description User friendly description for what the parameter does. */
                    description?: string;
                    /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                    warning?: unknown;
                    /** @description Value that this parameter currently takes. */
                    value?: string | number | boolean;
                    /** @description Default value that should be set for this parameter. */
                    default_value?: string | number | boolean;
                    /** @description Name to identify the parameter by in the system. */
                    name?: string;
                    /**
                     * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range.
                     * @enum {string}
                     */
                    template_type?: 'selectable' | 'input';
                    /**
                     * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string.
                     * @enum {string}
                     */
                    data_type?: 'float' | 'integer' | 'boolean' | 'string';
                    /** @description List of values that this parameter can take. Only used for selectable string and selectable float parameters */
                    options?: (number | string)[];
                    /**
                     * Format: float
                     * @description Minimum value that can be set for this parameter. Only used for numeric parameters.
                     */
                    min_value?: number;
                    /**
                     * Format: float
                     * @description Minimum value that can be set for this parameter. Only used for numeric parameters.
                     */
                    max_value?: number;
                    /** @description Not implemented at this moment */
                    ui_rules?: Record<string, never>;
                    /** @description Not implemented at this moment. */
                    editable?: boolean;
                }[];
            }[];
            /** @description Array of configurable parameters */
            parameters?: (
                | {
                      /** @description User friendly title for the configurable boolean. */
                      header?: string;
                      /** @description User friendly description for what the boolean does. */
                      description?: string;
                      /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                      warning?: unknown;
                      /** @description Value that this boolean currently takes. */
                      value?: boolean;
                      /** @description Default value that should be set for this boolean. */
                      default_value?: boolean;
                      /** @description Name to identify the configurable boolean by in the system. */
                      name?: string;
                      /**
                       * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable boolean.
                       * @enum {string}
                       */
                      template_type?: 'input';
                      /**
                       * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'boolean' for a configurable boolean.
                       * @enum {string}
                       */
                      data_type?: 'boolean';
                      /** @description Not implemented at this moment */
                      ui_rules?: Record<string, never>;
                      /** @description Not implemented at this moment. */
                      editable?: boolean;
                  }
                | {
                      /** @description User friendly title for the float. */
                      header?: string;
                      /** @description User friendly description for what the float does. */
                      description?: string;
                      /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                      warning?: unknown;
                      /**
                       * Format: float
                       * @description Value that this configurable float currently takes.
                       */
                      value?: number;
                      /**
                       * Format: float
                       * @description Default value that should be set for this float.
                       */
                      default_value?: number;
                      /** @description Name to identify the configurable float by in the system. */
                      name?: string;
                      /**
                       * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable float.
                       * @enum {string}
                       */
                      template_type?: 'input';
                      /**
                       * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a configurable float.
                       * @enum {string}
                       */
                      data_type?: 'float';
                      /**
                       * Format: float
                       * @description Minimum value that can be set for this parameter.
                       */
                      min_value?: number;
                      /**
                       * Format: float
                       * @description Minimum value that can be set for this parameter.
                       */
                      max_value?: number;
                      /** @description Not implemented at this moment */
                      ui_rules?: Record<string, never>;
                      /** @description Not implemented at this moment. */
                      editable?: boolean;
                  }
                | {
                      /** @description User friendly title for the integer. */
                      header?: string;
                      /** @description User friendly description for what the integer does. */
                      description?: string;
                      /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                      warning?: unknown;
                      /** @description Value that this configurable integer currently takes. */
                      value?: number;
                      /** @description Default value that should be set for this integer. */
                      default_value?: number;
                      /** @description Name to identify the configurable integer by in the system. */
                      name?: string;
                      /**
                       * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable integer.
                       * @enum {string}
                       */
                      template_type?: 'input';
                      /**
                       * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'integer' for a configurable integer.
                       * @enum {string}
                       */
                      data_type?: 'integer';
                      /** @description Minimum value that can be set for this parameter. */
                      min_value?: number;
                      /** @description Minimum value that can be set for this parameter. */
                      max_value?: number;
                      /** @description Not implemented at this moment */
                      ui_rules?: Record<string, never>;
                      /** @description Not implemented at this moment. */
                      editable?: boolean;
                  }
                | {
                      /** @description User friendly title for the selectable string. */
                      header?: string;
                      /** @description User friendly description for what the selectable string parameter does. */
                      description?: string;
                      /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                      warning?: unknown;
                      /** @description Value that this selectable string currently takes. */
                      value?: string;
                      /** @description Default value that should be set for this selectable string. */
                      default_value?: string;
                      /** @description Name to identify the selectable string parameter by in the system. */
                      name?: string;
                      /**
                       * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable string parameter.
                       * @enum {string}
                       */
                      template_type?: 'selectable';
                      /**
                       * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'string' for a selectable string parameter.
                       * @enum {string}
                       */
                      data_type?: 'string';
                      /** @description List of values that this selectable string can take. */
                      options?: string[];
                      /** @description Not implemented at this moment */
                      ui_rules?: Record<string, never>;
                      /** @description Not implemented at this moment. */
                      editable?: boolean;
                  }
                | {
                      /** @description User friendly title for the selectable. */
                      header?: string;
                      /** @description User friendly description for what the selectable parameter does. */
                      description?: string;
                      /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                      warning?: unknown;
                      /** @description Value that this selectable currently takes. */
                      value?: string;
                      /** @description Default value that should be set for this selectable. */
                      default_value?: string;
                      /** @description Name to identify the selectable parameter by in the system. */
                      name?: string;
                      /**
                       * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable parameter.
                       * @enum {string}
                       */
                      template_type?: 'selectable';
                      /**
                       * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a selectable float.
                       * @enum {string}
                       */
                      data_type?: 'float';
                      /** @description List of values that this float selectable can take. */
                      options?: number[];
                      /** @description Not implemented at this moment */
                      ui_rules?: Record<string, never>;
                      /** @description Not implemented at this moment. */
                      editable?: boolean;
                  }
            )[];
        };
        task_configuration: {
            /** @description Array of configurable parameter objects for the different components in the task, as well as the hyper parameters for the current algorithm in the task */
            components?: (
                | {
                      /** @description Name of the hyper parameter group */
                      name?: string;
                      /**
                       * @description ID of the hyper parameter group. The first 24 characters refer to the ID of the underlying HyperParameter object. This is followed by a dash ('-') and the group number (0 to 99) of this particular hyper parameter group.
                       * @example 60d31793d5f1fb7e6e3c1a4c-1
                       */
                      id?: string;
                      /**
                       * @description Type of the configurable parameters. For a hyper parameter group the type is always 'PARAMETER_GROUP'.
                       * @enum {string}
                       */
                      type?: 'CONFIGURABLE_PARAMETERS' | 'PARAMETER_GROUP';
                      entity_identifier?:
                          | {
                                workspace_id?: string;
                                /**
                                 * @description Mongo ID of the object
                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                 */
                                project_id?: string;
                                /**
                                 * @description Mongo ID of the object
                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                 */
                                task_id?: string;
                                /** @description Describes the component to which the configurable parameters apply */
                                component?: string;
                                /**
                                 * @description Describes the type of the configuration. Set to COMPONENT_PARAMETERS for a configuration that relates to a component.
                                 * @enum {string}
                                 */
                                type?: 'COMPONENT_PARAMETERS';
                            }
                          | {
                                workspace_id?: string;
                                /**
                                 * @description Mongo ID of the object
                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                 */
                                model_storage_id?: string;
                                /**
                                 * @description Describes the type of the configurable parameters. For hyper parameters, type is set to HYPER_PARAMETERS.
                                 * @enum {string}
                                 */
                                type?: 'HYPER_PARAMETERS';
                            }
                          | {
                                workspace_id?: string;
                                /**
                                 * @description Mongo ID of the object
                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                 */
                                model_storage_id?: string;
                                /** @description Name of the hyper parameter group */
                                group_name?: string;
                                /**
                                 * @description Describes the type of the component. For hyper parameter groups, type is always set to HYPER_PARAMETER_GROUP
                                 * @enum {string}
                                 */
                                type?: 'HYPER_PARAMETER_GROUP';
                            };
                      /**
                       * @description The name of the hyper parameter group
                       * @example Learning parameters
                       */
                      header?: string;
                      /**
                       * @description Description of the hyper parameter group.
                       * @example A set of parameters that control the training process.
                       */
                      description?: string;
                      groups?: {
                          /**
                           * @description Defines the parameter group
                           * @example Learning Parameters
                           */
                          header?: string;
                          /**
                           * @description Description of the parameter group
                           * @example Configuration to control training behaviour
                           */
                          description?: string;
                          /** @enum {string} */
                          type?: 'PARAMETER_GROUP';
                          /** @description Name of the parameter group */
                          name?: string;
                          parameters?: {
                              /** @description User friendly title for the parameter. */
                              header?: string;
                              /** @description User friendly description for what the parameter does. */
                              description?: string;
                              /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                              warning?: unknown;
                              /** @description Value that this parameter currently takes. */
                              value?: string | number | boolean;
                              /** @description Default value that should be set for this parameter. */
                              default_value?: string | number | boolean;
                              /** @description Name to identify the parameter by in the system. */
                              name?: string;
                              /**
                               * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range.
                               * @enum {string}
                               */
                              template_type?: 'selectable' | 'input';
                              /**
                               * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string.
                               * @enum {string}
                               */
                              data_type?: 'float' | 'integer' | 'boolean' | 'string';
                              /** @description List of values that this parameter can take. Only used for selectable string and selectable float parameters */
                              options?: (number | string)[];
                              /**
                               * Format: float
                               * @description Minimum value that can be set for this parameter. Only used for numeric parameters.
                               */
                              min_value?: number;
                              /**
                               * Format: float
                               * @description Minimum value that can be set for this parameter. Only used for numeric parameters.
                               */
                              max_value?: number;
                              /** @description Not implemented at this moment */
                              ui_rules?: Record<string, never>;
                              /** @description Not implemented at this moment. */
                              editable?: boolean;
                          }[];
                      }[];
                      /** @description Array of configurable parameters */
                      parameters?: (
                          | {
                                /** @description User friendly title for the configurable boolean. */
                                header?: string;
                                /** @description User friendly description for what the boolean does. */
                                description?: string;
                                /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                warning?: unknown;
                                /** @description Value that this boolean currently takes. */
                                value?: boolean;
                                /** @description Default value that should be set for this boolean. */
                                default_value?: boolean;
                                /** @description Name to identify the configurable boolean by in the system. */
                                name?: string;
                                /**
                                 * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable boolean.
                                 * @enum {string}
                                 */
                                template_type?: 'input';
                                /**
                                 * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'boolean' for a configurable boolean.
                                 * @enum {string}
                                 */
                                data_type?: 'boolean';
                                /** @description Not implemented at this moment */
                                ui_rules?: Record<string, never>;
                                /** @description Not implemented at this moment. */
                                editable?: boolean;
                            }
                          | {
                                /** @description User friendly title for the float. */
                                header?: string;
                                /** @description User friendly description for what the float does. */
                                description?: string;
                                /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                warning?: unknown;
                                /**
                                 * Format: float
                                 * @description Value that this configurable float currently takes.
                                 */
                                value?: number;
                                /**
                                 * Format: float
                                 * @description Default value that should be set for this float.
                                 */
                                default_value?: number;
                                /** @description Name to identify the configurable float by in the system. */
                                name?: string;
                                /**
                                 * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable float.
                                 * @enum {string}
                                 */
                                template_type?: 'input';
                                /**
                                 * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a configurable float.
                                 * @enum {string}
                                 */
                                data_type?: 'float';
                                /**
                                 * Format: float
                                 * @description Minimum value that can be set for this parameter.
                                 */
                                min_value?: number;
                                /**
                                 * Format: float
                                 * @description Minimum value that can be set for this parameter.
                                 */
                                max_value?: number;
                                /** @description Not implemented at this moment */
                                ui_rules?: Record<string, never>;
                                /** @description Not implemented at this moment. */
                                editable?: boolean;
                            }
                          | {
                                /** @description User friendly title for the integer. */
                                header?: string;
                                /** @description User friendly description for what the integer does. */
                                description?: string;
                                /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                warning?: unknown;
                                /** @description Value that this configurable integer currently takes. */
                                value?: number;
                                /** @description Default value that should be set for this integer. */
                                default_value?: number;
                                /** @description Name to identify the configurable integer by in the system. */
                                name?: string;
                                /**
                                 * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable integer.
                                 * @enum {string}
                                 */
                                template_type?: 'input';
                                /**
                                 * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'integer' for a configurable integer.
                                 * @enum {string}
                                 */
                                data_type?: 'integer';
                                /** @description Minimum value that can be set for this parameter. */
                                min_value?: number;
                                /** @description Minimum value that can be set for this parameter. */
                                max_value?: number;
                                /** @description Not implemented at this moment */
                                ui_rules?: Record<string, never>;
                                /** @description Not implemented at this moment. */
                                editable?: boolean;
                            }
                          | {
                                /** @description User friendly title for the selectable string. */
                                header?: string;
                                /** @description User friendly description for what the selectable string parameter does. */
                                description?: string;
                                /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                warning?: unknown;
                                /** @description Value that this selectable string currently takes. */
                                value?: string;
                                /** @description Default value that should be set for this selectable string. */
                                default_value?: string;
                                /** @description Name to identify the selectable string parameter by in the system. */
                                name?: string;
                                /**
                                 * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable string parameter.
                                 * @enum {string}
                                 */
                                template_type?: 'selectable';
                                /**
                                 * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'string' for a selectable string parameter.
                                 * @enum {string}
                                 */
                                data_type?: 'string';
                                /** @description List of values that this selectable string can take. */
                                options?: string[];
                                /** @description Not implemented at this moment */
                                ui_rules?: Record<string, never>;
                                /** @description Not implemented at this moment. */
                                editable?: boolean;
                            }
                          | {
                                /** @description User friendly title for the selectable. */
                                header?: string;
                                /** @description User friendly description for what the selectable parameter does. */
                                description?: string;
                                /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                warning?: unknown;
                                /** @description Value that this selectable currently takes. */
                                value?: string;
                                /** @description Default value that should be set for this selectable. */
                                default_value?: string;
                                /** @description Name to identify the selectable parameter by in the system. */
                                name?: string;
                                /**
                                 * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable parameter.
                                 * @enum {string}
                                 */
                                template_type?: 'selectable';
                                /**
                                 * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a selectable float.
                                 * @enum {string}
                                 */
                                data_type?: 'float';
                                /** @description List of values that this float selectable can take. */
                                options?: number[];
                                /** @description Not implemented at this moment */
                                ui_rules?: Record<string, never>;
                                /** @description Not implemented at this moment. */
                                editable?: boolean;
                            }
                      )[];
                  }
                | {
                      /**
                       * @description Mongo ID of the object
                       * @example 60d31793d5f1fb7e6e3c1a4c
                       */
                      id?: string;
                      /**
                       * @description Type of the configurable parameters. For component parameters the type is always 'CONFIGURABLE_PARAMETERS'.
                       * @enum {string}
                       */
                      type?: 'CONFIGURABLE_PARAMETERS' | 'PARAMETER_GROUP';
                      entity_identifier?:
                          | {
                                workspace_id?: string;
                                /**
                                 * @description Mongo ID of the object
                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                 */
                                project_id?: string;
                                /**
                                 * @description Mongo ID of the object
                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                 */
                                task_id?: string;
                                /** @description Describes the component to which the configurable parameters apply */
                                component?: string;
                                /**
                                 * @description Describes the type of the configuration. Set to COMPONENT_PARAMETERS for a configuration that relates to a component.
                                 * @enum {string}
                                 */
                                type?: 'COMPONENT_PARAMETERS';
                            }
                          | {
                                workspace_id?: string;
                                /**
                                 * @description Mongo ID of the object
                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                 */
                                model_storage_id?: string;
                                /**
                                 * @description Describes the type of the configurable parameters. For hyper parameters, type is set to HYPER_PARAMETERS.
                                 * @enum {string}
                                 */
                                type?: 'HYPER_PARAMETERS';
                            }
                          | {
                                workspace_id?: string;
                                /**
                                 * @description Mongo ID of the object
                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                 */
                                model_storage_id?: string;
                                /** @description Name of the hyper parameter group */
                                group_name?: string;
                                /**
                                 * @description Describes the type of the component. For hyper parameter groups, type is always set to HYPER_PARAMETER_GROUP
                                 * @enum {string}
                                 */
                                type?: 'HYPER_PARAMETER_GROUP';
                            };
                      /**
                       * @description Name of the configuration
                       * @example Subset splitting
                       */
                      header?: string;
                      /**
                       * @description Description of the configuration, indicating which part of the system it controls.
                       * @example These parameters control the splitting of the dataset into training, validation and test set.
                       */
                      description?: string;
                      groups?: {
                          /**
                           * @description Defines the parameter group
                           * @example Learning Parameters
                           */
                          header?: string;
                          /**
                           * @description Description of the parameter group
                           * @example Configuration to control training behaviour
                           */
                          description?: string;
                          /** @enum {string} */
                          type?: 'PARAMETER_GROUP';
                          /** @description Name of the parameter group */
                          name?: string;
                          parameters?: {
                              /** @description User friendly title for the parameter. */
                              header?: string;
                              /** @description User friendly description for what the parameter does. */
                              description?: string;
                              /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                              warning?: unknown;
                              /** @description Value that this parameter currently takes. */
                              value?: string | number | boolean;
                              /** @description Default value that should be set for this parameter. */
                              default_value?: string | number | boolean;
                              /** @description Name to identify the parameter by in the system. */
                              name?: string;
                              /**
                               * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range.
                               * @enum {string}
                               */
                              template_type?: 'selectable' | 'input';
                              /**
                               * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string.
                               * @enum {string}
                               */
                              data_type?: 'float' | 'integer' | 'boolean' | 'string';
                              /** @description List of values that this parameter can take. Only used for selectable string and selectable float parameters */
                              options?: (number | string)[];
                              /**
                               * Format: float
                               * @description Minimum value that can be set for this parameter. Only used for numeric parameters.
                               */
                              min_value?: number;
                              /**
                               * Format: float
                               * @description Minimum value that can be set for this parameter. Only used for numeric parameters.
                               */
                              max_value?: number;
                              /** @description Not implemented at this moment */
                              ui_rules?: Record<string, never>;
                              /** @description Not implemented at this moment. */
                              editable?: boolean;
                          }[];
                      }[];
                      /** @description Array of configurable parameters */
                      parameters?: (
                          | {
                                /** @description User friendly title for the configurable boolean. */
                                header?: string;
                                /** @description User friendly description for what the boolean does. */
                                description?: string;
                                /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                warning?: unknown;
                                /** @description Value that this boolean currently takes. */
                                value?: boolean;
                                /** @description Default value that should be set for this boolean. */
                                default_value?: boolean;
                                /** @description Name to identify the configurable boolean by in the system. */
                                name?: string;
                                /**
                                 * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable boolean.
                                 * @enum {string}
                                 */
                                template_type?: 'input';
                                /**
                                 * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'boolean' for a configurable boolean.
                                 * @enum {string}
                                 */
                                data_type?: 'boolean';
                                /** @description Not implemented at this moment */
                                ui_rules?: Record<string, never>;
                                /** @description Not implemented at this moment. */
                                editable?: boolean;
                            }
                          | {
                                /** @description User friendly title for the float. */
                                header?: string;
                                /** @description User friendly description for what the float does. */
                                description?: string;
                                /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                warning?: unknown;
                                /**
                                 * Format: float
                                 * @description Value that this configurable float currently takes.
                                 */
                                value?: number;
                                /**
                                 * Format: float
                                 * @description Default value that should be set for this float.
                                 */
                                default_value?: number;
                                /** @description Name to identify the configurable float by in the system. */
                                name?: string;
                                /**
                                 * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable float.
                                 * @enum {string}
                                 */
                                template_type?: 'input';
                                /**
                                 * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a configurable float.
                                 * @enum {string}
                                 */
                                data_type?: 'float';
                                /**
                                 * Format: float
                                 * @description Minimum value that can be set for this parameter.
                                 */
                                min_value?: number;
                                /**
                                 * Format: float
                                 * @description Minimum value that can be set for this parameter.
                                 */
                                max_value?: number;
                                /** @description Not implemented at this moment */
                                ui_rules?: Record<string, never>;
                                /** @description Not implemented at this moment. */
                                editable?: boolean;
                            }
                          | {
                                /** @description User friendly title for the integer. */
                                header?: string;
                                /** @description User friendly description for what the integer does. */
                                description?: string;
                                /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                warning?: unknown;
                                /** @description Value that this configurable integer currently takes. */
                                value?: number;
                                /** @description Default value that should be set for this integer. */
                                default_value?: number;
                                /** @description Name to identify the configurable integer by in the system. */
                                name?: string;
                                /**
                                 * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable integer.
                                 * @enum {string}
                                 */
                                template_type?: 'input';
                                /**
                                 * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'integer' for a configurable integer.
                                 * @enum {string}
                                 */
                                data_type?: 'integer';
                                /** @description Minimum value that can be set for this parameter. */
                                min_value?: number;
                                /** @description Minimum value that can be set for this parameter. */
                                max_value?: number;
                                /** @description Not implemented at this moment */
                                ui_rules?: Record<string, never>;
                                /** @description Not implemented at this moment. */
                                editable?: boolean;
                            }
                          | {
                                /** @description User friendly title for the selectable string. */
                                header?: string;
                                /** @description User friendly description for what the selectable string parameter does. */
                                description?: string;
                                /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                warning?: unknown;
                                /** @description Value that this selectable string currently takes. */
                                value?: string;
                                /** @description Default value that should be set for this selectable string. */
                                default_value?: string;
                                /** @description Name to identify the selectable string parameter by in the system. */
                                name?: string;
                                /**
                                 * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable string parameter.
                                 * @enum {string}
                                 */
                                template_type?: 'selectable';
                                /**
                                 * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'string' for a selectable string parameter.
                                 * @enum {string}
                                 */
                                data_type?: 'string';
                                /** @description List of values that this selectable string can take. */
                                options?: string[];
                                /** @description Not implemented at this moment */
                                ui_rules?: Record<string, never>;
                                /** @description Not implemented at this moment. */
                                editable?: boolean;
                            }
                          | {
                                /** @description User friendly title for the selectable. */
                                header?: string;
                                /** @description User friendly description for what the selectable parameter does. */
                                description?: string;
                                /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                warning?: unknown;
                                /** @description Value that this selectable currently takes. */
                                value?: string;
                                /** @description Default value that should be set for this selectable. */
                                default_value?: string;
                                /** @description Name to identify the selectable parameter by in the system. */
                                name?: string;
                                /**
                                 * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable parameter.
                                 * @enum {string}
                                 */
                                template_type?: 'selectable';
                                /**
                                 * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a selectable float.
                                 * @enum {string}
                                 */
                                data_type?: 'float';
                                /** @description List of values that this float selectable can take. */
                                options?: number[];
                                /** @description Not implemented at this moment */
                                ui_rules?: Record<string, never>;
                                /** @description Not implemented at this moment. */
                                editable?: boolean;
                            }
                      )[];
                  }
                | {
                      /**
                       * @description Mongo ID of the object
                       * @example 60d31793d5f1fb7e6e3c1a4c
                       */
                      id?: string;
                      entity_identifier?:
                          | {
                                workspace_id?: string;
                                /**
                                 * @description Mongo ID of the object
                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                 */
                                project_id?: string;
                                /**
                                 * @description Mongo ID of the object
                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                 */
                                task_id?: string;
                                /** @description Describes the component to which the configurable parameters apply */
                                component?: string;
                                /**
                                 * @description Describes the type of the configuration. Set to COMPONENT_PARAMETERS for a configuration that relates to a component.
                                 * @enum {string}
                                 */
                                type?: 'COMPONENT_PARAMETERS';
                            }
                          | {
                                workspace_id?: string;
                                /**
                                 * @description Mongo ID of the object
                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                 */
                                model_storage_id?: string;
                                /**
                                 * @description Describes the type of the configurable parameters. For hyper parameters, type is set to HYPER_PARAMETERS.
                                 * @enum {string}
                                 */
                                type?: 'HYPER_PARAMETERS';
                            }
                          | {
                                workspace_id?: string;
                                /**
                                 * @description Mongo ID of the object
                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                 */
                                model_storage_id?: string;
                                /** @description Name of the hyper parameter group */
                                group_name?: string;
                                /**
                                 * @description Describes the type of the component. For hyper parameter groups, type is always set to HYPER_PARAMETER_GROUP
                                 * @enum {string}
                                 */
                                type?: 'HYPER_PARAMETER_GROUP';
                            };
                      /**
                       * @description Type of the configurable parameters. For hyper parameters the type is always 'CONFIGURABLE_PARAMETERS'.
                       * @enum {string}
                       */
                      type?: 'CONFIGURABLE_PARAMETERS' | 'PARAMETER_GROUP';
                      /**
                       * @description The name of the configuration
                       * @example Hyper parameters for a segmentation task
                       */
                      header?: string;
                      /**
                       * @description Description of model to which this configuration belongs
                       * @example Hyper parameters for a segmentation task
                       */
                      description?: string;
                      groups?: {
                          /**
                           * @description Defines the parameter group
                           * @example Learning Parameters
                           */
                          header?: string;
                          /**
                           * @description Description of the parameter group
                           * @example Configuration to control training behaviour
                           */
                          description?: string;
                          /** @enum {string} */
                          type?: 'PARAMETER_GROUP';
                          /** @description Name of the parameter group */
                          name?: string;
                          parameters?: {
                              /** @description User friendly title for the parameter. */
                              header?: string;
                              /** @description User friendly description for what the parameter does. */
                              description?: string;
                              /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                              warning?: unknown;
                              /** @description Value that this parameter currently takes. */
                              value?: string | number | boolean;
                              /** @description Default value that should be set for this parameter. */
                              default_value?: string | number | boolean;
                              /** @description Name to identify the parameter by in the system. */
                              name?: string;
                              /**
                               * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range.
                               * @enum {string}
                               */
                              template_type?: 'selectable' | 'input';
                              /**
                               * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string.
                               * @enum {string}
                               */
                              data_type?: 'float' | 'integer' | 'boolean' | 'string';
                              /** @description List of values that this parameter can take. Only used for selectable string and selectable float parameters */
                              options?: (number | string)[];
                              /**
                               * Format: float
                               * @description Minimum value that can be set for this parameter. Only used for numeric parameters.
                               */
                              min_value?: number;
                              /**
                               * Format: float
                               * @description Minimum value that can be set for this parameter. Only used for numeric parameters.
                               */
                              max_value?: number;
                              /** @description Not implemented at this moment */
                              ui_rules?: Record<string, never>;
                              /** @description Not implemented at this moment. */
                              editable?: boolean;
                          }[];
                      }[];
                      /** @description Array of configurable parameters */
                      parameters?: (
                          | {
                                /** @description User friendly title for the configurable boolean. */
                                header?: string;
                                /** @description User friendly description for what the boolean does. */
                                description?: string;
                                /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                warning?: unknown;
                                /** @description Value that this boolean currently takes. */
                                value?: boolean;
                                /** @description Default value that should be set for this boolean. */
                                default_value?: boolean;
                                /** @description Name to identify the configurable boolean by in the system. */
                                name?: string;
                                /**
                                 * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable boolean.
                                 * @enum {string}
                                 */
                                template_type?: 'input';
                                /**
                                 * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'boolean' for a configurable boolean.
                                 * @enum {string}
                                 */
                                data_type?: 'boolean';
                                /** @description Not implemented at this moment */
                                ui_rules?: Record<string, never>;
                                /** @description Not implemented at this moment. */
                                editable?: boolean;
                            }
                          | {
                                /** @description User friendly title for the float. */
                                header?: string;
                                /** @description User friendly description for what the float does. */
                                description?: string;
                                /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                warning?: unknown;
                                /**
                                 * Format: float
                                 * @description Value that this configurable float currently takes.
                                 */
                                value?: number;
                                /**
                                 * Format: float
                                 * @description Default value that should be set for this float.
                                 */
                                default_value?: number;
                                /** @description Name to identify the configurable float by in the system. */
                                name?: string;
                                /**
                                 * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable float.
                                 * @enum {string}
                                 */
                                template_type?: 'input';
                                /**
                                 * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a configurable float.
                                 * @enum {string}
                                 */
                                data_type?: 'float';
                                /**
                                 * Format: float
                                 * @description Minimum value that can be set for this parameter.
                                 */
                                min_value?: number;
                                /**
                                 * Format: float
                                 * @description Minimum value that can be set for this parameter.
                                 */
                                max_value?: number;
                                /** @description Not implemented at this moment */
                                ui_rules?: Record<string, never>;
                                /** @description Not implemented at this moment. */
                                editable?: boolean;
                            }
                          | {
                                /** @description User friendly title for the integer. */
                                header?: string;
                                /** @description User friendly description for what the integer does. */
                                description?: string;
                                /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                warning?: unknown;
                                /** @description Value that this configurable integer currently takes. */
                                value?: number;
                                /** @description Default value that should be set for this integer. */
                                default_value?: number;
                                /** @description Name to identify the configurable integer by in the system. */
                                name?: string;
                                /**
                                 * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable integer.
                                 * @enum {string}
                                 */
                                template_type?: 'input';
                                /**
                                 * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'integer' for a configurable integer.
                                 * @enum {string}
                                 */
                                data_type?: 'integer';
                                /** @description Minimum value that can be set for this parameter. */
                                min_value?: number;
                                /** @description Minimum value that can be set for this parameter. */
                                max_value?: number;
                                /** @description Not implemented at this moment */
                                ui_rules?: Record<string, never>;
                                /** @description Not implemented at this moment. */
                                editable?: boolean;
                            }
                          | {
                                /** @description User friendly title for the selectable string. */
                                header?: string;
                                /** @description User friendly description for what the selectable string parameter does. */
                                description?: string;
                                /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                warning?: unknown;
                                /** @description Value that this selectable string currently takes. */
                                value?: string;
                                /** @description Default value that should be set for this selectable string. */
                                default_value?: string;
                                /** @description Name to identify the selectable string parameter by in the system. */
                                name?: string;
                                /**
                                 * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable string parameter.
                                 * @enum {string}
                                 */
                                template_type?: 'selectable';
                                /**
                                 * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'string' for a selectable string parameter.
                                 * @enum {string}
                                 */
                                data_type?: 'string';
                                /** @description List of values that this selectable string can take. */
                                options?: string[];
                                /** @description Not implemented at this moment */
                                ui_rules?: Record<string, never>;
                                /** @description Not implemented at this moment. */
                                editable?: boolean;
                            }
                          | {
                                /** @description User friendly title for the selectable. */
                                header?: string;
                                /** @description User friendly description for what the selectable parameter does. */
                                description?: string;
                                /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                warning?: unknown;
                                /** @description Value that this selectable currently takes. */
                                value?: string;
                                /** @description Default value that should be set for this selectable. */
                                default_value?: string;
                                /** @description Name to identify the selectable parameter by in the system. */
                                name?: string;
                                /**
                                 * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable parameter.
                                 * @enum {string}
                                 */
                                template_type?: 'selectable';
                                /**
                                 * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a selectable float.
                                 * @enum {string}
                                 */
                                data_type?: 'float';
                                /** @description List of values that this float selectable can take. */
                                options?: number[];
                                /** @description Not implemented at this moment */
                                ui_rules?: Record<string, never>;
                                /** @description Not implemented at this moment. */
                                editable?: boolean;
                            }
                      )[];
                  }
            )[];
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            task_id?: string;
            /** @description Title of the task the configuration is connected to */
            task_title?: string;
        };
        full_configuration: {
            /** @description Array of configurable parameter objects for the different global (i.e. project-wide) components in the project */
            global?: {
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                id?: string;
                /**
                 * @description Type of the configurable parameters. For component parameters the type is always 'CONFIGURABLE_PARAMETERS'.
                 * @enum {string}
                 */
                type?: 'CONFIGURABLE_PARAMETERS' | 'PARAMETER_GROUP';
                entity_identifier?:
                    | {
                          workspace_id?: string;
                          /**
                           * @description Mongo ID of the object
                           * @example 60d31793d5f1fb7e6e3c1a4c
                           */
                          project_id?: string;
                          /**
                           * @description Mongo ID of the object
                           * @example 60d31793d5f1fb7e6e3c1a4c
                           */
                          task_id?: string;
                          /** @description Describes the component to which the configurable parameters apply */
                          component?: string;
                          /**
                           * @description Describes the type of the configuration. Set to COMPONENT_PARAMETERS for a configuration that relates to a component.
                           * @enum {string}
                           */
                          type?: 'COMPONENT_PARAMETERS';
                      }
                    | {
                          workspace_id?: string;
                          /**
                           * @description Mongo ID of the object
                           * @example 60d31793d5f1fb7e6e3c1a4c
                           */
                          model_storage_id?: string;
                          /**
                           * @description Describes the type of the configurable parameters. For hyper parameters, type is set to HYPER_PARAMETERS.
                           * @enum {string}
                           */
                          type?: 'HYPER_PARAMETERS';
                      }
                    | {
                          workspace_id?: string;
                          /**
                           * @description Mongo ID of the object
                           * @example 60d31793d5f1fb7e6e3c1a4c
                           */
                          model_storage_id?: string;
                          /** @description Name of the hyper parameter group */
                          group_name?: string;
                          /**
                           * @description Describes the type of the component. For hyper parameter groups, type is always set to HYPER_PARAMETER_GROUP
                           * @enum {string}
                           */
                          type?: 'HYPER_PARAMETER_GROUP';
                      };
                /**
                 * @description Name of the configuration
                 * @example Subset splitting
                 */
                header?: string;
                /**
                 * @description Description of the configuration, indicating which part of the system it controls.
                 * @example These parameters control the splitting of the dataset into training, validation and test set.
                 */
                description?: string;
                groups?: {
                    /**
                     * @description Defines the parameter group
                     * @example Learning Parameters
                     */
                    header?: string;
                    /**
                     * @description Description of the parameter group
                     * @example Configuration to control training behaviour
                     */
                    description?: string;
                    /** @enum {string} */
                    type?: 'PARAMETER_GROUP';
                    /** @description Name of the parameter group */
                    name?: string;
                    parameters?: {
                        /** @description User friendly title for the parameter. */
                        header?: string;
                        /** @description User friendly description for what the parameter does. */
                        description?: string;
                        /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                        warning?: unknown;
                        /** @description Value that this parameter currently takes. */
                        value?: string | number | boolean;
                        /** @description Default value that should be set for this parameter. */
                        default_value?: string | number | boolean;
                        /** @description Name to identify the parameter by in the system. */
                        name?: string;
                        /**
                         * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range.
                         * @enum {string}
                         */
                        template_type?: 'selectable' | 'input';
                        /**
                         * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string.
                         * @enum {string}
                         */
                        data_type?: 'float' | 'integer' | 'boolean' | 'string';
                        /** @description List of values that this parameter can take. Only used for selectable string and selectable float parameters */
                        options?: (number | string)[];
                        /**
                         * Format: float
                         * @description Minimum value that can be set for this parameter. Only used for numeric parameters.
                         */
                        min_value?: number;
                        /**
                         * Format: float
                         * @description Minimum value that can be set for this parameter. Only used for numeric parameters.
                         */
                        max_value?: number;
                        /** @description Not implemented at this moment */
                        ui_rules?: Record<string, never>;
                        /** @description Not implemented at this moment. */
                        editable?: boolean;
                    }[];
                }[];
                /** @description Array of configurable parameters */
                parameters?: (
                    | {
                          /** @description User friendly title for the configurable boolean. */
                          header?: string;
                          /** @description User friendly description for what the boolean does. */
                          description?: string;
                          /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                          warning?: unknown;
                          /** @description Value that this boolean currently takes. */
                          value?: boolean;
                          /** @description Default value that should be set for this boolean. */
                          default_value?: boolean;
                          /** @description Name to identify the configurable boolean by in the system. */
                          name?: string;
                          /**
                           * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable boolean.
                           * @enum {string}
                           */
                          template_type?: 'input';
                          /**
                           * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'boolean' for a configurable boolean.
                           * @enum {string}
                           */
                          data_type?: 'boolean';
                          /** @description Not implemented at this moment */
                          ui_rules?: Record<string, never>;
                          /** @description Not implemented at this moment. */
                          editable?: boolean;
                      }
                    | {
                          /** @description User friendly title for the float. */
                          header?: string;
                          /** @description User friendly description for what the float does. */
                          description?: string;
                          /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                          warning?: unknown;
                          /**
                           * Format: float
                           * @description Value that this configurable float currently takes.
                           */
                          value?: number;
                          /**
                           * Format: float
                           * @description Default value that should be set for this float.
                           */
                          default_value?: number;
                          /** @description Name to identify the configurable float by in the system. */
                          name?: string;
                          /**
                           * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable float.
                           * @enum {string}
                           */
                          template_type?: 'input';
                          /**
                           * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a configurable float.
                           * @enum {string}
                           */
                          data_type?: 'float';
                          /**
                           * Format: float
                           * @description Minimum value that can be set for this parameter.
                           */
                          min_value?: number;
                          /**
                           * Format: float
                           * @description Minimum value that can be set for this parameter.
                           */
                          max_value?: number;
                          /** @description Not implemented at this moment */
                          ui_rules?: Record<string, never>;
                          /** @description Not implemented at this moment. */
                          editable?: boolean;
                      }
                    | {
                          /** @description User friendly title for the integer. */
                          header?: string;
                          /** @description User friendly description for what the integer does. */
                          description?: string;
                          /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                          warning?: unknown;
                          /** @description Value that this configurable integer currently takes. */
                          value?: number;
                          /** @description Default value that should be set for this integer. */
                          default_value?: number;
                          /** @description Name to identify the configurable integer by in the system. */
                          name?: string;
                          /**
                           * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable integer.
                           * @enum {string}
                           */
                          template_type?: 'input';
                          /**
                           * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'integer' for a configurable integer.
                           * @enum {string}
                           */
                          data_type?: 'integer';
                          /** @description Minimum value that can be set for this parameter. */
                          min_value?: number;
                          /** @description Minimum value that can be set for this parameter. */
                          max_value?: number;
                          /** @description Not implemented at this moment */
                          ui_rules?: Record<string, never>;
                          /** @description Not implemented at this moment. */
                          editable?: boolean;
                      }
                    | {
                          /** @description User friendly title for the selectable string. */
                          header?: string;
                          /** @description User friendly description for what the selectable string parameter does. */
                          description?: string;
                          /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                          warning?: unknown;
                          /** @description Value that this selectable string currently takes. */
                          value?: string;
                          /** @description Default value that should be set for this selectable string. */
                          default_value?: string;
                          /** @description Name to identify the selectable string parameter by in the system. */
                          name?: string;
                          /**
                           * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable string parameter.
                           * @enum {string}
                           */
                          template_type?: 'selectable';
                          /**
                           * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'string' for a selectable string parameter.
                           * @enum {string}
                           */
                          data_type?: 'string';
                          /** @description List of values that this selectable string can take. */
                          options?: string[];
                          /** @description Not implemented at this moment */
                          ui_rules?: Record<string, never>;
                          /** @description Not implemented at this moment. */
                          editable?: boolean;
                      }
                    | {
                          /** @description User friendly title for the selectable. */
                          header?: string;
                          /** @description User friendly description for what the selectable parameter does. */
                          description?: string;
                          /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                          warning?: unknown;
                          /** @description Value that this selectable currently takes. */
                          value?: string;
                          /** @description Default value that should be set for this selectable. */
                          default_value?: string;
                          /** @description Name to identify the selectable parameter by in the system. */
                          name?: string;
                          /**
                           * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable parameter.
                           * @enum {string}
                           */
                          template_type?: 'selectable';
                          /**
                           * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a selectable float.
                           * @enum {string}
                           */
                          data_type?: 'float';
                          /** @description List of values that this float selectable can take. */
                          options?: number[];
                          /** @description Not implemented at this moment */
                          ui_rules?: Record<string, never>;
                          /** @description Not implemented at this moment. */
                          editable?: boolean;
                      }
                )[];
            }[];
            /** @description Array of task configurations */
            task_chain?: {
                /** @description Array of configurable parameter objects for the different components in the task, as well as the hyper parameters for the current algorithm in the task */
                components?: (
                    | {
                          /** @description Name of the hyper parameter group */
                          name?: string;
                          /**
                           * @description ID of the hyper parameter group. The first 24 characters refer to the ID of the underlying HyperParameter object. This is followed by a dash ('-') and the group number (0 to 99) of this particular hyper parameter group.
                           * @example 60d31793d5f1fb7e6e3c1a4c-1
                           */
                          id?: string;
                          /**
                           * @description Type of the configurable parameters. For a hyper parameter group the type is always 'PARAMETER_GROUP'.
                           * @enum {string}
                           */
                          type?: 'CONFIGURABLE_PARAMETERS' | 'PARAMETER_GROUP';
                          entity_identifier?:
                              | {
                                    workspace_id?: string;
                                    /**
                                     * @description Mongo ID of the object
                                     * @example 60d31793d5f1fb7e6e3c1a4c
                                     */
                                    project_id?: string;
                                    /**
                                     * @description Mongo ID of the object
                                     * @example 60d31793d5f1fb7e6e3c1a4c
                                     */
                                    task_id?: string;
                                    /** @description Describes the component to which the configurable parameters apply */
                                    component?: string;
                                    /**
                                     * @description Describes the type of the configuration. Set to COMPONENT_PARAMETERS for a configuration that relates to a component.
                                     * @enum {string}
                                     */
                                    type?: 'COMPONENT_PARAMETERS';
                                }
                              | {
                                    workspace_id?: string;
                                    /**
                                     * @description Mongo ID of the object
                                     * @example 60d31793d5f1fb7e6e3c1a4c
                                     */
                                    model_storage_id?: string;
                                    /**
                                     * @description Describes the type of the configurable parameters. For hyper parameters, type is set to HYPER_PARAMETERS.
                                     * @enum {string}
                                     */
                                    type?: 'HYPER_PARAMETERS';
                                }
                              | {
                                    workspace_id?: string;
                                    /**
                                     * @description Mongo ID of the object
                                     * @example 60d31793d5f1fb7e6e3c1a4c
                                     */
                                    model_storage_id?: string;
                                    /** @description Name of the hyper parameter group */
                                    group_name?: string;
                                    /**
                                     * @description Describes the type of the component. For hyper parameter groups, type is always set to HYPER_PARAMETER_GROUP
                                     * @enum {string}
                                     */
                                    type?: 'HYPER_PARAMETER_GROUP';
                                };
                          /**
                           * @description The name of the hyper parameter group
                           * @example Learning parameters
                           */
                          header?: string;
                          /**
                           * @description Description of the hyper parameter group.
                           * @example A set of parameters that control the training process.
                           */
                          description?: string;
                          groups?: {
                              /**
                               * @description Defines the parameter group
                               * @example Learning Parameters
                               */
                              header?: string;
                              /**
                               * @description Description of the parameter group
                               * @example Configuration to control training behaviour
                               */
                              description?: string;
                              /** @enum {string} */
                              type?: 'PARAMETER_GROUP';
                              /** @description Name of the parameter group */
                              name?: string;
                              parameters?: {
                                  /** @description User friendly title for the parameter. */
                                  header?: string;
                                  /** @description User friendly description for what the parameter does. */
                                  description?: string;
                                  /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                  warning?: unknown;
                                  /** @description Value that this parameter currently takes. */
                                  value?: string | number | boolean;
                                  /** @description Default value that should be set for this parameter. */
                                  default_value?: string | number | boolean;
                                  /** @description Name to identify the parameter by in the system. */
                                  name?: string;
                                  /**
                                   * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range.
                                   * @enum {string}
                                   */
                                  template_type?: 'selectable' | 'input';
                                  /**
                                   * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string.
                                   * @enum {string}
                                   */
                                  data_type?: 'float' | 'integer' | 'boolean' | 'string';
                                  /** @description List of values that this parameter can take. Only used for selectable string and selectable float parameters */
                                  options?: (number | string)[];
                                  /**
                                   * Format: float
                                   * @description Minimum value that can be set for this parameter. Only used for numeric parameters.
                                   */
                                  min_value?: number;
                                  /**
                                   * Format: float
                                   * @description Minimum value that can be set for this parameter. Only used for numeric parameters.
                                   */
                                  max_value?: number;
                                  /** @description Not implemented at this moment */
                                  ui_rules?: Record<string, never>;
                                  /** @description Not implemented at this moment. */
                                  editable?: boolean;
                              }[];
                          }[];
                          /** @description Array of configurable parameters */
                          parameters?: (
                              | {
                                    /** @description User friendly title for the configurable boolean. */
                                    header?: string;
                                    /** @description User friendly description for what the boolean does. */
                                    description?: string;
                                    /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                    warning?: unknown;
                                    /** @description Value that this boolean currently takes. */
                                    value?: boolean;
                                    /** @description Default value that should be set for this boolean. */
                                    default_value?: boolean;
                                    /** @description Name to identify the configurable boolean by in the system. */
                                    name?: string;
                                    /**
                                     * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable boolean.
                                     * @enum {string}
                                     */
                                    template_type?: 'input';
                                    /**
                                     * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'boolean' for a configurable boolean.
                                     * @enum {string}
                                     */
                                    data_type?: 'boolean';
                                    /** @description Not implemented at this moment */
                                    ui_rules?: Record<string, never>;
                                    /** @description Not implemented at this moment. */
                                    editable?: boolean;
                                }
                              | {
                                    /** @description User friendly title for the float. */
                                    header?: string;
                                    /** @description User friendly description for what the float does. */
                                    description?: string;
                                    /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                    warning?: unknown;
                                    /**
                                     * Format: float
                                     * @description Value that this configurable float currently takes.
                                     */
                                    value?: number;
                                    /**
                                     * Format: float
                                     * @description Default value that should be set for this float.
                                     */
                                    default_value?: number;
                                    /** @description Name to identify the configurable float by in the system. */
                                    name?: string;
                                    /**
                                     * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable float.
                                     * @enum {string}
                                     */
                                    template_type?: 'input';
                                    /**
                                     * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a configurable float.
                                     * @enum {string}
                                     */
                                    data_type?: 'float';
                                    /**
                                     * Format: float
                                     * @description Minimum value that can be set for this parameter.
                                     */
                                    min_value?: number;
                                    /**
                                     * Format: float
                                     * @description Minimum value that can be set for this parameter.
                                     */
                                    max_value?: number;
                                    /** @description Not implemented at this moment */
                                    ui_rules?: Record<string, never>;
                                    /** @description Not implemented at this moment. */
                                    editable?: boolean;
                                }
                              | {
                                    /** @description User friendly title for the integer. */
                                    header?: string;
                                    /** @description User friendly description for what the integer does. */
                                    description?: string;
                                    /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                    warning?: unknown;
                                    /** @description Value that this configurable integer currently takes. */
                                    value?: number;
                                    /** @description Default value that should be set for this integer. */
                                    default_value?: number;
                                    /** @description Name to identify the configurable integer by in the system. */
                                    name?: string;
                                    /**
                                     * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable integer.
                                     * @enum {string}
                                     */
                                    template_type?: 'input';
                                    /**
                                     * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'integer' for a configurable integer.
                                     * @enum {string}
                                     */
                                    data_type?: 'integer';
                                    /** @description Minimum value that can be set for this parameter. */
                                    min_value?: number;
                                    /** @description Minimum value that can be set for this parameter. */
                                    max_value?: number;
                                    /** @description Not implemented at this moment */
                                    ui_rules?: Record<string, never>;
                                    /** @description Not implemented at this moment. */
                                    editable?: boolean;
                                }
                              | {
                                    /** @description User friendly title for the selectable string. */
                                    header?: string;
                                    /** @description User friendly description for what the selectable string parameter does. */
                                    description?: string;
                                    /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                    warning?: unknown;
                                    /** @description Value that this selectable string currently takes. */
                                    value?: string;
                                    /** @description Default value that should be set for this selectable string. */
                                    default_value?: string;
                                    /** @description Name to identify the selectable string parameter by in the system. */
                                    name?: string;
                                    /**
                                     * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable string parameter.
                                     * @enum {string}
                                     */
                                    template_type?: 'selectable';
                                    /**
                                     * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'string' for a selectable string parameter.
                                     * @enum {string}
                                     */
                                    data_type?: 'string';
                                    /** @description List of values that this selectable string can take. */
                                    options?: string[];
                                    /** @description Not implemented at this moment */
                                    ui_rules?: Record<string, never>;
                                    /** @description Not implemented at this moment. */
                                    editable?: boolean;
                                }
                              | {
                                    /** @description User friendly title for the selectable. */
                                    header?: string;
                                    /** @description User friendly description for what the selectable parameter does. */
                                    description?: string;
                                    /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                    warning?: unknown;
                                    /** @description Value that this selectable currently takes. */
                                    value?: string;
                                    /** @description Default value that should be set for this selectable. */
                                    default_value?: string;
                                    /** @description Name to identify the selectable parameter by in the system. */
                                    name?: string;
                                    /**
                                     * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable parameter.
                                     * @enum {string}
                                     */
                                    template_type?: 'selectable';
                                    /**
                                     * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a selectable float.
                                     * @enum {string}
                                     */
                                    data_type?: 'float';
                                    /** @description List of values that this float selectable can take. */
                                    options?: number[];
                                    /** @description Not implemented at this moment */
                                    ui_rules?: Record<string, never>;
                                    /** @description Not implemented at this moment. */
                                    editable?: boolean;
                                }
                          )[];
                      }
                    | {
                          /**
                           * @description Mongo ID of the object
                           * @example 60d31793d5f1fb7e6e3c1a4c
                           */
                          id?: string;
                          /**
                           * @description Type of the configurable parameters. For component parameters the type is always 'CONFIGURABLE_PARAMETERS'.
                           * @enum {string}
                           */
                          type?: 'CONFIGURABLE_PARAMETERS' | 'PARAMETER_GROUP';
                          entity_identifier?:
                              | {
                                    workspace_id?: string;
                                    /**
                                     * @description Mongo ID of the object
                                     * @example 60d31793d5f1fb7e6e3c1a4c
                                     */
                                    project_id?: string;
                                    /**
                                     * @description Mongo ID of the object
                                     * @example 60d31793d5f1fb7e6e3c1a4c
                                     */
                                    task_id?: string;
                                    /** @description Describes the component to which the configurable parameters apply */
                                    component?: string;
                                    /**
                                     * @description Describes the type of the configuration. Set to COMPONENT_PARAMETERS for a configuration that relates to a component.
                                     * @enum {string}
                                     */
                                    type?: 'COMPONENT_PARAMETERS';
                                }
                              | {
                                    workspace_id?: string;
                                    /**
                                     * @description Mongo ID of the object
                                     * @example 60d31793d5f1fb7e6e3c1a4c
                                     */
                                    model_storage_id?: string;
                                    /**
                                     * @description Describes the type of the configurable parameters. For hyper parameters, type is set to HYPER_PARAMETERS.
                                     * @enum {string}
                                     */
                                    type?: 'HYPER_PARAMETERS';
                                }
                              | {
                                    workspace_id?: string;
                                    /**
                                     * @description Mongo ID of the object
                                     * @example 60d31793d5f1fb7e6e3c1a4c
                                     */
                                    model_storage_id?: string;
                                    /** @description Name of the hyper parameter group */
                                    group_name?: string;
                                    /**
                                     * @description Describes the type of the component. For hyper parameter groups, type is always set to HYPER_PARAMETER_GROUP
                                     * @enum {string}
                                     */
                                    type?: 'HYPER_PARAMETER_GROUP';
                                };
                          /**
                           * @description Name of the configuration
                           * @example Subset splitting
                           */
                          header?: string;
                          /**
                           * @description Description of the configuration, indicating which part of the system it controls.
                           * @example These parameters control the splitting of the dataset into training, validation and test set.
                           */
                          description?: string;
                          groups?: {
                              /**
                               * @description Defines the parameter group
                               * @example Learning Parameters
                               */
                              header?: string;
                              /**
                               * @description Description of the parameter group
                               * @example Configuration to control training behaviour
                               */
                              description?: string;
                              /** @enum {string} */
                              type?: 'PARAMETER_GROUP';
                              /** @description Name of the parameter group */
                              name?: string;
                              parameters?: {
                                  /** @description User friendly title for the parameter. */
                                  header?: string;
                                  /** @description User friendly description for what the parameter does. */
                                  description?: string;
                                  /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                  warning?: unknown;
                                  /** @description Value that this parameter currently takes. */
                                  value?: string | number | boolean;
                                  /** @description Default value that should be set for this parameter. */
                                  default_value?: string | number | boolean;
                                  /** @description Name to identify the parameter by in the system. */
                                  name?: string;
                                  /**
                                   * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range.
                                   * @enum {string}
                                   */
                                  template_type?: 'selectable' | 'input';
                                  /**
                                   * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string.
                                   * @enum {string}
                                   */
                                  data_type?: 'float' | 'integer' | 'boolean' | 'string';
                                  /** @description List of values that this parameter can take. Only used for selectable string and selectable float parameters */
                                  options?: (number | string)[];
                                  /**
                                   * Format: float
                                   * @description Minimum value that can be set for this parameter. Only used for numeric parameters.
                                   */
                                  min_value?: number;
                                  /**
                                   * Format: float
                                   * @description Minimum value that can be set for this parameter. Only used for numeric parameters.
                                   */
                                  max_value?: number;
                                  /** @description Not implemented at this moment */
                                  ui_rules?: Record<string, never>;
                                  /** @description Not implemented at this moment. */
                                  editable?: boolean;
                              }[];
                          }[];
                          /** @description Array of configurable parameters */
                          parameters?: (
                              | {
                                    /** @description User friendly title for the configurable boolean. */
                                    header?: string;
                                    /** @description User friendly description for what the boolean does. */
                                    description?: string;
                                    /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                    warning?: unknown;
                                    /** @description Value that this boolean currently takes. */
                                    value?: boolean;
                                    /** @description Default value that should be set for this boolean. */
                                    default_value?: boolean;
                                    /** @description Name to identify the configurable boolean by in the system. */
                                    name?: string;
                                    /**
                                     * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable boolean.
                                     * @enum {string}
                                     */
                                    template_type?: 'input';
                                    /**
                                     * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'boolean' for a configurable boolean.
                                     * @enum {string}
                                     */
                                    data_type?: 'boolean';
                                    /** @description Not implemented at this moment */
                                    ui_rules?: Record<string, never>;
                                    /** @description Not implemented at this moment. */
                                    editable?: boolean;
                                }
                              | {
                                    /** @description User friendly title for the float. */
                                    header?: string;
                                    /** @description User friendly description for what the float does. */
                                    description?: string;
                                    /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                    warning?: unknown;
                                    /**
                                     * Format: float
                                     * @description Value that this configurable float currently takes.
                                     */
                                    value?: number;
                                    /**
                                     * Format: float
                                     * @description Default value that should be set for this float.
                                     */
                                    default_value?: number;
                                    /** @description Name to identify the configurable float by in the system. */
                                    name?: string;
                                    /**
                                     * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable float.
                                     * @enum {string}
                                     */
                                    template_type?: 'input';
                                    /**
                                     * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a configurable float.
                                     * @enum {string}
                                     */
                                    data_type?: 'float';
                                    /**
                                     * Format: float
                                     * @description Minimum value that can be set for this parameter.
                                     */
                                    min_value?: number;
                                    /**
                                     * Format: float
                                     * @description Minimum value that can be set for this parameter.
                                     */
                                    max_value?: number;
                                    /** @description Not implemented at this moment */
                                    ui_rules?: Record<string, never>;
                                    /** @description Not implemented at this moment. */
                                    editable?: boolean;
                                }
                              | {
                                    /** @description User friendly title for the integer. */
                                    header?: string;
                                    /** @description User friendly description for what the integer does. */
                                    description?: string;
                                    /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                    warning?: unknown;
                                    /** @description Value that this configurable integer currently takes. */
                                    value?: number;
                                    /** @description Default value that should be set for this integer. */
                                    default_value?: number;
                                    /** @description Name to identify the configurable integer by in the system. */
                                    name?: string;
                                    /**
                                     * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable integer.
                                     * @enum {string}
                                     */
                                    template_type?: 'input';
                                    /**
                                     * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'integer' for a configurable integer.
                                     * @enum {string}
                                     */
                                    data_type?: 'integer';
                                    /** @description Minimum value that can be set for this parameter. */
                                    min_value?: number;
                                    /** @description Minimum value that can be set for this parameter. */
                                    max_value?: number;
                                    /** @description Not implemented at this moment */
                                    ui_rules?: Record<string, never>;
                                    /** @description Not implemented at this moment. */
                                    editable?: boolean;
                                }
                              | {
                                    /** @description User friendly title for the selectable string. */
                                    header?: string;
                                    /** @description User friendly description for what the selectable string parameter does. */
                                    description?: string;
                                    /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                    warning?: unknown;
                                    /** @description Value that this selectable string currently takes. */
                                    value?: string;
                                    /** @description Default value that should be set for this selectable string. */
                                    default_value?: string;
                                    /** @description Name to identify the selectable string parameter by in the system. */
                                    name?: string;
                                    /**
                                     * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable string parameter.
                                     * @enum {string}
                                     */
                                    template_type?: 'selectable';
                                    /**
                                     * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'string' for a selectable string parameter.
                                     * @enum {string}
                                     */
                                    data_type?: 'string';
                                    /** @description List of values that this selectable string can take. */
                                    options?: string[];
                                    /** @description Not implemented at this moment */
                                    ui_rules?: Record<string, never>;
                                    /** @description Not implemented at this moment. */
                                    editable?: boolean;
                                }
                              | {
                                    /** @description User friendly title for the selectable. */
                                    header?: string;
                                    /** @description User friendly description for what the selectable parameter does. */
                                    description?: string;
                                    /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                    warning?: unknown;
                                    /** @description Value that this selectable currently takes. */
                                    value?: string;
                                    /** @description Default value that should be set for this selectable. */
                                    default_value?: string;
                                    /** @description Name to identify the selectable parameter by in the system. */
                                    name?: string;
                                    /**
                                     * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable parameter.
                                     * @enum {string}
                                     */
                                    template_type?: 'selectable';
                                    /**
                                     * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a selectable float.
                                     * @enum {string}
                                     */
                                    data_type?: 'float';
                                    /** @description List of values that this float selectable can take. */
                                    options?: number[];
                                    /** @description Not implemented at this moment */
                                    ui_rules?: Record<string, never>;
                                    /** @description Not implemented at this moment. */
                                    editable?: boolean;
                                }
                          )[];
                      }
                    | {
                          /**
                           * @description Mongo ID of the object
                           * @example 60d31793d5f1fb7e6e3c1a4c
                           */
                          id?: string;
                          entity_identifier?:
                              | {
                                    workspace_id?: string;
                                    /**
                                     * @description Mongo ID of the object
                                     * @example 60d31793d5f1fb7e6e3c1a4c
                                     */
                                    project_id?: string;
                                    /**
                                     * @description Mongo ID of the object
                                     * @example 60d31793d5f1fb7e6e3c1a4c
                                     */
                                    task_id?: string;
                                    /** @description Describes the component to which the configurable parameters apply */
                                    component?: string;
                                    /**
                                     * @description Describes the type of the configuration. Set to COMPONENT_PARAMETERS for a configuration that relates to a component.
                                     * @enum {string}
                                     */
                                    type?: 'COMPONENT_PARAMETERS';
                                }
                              | {
                                    workspace_id?: string;
                                    /**
                                     * @description Mongo ID of the object
                                     * @example 60d31793d5f1fb7e6e3c1a4c
                                     */
                                    model_storage_id?: string;
                                    /**
                                     * @description Describes the type of the configurable parameters. For hyper parameters, type is set to HYPER_PARAMETERS.
                                     * @enum {string}
                                     */
                                    type?: 'HYPER_PARAMETERS';
                                }
                              | {
                                    workspace_id?: string;
                                    /**
                                     * @description Mongo ID of the object
                                     * @example 60d31793d5f1fb7e6e3c1a4c
                                     */
                                    model_storage_id?: string;
                                    /** @description Name of the hyper parameter group */
                                    group_name?: string;
                                    /**
                                     * @description Describes the type of the component. For hyper parameter groups, type is always set to HYPER_PARAMETER_GROUP
                                     * @enum {string}
                                     */
                                    type?: 'HYPER_PARAMETER_GROUP';
                                };
                          /**
                           * @description Type of the configurable parameters. For hyper parameters the type is always 'CONFIGURABLE_PARAMETERS'.
                           * @enum {string}
                           */
                          type?: 'CONFIGURABLE_PARAMETERS' | 'PARAMETER_GROUP';
                          /**
                           * @description The name of the configuration
                           * @example Hyper parameters for a segmentation task
                           */
                          header?: string;
                          /**
                           * @description Description of model to which this configuration belongs
                           * @example Hyper parameters for a segmentation task
                           */
                          description?: string;
                          groups?: {
                              /**
                               * @description Defines the parameter group
                               * @example Learning Parameters
                               */
                              header?: string;
                              /**
                               * @description Description of the parameter group
                               * @example Configuration to control training behaviour
                               */
                              description?: string;
                              /** @enum {string} */
                              type?: 'PARAMETER_GROUP';
                              /** @description Name of the parameter group */
                              name?: string;
                              parameters?: {
                                  /** @description User friendly title for the parameter. */
                                  header?: string;
                                  /** @description User friendly description for what the parameter does. */
                                  description?: string;
                                  /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                  warning?: unknown;
                                  /** @description Value that this parameter currently takes. */
                                  value?: string | number | boolean;
                                  /** @description Default value that should be set for this parameter. */
                                  default_value?: string | number | boolean;
                                  /** @description Name to identify the parameter by in the system. */
                                  name?: string;
                                  /**
                                   * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range.
                                   * @enum {string}
                                   */
                                  template_type?: 'selectable' | 'input';
                                  /**
                                   * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string.
                                   * @enum {string}
                                   */
                                  data_type?: 'float' | 'integer' | 'boolean' | 'string';
                                  /** @description List of values that this parameter can take. Only used for selectable string and selectable float parameters */
                                  options?: (number | string)[];
                                  /**
                                   * Format: float
                                   * @description Minimum value that can be set for this parameter. Only used for numeric parameters.
                                   */
                                  min_value?: number;
                                  /**
                                   * Format: float
                                   * @description Minimum value that can be set for this parameter. Only used for numeric parameters.
                                   */
                                  max_value?: number;
                                  /** @description Not implemented at this moment */
                                  ui_rules?: Record<string, never>;
                                  /** @description Not implemented at this moment. */
                                  editable?: boolean;
                              }[];
                          }[];
                          /** @description Array of configurable parameters */
                          parameters?: (
                              | {
                                    /** @description User friendly title for the configurable boolean. */
                                    header?: string;
                                    /** @description User friendly description for what the boolean does. */
                                    description?: string;
                                    /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                    warning?: unknown;
                                    /** @description Value that this boolean currently takes. */
                                    value?: boolean;
                                    /** @description Default value that should be set for this boolean. */
                                    default_value?: boolean;
                                    /** @description Name to identify the configurable boolean by in the system. */
                                    name?: string;
                                    /**
                                     * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable boolean.
                                     * @enum {string}
                                     */
                                    template_type?: 'input';
                                    /**
                                     * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'boolean' for a configurable boolean.
                                     * @enum {string}
                                     */
                                    data_type?: 'boolean';
                                    /** @description Not implemented at this moment */
                                    ui_rules?: Record<string, never>;
                                    /** @description Not implemented at this moment. */
                                    editable?: boolean;
                                }
                              | {
                                    /** @description User friendly title for the float. */
                                    header?: string;
                                    /** @description User friendly description for what the float does. */
                                    description?: string;
                                    /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                    warning?: unknown;
                                    /**
                                     * Format: float
                                     * @description Value that this configurable float currently takes.
                                     */
                                    value?: number;
                                    /**
                                     * Format: float
                                     * @description Default value that should be set for this float.
                                     */
                                    default_value?: number;
                                    /** @description Name to identify the configurable float by in the system. */
                                    name?: string;
                                    /**
                                     * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable float.
                                     * @enum {string}
                                     */
                                    template_type?: 'input';
                                    /**
                                     * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a configurable float.
                                     * @enum {string}
                                     */
                                    data_type?: 'float';
                                    /**
                                     * Format: float
                                     * @description Minimum value that can be set for this parameter.
                                     */
                                    min_value?: number;
                                    /**
                                     * Format: float
                                     * @description Minimum value that can be set for this parameter.
                                     */
                                    max_value?: number;
                                    /** @description Not implemented at this moment */
                                    ui_rules?: Record<string, never>;
                                    /** @description Not implemented at this moment. */
                                    editable?: boolean;
                                }
                              | {
                                    /** @description User friendly title for the integer. */
                                    header?: string;
                                    /** @description User friendly description for what the integer does. */
                                    description?: string;
                                    /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                    warning?: unknown;
                                    /** @description Value that this configurable integer currently takes. */
                                    value?: number;
                                    /** @description Default value that should be set for this integer. */
                                    default_value?: number;
                                    /** @description Name to identify the configurable integer by in the system. */
                                    name?: string;
                                    /**
                                     * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable integer.
                                     * @enum {string}
                                     */
                                    template_type?: 'input';
                                    /**
                                     * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'integer' for a configurable integer.
                                     * @enum {string}
                                     */
                                    data_type?: 'integer';
                                    /** @description Minimum value that can be set for this parameter. */
                                    min_value?: number;
                                    /** @description Minimum value that can be set for this parameter. */
                                    max_value?: number;
                                    /** @description Not implemented at this moment */
                                    ui_rules?: Record<string, never>;
                                    /** @description Not implemented at this moment. */
                                    editable?: boolean;
                                }
                              | {
                                    /** @description User friendly title for the selectable string. */
                                    header?: string;
                                    /** @description User friendly description for what the selectable string parameter does. */
                                    description?: string;
                                    /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                    warning?: unknown;
                                    /** @description Value that this selectable string currently takes. */
                                    value?: string;
                                    /** @description Default value that should be set for this selectable string. */
                                    default_value?: string;
                                    /** @description Name to identify the selectable string parameter by in the system. */
                                    name?: string;
                                    /**
                                     * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable string parameter.
                                     * @enum {string}
                                     */
                                    template_type?: 'selectable';
                                    /**
                                     * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'string' for a selectable string parameter.
                                     * @enum {string}
                                     */
                                    data_type?: 'string';
                                    /** @description List of values that this selectable string can take. */
                                    options?: string[];
                                    /** @description Not implemented at this moment */
                                    ui_rules?: Record<string, never>;
                                    /** @description Not implemented at this moment. */
                                    editable?: boolean;
                                }
                              | {
                                    /** @description User friendly title for the selectable. */
                                    header?: string;
                                    /** @description User friendly description for what the selectable parameter does. */
                                    description?: string;
                                    /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                    warning?: unknown;
                                    /** @description Value that this selectable currently takes. */
                                    value?: string;
                                    /** @description Default value that should be set for this selectable. */
                                    default_value?: string;
                                    /** @description Name to identify the selectable parameter by in the system. */
                                    name?: string;
                                    /**
                                     * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable parameter.
                                     * @enum {string}
                                     */
                                    template_type?: 'selectable';
                                    /**
                                     * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a selectable float.
                                     * @enum {string}
                                     */
                                    data_type?: 'float';
                                    /** @description List of values that this float selectable can take. */
                                    options?: number[];
                                    /** @description Not implemented at this moment */
                                    ui_rules?: Record<string, never>;
                                    /** @description Not implemented at this moment. */
                                    editable?: boolean;
                                }
                          )[];
                      }
                )[];
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                task_id?: string;
                /** @description Title of the task the configuration is connected to */
                task_title?: string;
            }[];
        };
        /**
         * @description Mongo ID of the task
         * @example 60d31793d5f1fb7e6e3c1a4c
         */
        task_id: string;
        /** Component entity identifier */
        'component_entity_identifier-2': {
            workspace_id?: string;
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            project_id?: string;
            /**
             * @description Mongo ID of the task
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            task_id?: string;
            /**
             * @description If the configuration is a component configuration, describes the component.
             * @enum {string}
             */
            component:
                | 'NULL_COMPONENT'
                | 'SUBSET_MANAGER'
                | 'DATASET_COUNTER'
                | 'PROJECT_ACTIVE_LEARNING'
                | 'TASK_ACTIVE_LEARNING'
                | 'TASK_NODE'
                | 'PIPELINE_DATASET_MANAGER';
            /**
             * @description Describes the type of the configuration. Set to COMPONENT_PARAMETERS for a configuration that relates to a component.
             * @enum {string}
             */
            type: 'COMPONENT_PARAMETERS';
        };
        /**
         * Component parameters
         * @description The new values for the component parameters to set
         */
        'component_parameters-2': {
            /** Component entity identifier */
            entity_identifier: {
                workspace_id?: string;
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                project_id?: string;
                /**
                 * @description Mongo ID of the task
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                task_id?: string;
                /**
                 * @description If the configuration is a component configuration, describes the component.
                 * @enum {string}
                 */
                component:
                    | 'NULL_COMPONENT'
                    | 'SUBSET_MANAGER'
                    | 'DATASET_COUNTER'
                    | 'PROJECT_ACTIVE_LEARNING'
                    | 'TASK_ACTIVE_LEARNING'
                    | 'TASK_NODE'
                    | 'PIPELINE_DATASET_MANAGER';
                /**
                 * @description Describes the type of the configuration. Set to COMPONENT_PARAMETERS for a configuration that relates to a component.
                 * @enum {string}
                 */
                type: 'COMPONENT_PARAMETERS';
            };
            groups?: {
                /** @description Name of the parameter group */
                name: string;
                /** @description Array of parameters */
                parameters: {
                    /** @description Value to set the parameter to. */
                    value: string | number | boolean;
                    /** @description Name to identify the parameter by in the system. */
                    name: string;
                }[];
            }[];
            parameters?: {
                /** @description Value to set the parameter to. */
                value: string | number | boolean;
                /** @description Name to identify the parameter by in the system. */
                name: string;
            }[];
        };
        /** Model entity identifier */
        'model_entity_identifier-2': {
            workspace_id?: string;
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            model_storage_id: string;
            /**
             * @description Describes the type of the configurable parameters. For hyper parameters, type is set to HYPER_PARAMETERS.
             * @enum {string}
             */
            type: 'HYPER_PARAMETERS';
        };
        'entity_identifier-2':
            | {
                  workspace_id?: string;
                  /**
                   * @description Mongo ID of the object
                   * @example 60d31793d5f1fb7e6e3c1a4c
                   */
                  project_id?: string;
                  /**
                   * @description Mongo ID of the task
                   * @example 60d31793d5f1fb7e6e3c1a4c
                   */
                  task_id?: string;
                  /**
                   * @description If the configuration is a component configuration, describes the component.
                   * @enum {string}
                   */
                  component:
                      | 'NULL_COMPONENT'
                      | 'SUBSET_MANAGER'
                      | 'DATASET_COUNTER'
                      | 'PROJECT_ACTIVE_LEARNING'
                      | 'TASK_ACTIVE_LEARNING'
                      | 'TASK_NODE'
                      | 'PIPELINE_DATASET_MANAGER';
                  /**
                   * @description Describes the type of the configuration. Set to COMPONENT_PARAMETERS for a configuration that relates to a component.
                   * @enum {string}
                   */
                  type: 'COMPONENT_PARAMETERS';
              }
            | {
                  workspace_id?: string;
                  /**
                   * @description Mongo ID of the object
                   * @example 60d31793d5f1fb7e6e3c1a4c
                   */
                  model_storage_id: string;
                  /**
                   * @description Describes the type of the configurable parameters. For hyper parameters, type is set to HYPER_PARAMETERS.
                   * @enum {string}
                   */
                  type: 'HYPER_PARAMETERS';
              }
            | {
                  workspace_id?: string;
                  /**
                   * @description Mongo ID of the object
                   * @example 60d31793d5f1fb7e6e3c1a4c
                   */
                  model_storage_id: string;
                  /** @description The name of the hyper parameter group */
                  group_name: string;
                  /**
                   * @description Describes the type of the component. For hyper parameter groups, type is always set to HYPER_PARAMETER_GROUP
                   * @enum {string}
                   */
                  type: 'HYPER_PARAMETER_GROUP';
              };
        /**
         * Configurable parameters object
         * @description The new values for the component parameters, hyper parameters or hyper parameter group to set
         */
        configurable_parameters: {
            entity_identifier:
                | {
                      workspace_id?: string;
                      /**
                       * @description Mongo ID of the object
                       * @example 60d31793d5f1fb7e6e3c1a4c
                       */
                      project_id?: string;
                      /**
                       * @description Mongo ID of the task
                       * @example 60d31793d5f1fb7e6e3c1a4c
                       */
                      task_id?: string;
                      /**
                       * @description If the configuration is a component configuration, describes the component.
                       * @enum {string}
                       */
                      component:
                          | 'NULL_COMPONENT'
                          | 'SUBSET_MANAGER'
                          | 'DATASET_COUNTER'
                          | 'PROJECT_ACTIVE_LEARNING'
                          | 'TASK_ACTIVE_LEARNING'
                          | 'TASK_NODE'
                          | 'PIPELINE_DATASET_MANAGER';
                      /**
                       * @description Describes the type of the configuration. Set to COMPONENT_PARAMETERS for a configuration that relates to a component.
                       * @enum {string}
                       */
                      type: 'COMPONENT_PARAMETERS';
                  }
                | {
                      workspace_id?: string;
                      /**
                       * @description Mongo ID of the object
                       * @example 60d31793d5f1fb7e6e3c1a4c
                       */
                      model_storage_id: string;
                      /**
                       * @description Describes the type of the configurable parameters. For hyper parameters, type is set to HYPER_PARAMETERS.
                       * @enum {string}
                       */
                      type: 'HYPER_PARAMETERS';
                  }
                | {
                      workspace_id?: string;
                      /**
                       * @description Mongo ID of the object
                       * @example 60d31793d5f1fb7e6e3c1a4c
                       */
                      model_storage_id: string;
                      /** @description The name of the hyper parameter group */
                      group_name: string;
                      /**
                       * @description Describes the type of the component. For hyper parameter groups, type is always set to HYPER_PARAMETER_GROUP
                       * @enum {string}
                       */
                      type: 'HYPER_PARAMETER_GROUP';
                  };
            groups?: {
                /** @description Name of the parameter group */
                name: string;
                /** @description Array of parameters */
                parameters: {
                    /** @description Value to set the parameter to. */
                    value: string | number | boolean;
                    /** @description Name to identify the parameter by in the system. */
                    name: string;
                }[];
            }[];
            parameters?: {
                /** @description Value to set the parameter to. */
                value: string | number | boolean;
                /** @description Name to identify the parameter by in the system. */
                name: string;
            }[];
        };
        'task_configuration-2': {
            /** @description Array of configurable parameter objects for the different components in the task, as well as the hyper parameters for the current algorithm in the task */
            components: {
                entity_identifier:
                    | {
                          workspace_id?: string;
                          /**
                           * @description Mongo ID of the object
                           * @example 60d31793d5f1fb7e6e3c1a4c
                           */
                          project_id?: string;
                          /**
                           * @description Mongo ID of the task
                           * @example 60d31793d5f1fb7e6e3c1a4c
                           */
                          task_id?: string;
                          /**
                           * @description If the configuration is a component configuration, describes the component.
                           * @enum {string}
                           */
                          component:
                              | 'NULL_COMPONENT'
                              | 'SUBSET_MANAGER'
                              | 'DATASET_COUNTER'
                              | 'PROJECT_ACTIVE_LEARNING'
                              | 'TASK_ACTIVE_LEARNING'
                              | 'TASK_NODE'
                              | 'PIPELINE_DATASET_MANAGER';
                          /**
                           * @description Describes the type of the configuration. Set to COMPONENT_PARAMETERS for a configuration that relates to a component.
                           * @enum {string}
                           */
                          type: 'COMPONENT_PARAMETERS';
                      }
                    | {
                          workspace_id?: string;
                          /**
                           * @description Mongo ID of the object
                           * @example 60d31793d5f1fb7e6e3c1a4c
                           */
                          model_storage_id: string;
                          /**
                           * @description Describes the type of the configurable parameters. For hyper parameters, type is set to HYPER_PARAMETERS.
                           * @enum {string}
                           */
                          type: 'HYPER_PARAMETERS';
                      }
                    | {
                          workspace_id?: string;
                          /**
                           * @description Mongo ID of the object
                           * @example 60d31793d5f1fb7e6e3c1a4c
                           */
                          model_storage_id: string;
                          /** @description The name of the hyper parameter group */
                          group_name: string;
                          /**
                           * @description Describes the type of the component. For hyper parameter groups, type is always set to HYPER_PARAMETER_GROUP
                           * @enum {string}
                           */
                          type: 'HYPER_PARAMETER_GROUP';
                      };
                groups?: {
                    /** @description Name of the parameter group */
                    name: string;
                    /** @description Array of parameters */
                    parameters: {
                        /** @description Value to set the parameter to. */
                        value: string | number | boolean;
                        /** @description Name to identify the parameter by in the system. */
                        name: string;
                    }[];
                }[];
                parameters?: {
                    /** @description Value to set the parameter to. */
                    value: string | number | boolean;
                    /** @description Name to identify the parameter by in the system. */
                    name: string;
                }[];
            }[];
        };
        'full_configuration-2': {
            /** @description Array of configurable parameter objects for the different global (i.e. project-wide) components in the project */
            global: {
                /** Component entity identifier */
                entity_identifier: {
                    workspace_id?: string;
                    /**
                     * @description Mongo ID of the object
                     * @example 60d31793d5f1fb7e6e3c1a4c
                     */
                    project_id?: string;
                    /**
                     * @description Mongo ID of the task
                     * @example 60d31793d5f1fb7e6e3c1a4c
                     */
                    task_id?: string;
                    /**
                     * @description If the configuration is a component configuration, describes the component.
                     * @enum {string}
                     */
                    component:
                        | 'NULL_COMPONENT'
                        | 'SUBSET_MANAGER'
                        | 'DATASET_COUNTER'
                        | 'PROJECT_ACTIVE_LEARNING'
                        | 'TASK_ACTIVE_LEARNING'
                        | 'TASK_NODE'
                        | 'PIPELINE_DATASET_MANAGER';
                    /**
                     * @description Describes the type of the configuration. Set to COMPONENT_PARAMETERS for a configuration that relates to a component.
                     * @enum {string}
                     */
                    type: 'COMPONENT_PARAMETERS';
                };
                groups?: {
                    /** @description Name of the parameter group */
                    name: string;
                    /** @description Array of parameters */
                    parameters: {
                        /** @description Value to set the parameter to. */
                        value: string | number | boolean;
                        /** @description Name to identify the parameter by in the system. */
                        name: string;
                    }[];
                }[];
                parameters?: {
                    /** @description Value to set the parameter to. */
                    value: string | number | boolean;
                    /** @description Name to identify the parameter by in the system. */
                    name: string;
                }[];
            }[];
            /** @description Array of task configurations */
            task_chain: {
                /** @description Array of configurable parameter objects for the different components in the task, as well as the hyper parameters for the current algorithm in the task */
                components: {
                    entity_identifier:
                        | {
                              workspace_id?: string;
                              /**
                               * @description Mongo ID of the object
                               * @example 60d31793d5f1fb7e6e3c1a4c
                               */
                              project_id?: string;
                              /**
                               * @description Mongo ID of the task
                               * @example 60d31793d5f1fb7e6e3c1a4c
                               */
                              task_id?: string;
                              /**
                               * @description If the configuration is a component configuration, describes the component.
                               * @enum {string}
                               */
                              component:
                                  | 'NULL_COMPONENT'
                                  | 'SUBSET_MANAGER'
                                  | 'DATASET_COUNTER'
                                  | 'PROJECT_ACTIVE_LEARNING'
                                  | 'TASK_ACTIVE_LEARNING'
                                  | 'TASK_NODE'
                                  | 'PIPELINE_DATASET_MANAGER';
                              /**
                               * @description Describes the type of the configuration. Set to COMPONENT_PARAMETERS for a configuration that relates to a component.
                               * @enum {string}
                               */
                              type: 'COMPONENT_PARAMETERS';
                          }
                        | {
                              workspace_id?: string;
                              /**
                               * @description Mongo ID of the object
                               * @example 60d31793d5f1fb7e6e3c1a4c
                               */
                              model_storage_id: string;
                              /**
                               * @description Describes the type of the configurable parameters. For hyper parameters, type is set to HYPER_PARAMETERS.
                               * @enum {string}
                               */
                              type: 'HYPER_PARAMETERS';
                          }
                        | {
                              workspace_id?: string;
                              /**
                               * @description Mongo ID of the object
                               * @example 60d31793d5f1fb7e6e3c1a4c
                               */
                              model_storage_id: string;
                              /** @description The name of the hyper parameter group */
                              group_name: string;
                              /**
                               * @description Describes the type of the component. For hyper parameter groups, type is always set to HYPER_PARAMETER_GROUP
                               * @enum {string}
                               */
                              type: 'HYPER_PARAMETER_GROUP';
                          };
                    groups?: {
                        /** @description Name of the parameter group */
                        name: string;
                        /** @description Array of parameters */
                        parameters: {
                            /** @description Value to set the parameter to. */
                            value: string | number | boolean;
                            /** @description Name to identify the parameter by in the system. */
                            name: string;
                        }[];
                    }[];
                    parameters?: {
                        /** @description Value to set the parameter to. */
                        value: string | number | boolean;
                        /** @description Name to identify the parameter by in the system. */
                        name: string;
                    }[];
                }[];
            }[];
        };
        global_configuration: {
            /** @description Array of configurable parameter objects for the different global (i.e. project-wide) components in the project */
            global?: {
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                id?: string;
                /**
                 * @description Type of the configurable parameters. For component parameters the type is always 'CONFIGURABLE_PARAMETERS'.
                 * @enum {string}
                 */
                type?: 'CONFIGURABLE_PARAMETERS' | 'PARAMETER_GROUP';
                entity_identifier?:
                    | {
                          workspace_id?: string;
                          /**
                           * @description Mongo ID of the object
                           * @example 60d31793d5f1fb7e6e3c1a4c
                           */
                          project_id?: string;
                          /**
                           * @description Mongo ID of the object
                           * @example 60d31793d5f1fb7e6e3c1a4c
                           */
                          task_id?: string;
                          /** @description Describes the component to which the configurable parameters apply */
                          component?: string;
                          /**
                           * @description Describes the type of the configuration. Set to COMPONENT_PARAMETERS for a configuration that relates to a component.
                           * @enum {string}
                           */
                          type?: 'COMPONENT_PARAMETERS';
                      }
                    | {
                          workspace_id?: string;
                          /**
                           * @description Mongo ID of the object
                           * @example 60d31793d5f1fb7e6e3c1a4c
                           */
                          model_storage_id?: string;
                          /**
                           * @description Describes the type of the configurable parameters. For hyper parameters, type is set to HYPER_PARAMETERS.
                           * @enum {string}
                           */
                          type?: 'HYPER_PARAMETERS';
                      }
                    | {
                          workspace_id?: string;
                          /**
                           * @description Mongo ID of the object
                           * @example 60d31793d5f1fb7e6e3c1a4c
                           */
                          model_storage_id?: string;
                          /** @description Name of the hyper parameter group */
                          group_name?: string;
                          /**
                           * @description Describes the type of the component. For hyper parameter groups, type is always set to HYPER_PARAMETER_GROUP
                           * @enum {string}
                           */
                          type?: 'HYPER_PARAMETER_GROUP';
                      };
                /**
                 * @description Name of the configuration
                 * @example Subset splitting
                 */
                header?: string;
                /**
                 * @description Description of the configuration, indicating which part of the system it controls.
                 * @example These parameters control the splitting of the dataset into training, validation and test set.
                 */
                description?: string;
                groups?: {
                    /**
                     * @description Defines the parameter group
                     * @example Learning Parameters
                     */
                    header?: string;
                    /**
                     * @description Description of the parameter group
                     * @example Configuration to control training behaviour
                     */
                    description?: string;
                    /** @enum {string} */
                    type?: 'PARAMETER_GROUP';
                    /** @description Name of the parameter group */
                    name?: string;
                    parameters?: {
                        /** @description User friendly title for the parameter. */
                        header?: string;
                        /** @description User friendly description for what the parameter does. */
                        description?: string;
                        /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                        warning?: unknown;
                        /** @description Value that this parameter currently takes. */
                        value?: string | number | boolean;
                        /** @description Default value that should be set for this parameter. */
                        default_value?: string | number | boolean;
                        /** @description Name to identify the parameter by in the system. */
                        name?: string;
                        /**
                         * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range.
                         * @enum {string}
                         */
                        template_type?: 'selectable' | 'input';
                        /**
                         * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string.
                         * @enum {string}
                         */
                        data_type?: 'float' | 'integer' | 'boolean' | 'string';
                        /** @description List of values that this parameter can take. Only used for selectable string and selectable float parameters */
                        options?: (number | string)[];
                        /**
                         * Format: float
                         * @description Minimum value that can be set for this parameter. Only used for numeric parameters.
                         */
                        min_value?: number;
                        /**
                         * Format: float
                         * @description Minimum value that can be set for this parameter. Only used for numeric parameters.
                         */
                        max_value?: number;
                        /** @description Not implemented at this moment */
                        ui_rules?: Record<string, never>;
                        /** @description Not implemented at this moment. */
                        editable?: boolean;
                    }[];
                }[];
                /** @description Array of configurable parameters */
                parameters?: (
                    | {
                          /** @description User friendly title for the configurable boolean. */
                          header?: string;
                          /** @description User friendly description for what the boolean does. */
                          description?: string;
                          /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                          warning?: unknown;
                          /** @description Value that this boolean currently takes. */
                          value?: boolean;
                          /** @description Default value that should be set for this boolean. */
                          default_value?: boolean;
                          /** @description Name to identify the configurable boolean by in the system. */
                          name?: string;
                          /**
                           * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable boolean.
                           * @enum {string}
                           */
                          template_type?: 'input';
                          /**
                           * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'boolean' for a configurable boolean.
                           * @enum {string}
                           */
                          data_type?: 'boolean';
                          /** @description Not implemented at this moment */
                          ui_rules?: Record<string, never>;
                          /** @description Not implemented at this moment. */
                          editable?: boolean;
                      }
                    | {
                          /** @description User friendly title for the float. */
                          header?: string;
                          /** @description User friendly description for what the float does. */
                          description?: string;
                          /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                          warning?: unknown;
                          /**
                           * Format: float
                           * @description Value that this configurable float currently takes.
                           */
                          value?: number;
                          /**
                           * Format: float
                           * @description Default value that should be set for this float.
                           */
                          default_value?: number;
                          /** @description Name to identify the configurable float by in the system. */
                          name?: string;
                          /**
                           * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable float.
                           * @enum {string}
                           */
                          template_type?: 'input';
                          /**
                           * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a configurable float.
                           * @enum {string}
                           */
                          data_type?: 'float';
                          /**
                           * Format: float
                           * @description Minimum value that can be set for this parameter.
                           */
                          min_value?: number;
                          /**
                           * Format: float
                           * @description Minimum value that can be set for this parameter.
                           */
                          max_value?: number;
                          /** @description Not implemented at this moment */
                          ui_rules?: Record<string, never>;
                          /** @description Not implemented at this moment. */
                          editable?: boolean;
                      }
                    | {
                          /** @description User friendly title for the integer. */
                          header?: string;
                          /** @description User friendly description for what the integer does. */
                          description?: string;
                          /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                          warning?: unknown;
                          /** @description Value that this configurable integer currently takes. */
                          value?: number;
                          /** @description Default value that should be set for this integer. */
                          default_value?: number;
                          /** @description Name to identify the configurable integer by in the system. */
                          name?: string;
                          /**
                           * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable integer.
                           * @enum {string}
                           */
                          template_type?: 'input';
                          /**
                           * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'integer' for a configurable integer.
                           * @enum {string}
                           */
                          data_type?: 'integer';
                          /** @description Minimum value that can be set for this parameter. */
                          min_value?: number;
                          /** @description Minimum value that can be set for this parameter. */
                          max_value?: number;
                          /** @description Not implemented at this moment */
                          ui_rules?: Record<string, never>;
                          /** @description Not implemented at this moment. */
                          editable?: boolean;
                      }
                    | {
                          /** @description User friendly title for the selectable string. */
                          header?: string;
                          /** @description User friendly description for what the selectable string parameter does. */
                          description?: string;
                          /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                          warning?: unknown;
                          /** @description Value that this selectable string currently takes. */
                          value?: string;
                          /** @description Default value that should be set for this selectable string. */
                          default_value?: string;
                          /** @description Name to identify the selectable string parameter by in the system. */
                          name?: string;
                          /**
                           * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable string parameter.
                           * @enum {string}
                           */
                          template_type?: 'selectable';
                          /**
                           * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'string' for a selectable string parameter.
                           * @enum {string}
                           */
                          data_type?: 'string';
                          /** @description List of values that this selectable string can take. */
                          options?: string[];
                          /** @description Not implemented at this moment */
                          ui_rules?: Record<string, never>;
                          /** @description Not implemented at this moment. */
                          editable?: boolean;
                      }
                    | {
                          /** @description User friendly title for the selectable. */
                          header?: string;
                          /** @description User friendly description for what the selectable parameter does. */
                          description?: string;
                          /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                          warning?: unknown;
                          /** @description Value that this selectable currently takes. */
                          value?: string;
                          /** @description Default value that should be set for this selectable. */
                          default_value?: string;
                          /** @description Name to identify the selectable parameter by in the system. */
                          name?: string;
                          /**
                           * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable parameter.
                           * @enum {string}
                           */
                          template_type?: 'selectable';
                          /**
                           * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a selectable float.
                           * @enum {string}
                           */
                          data_type?: 'float';
                          /** @description List of values that this float selectable can take. */
                          options?: number[];
                          /** @description Not implemented at this moment */
                          ui_rules?: Record<string, never>;
                          /** @description Not implemented at this moment. */
                          editable?: boolean;
                      }
                )[];
            }[];
        };
        'global_configuration-2': {
            /** @description Array of configurable parameter objects for the different global (i.e. project-wide) components in the project */
            global: {
                /** Component entity identifier */
                entity_identifier: {
                    workspace_id?: string;
                    /**
                     * @description Mongo ID of the object
                     * @example 60d31793d5f1fb7e6e3c1a4c
                     */
                    project_id?: string;
                    /**
                     * @description Mongo ID of the task
                     * @example 60d31793d5f1fb7e6e3c1a4c
                     */
                    task_id?: string;
                    /**
                     * @description If the configuration is a component configuration, describes the component.
                     * @enum {string}
                     */
                    component:
                        | 'NULL_COMPONENT'
                        | 'SUBSET_MANAGER'
                        | 'DATASET_COUNTER'
                        | 'PROJECT_ACTIVE_LEARNING'
                        | 'TASK_ACTIVE_LEARNING'
                        | 'TASK_NODE'
                        | 'PIPELINE_DATASET_MANAGER';
                    /**
                     * @description Describes the type of the configuration. Set to COMPONENT_PARAMETERS for a configuration that relates to a component.
                     * @enum {string}
                     */
                    type: 'COMPONENT_PARAMETERS';
                };
                groups?: {
                    /** @description Name of the parameter group */
                    name: string;
                    /** @description Array of parameters */
                    parameters: {
                        /** @description Value to set the parameter to. */
                        value: string | number | boolean;
                        /** @description Name to identify the parameter by in the system. */
                        name: string;
                    }[];
                }[];
                parameters?: {
                    /** @description Value to set the parameter to. */
                    value: string | number | boolean;
                    /** @description Name to identify the parameter by in the system. */
                    name: string;
                }[];
            }[];
        };
        task_chain_configuration: {
            /** @description Array of task configurations */
            task_chain?: {
                /** @description Array of configurable parameter objects for the different components in the task, as well as the hyper parameters for the current algorithm in the task */
                components?: (
                    | {
                          /** @description Name of the hyper parameter group */
                          name?: string;
                          /**
                           * @description ID of the hyper parameter group. The first 24 characters refer to the ID of the underlying HyperParameter object. This is followed by a dash ('-') and the group number (0 to 99) of this particular hyper parameter group.
                           * @example 60d31793d5f1fb7e6e3c1a4c-1
                           */
                          id?: string;
                          /**
                           * @description Type of the configurable parameters. For a hyper parameter group the type is always 'PARAMETER_GROUP'.
                           * @enum {string}
                           */
                          type?: 'CONFIGURABLE_PARAMETERS' | 'PARAMETER_GROUP';
                          entity_identifier?:
                              | {
                                    workspace_id?: string;
                                    /**
                                     * @description Mongo ID of the object
                                     * @example 60d31793d5f1fb7e6e3c1a4c
                                     */
                                    project_id?: string;
                                    /**
                                     * @description Mongo ID of the object
                                     * @example 60d31793d5f1fb7e6e3c1a4c
                                     */
                                    task_id?: string;
                                    /** @description Describes the component to which the configurable parameters apply */
                                    component?: string;
                                    /**
                                     * @description Describes the type of the configuration. Set to COMPONENT_PARAMETERS for a configuration that relates to a component.
                                     * @enum {string}
                                     */
                                    type?: 'COMPONENT_PARAMETERS';
                                }
                              | {
                                    workspace_id?: string;
                                    /**
                                     * @description Mongo ID of the object
                                     * @example 60d31793d5f1fb7e6e3c1a4c
                                     */
                                    model_storage_id?: string;
                                    /**
                                     * @description Describes the type of the configurable parameters. For hyper parameters, type is set to HYPER_PARAMETERS.
                                     * @enum {string}
                                     */
                                    type?: 'HYPER_PARAMETERS';
                                }
                              | {
                                    workspace_id?: string;
                                    /**
                                     * @description Mongo ID of the object
                                     * @example 60d31793d5f1fb7e6e3c1a4c
                                     */
                                    model_storage_id?: string;
                                    /** @description Name of the hyper parameter group */
                                    group_name?: string;
                                    /**
                                     * @description Describes the type of the component. For hyper parameter groups, type is always set to HYPER_PARAMETER_GROUP
                                     * @enum {string}
                                     */
                                    type?: 'HYPER_PARAMETER_GROUP';
                                };
                          /**
                           * @description The name of the hyper parameter group
                           * @example Learning parameters
                           */
                          header?: string;
                          /**
                           * @description Description of the hyper parameter group.
                           * @example A set of parameters that control the training process.
                           */
                          description?: string;
                          groups?: {
                              /**
                               * @description Defines the parameter group
                               * @example Learning Parameters
                               */
                              header?: string;
                              /**
                               * @description Description of the parameter group
                               * @example Configuration to control training behaviour
                               */
                              description?: string;
                              /** @enum {string} */
                              type?: 'PARAMETER_GROUP';
                              /** @description Name of the parameter group */
                              name?: string;
                              parameters?: {
                                  /** @description User friendly title for the parameter. */
                                  header?: string;
                                  /** @description User friendly description for what the parameter does. */
                                  description?: string;
                                  /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                  warning?: unknown;
                                  /** @description Value that this parameter currently takes. */
                                  value?: string | number | boolean;
                                  /** @description Default value that should be set for this parameter. */
                                  default_value?: string | number | boolean;
                                  /** @description Name to identify the parameter by in the system. */
                                  name?: string;
                                  /**
                                   * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range.
                                   * @enum {string}
                                   */
                                  template_type?: 'selectable' | 'input';
                                  /**
                                   * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string.
                                   * @enum {string}
                                   */
                                  data_type?: 'float' | 'integer' | 'boolean' | 'string';
                                  /** @description List of values that this parameter can take. Only used for selectable string and selectable float parameters */
                                  options?: (number | string)[];
                                  /**
                                   * Format: float
                                   * @description Minimum value that can be set for this parameter. Only used for numeric parameters.
                                   */
                                  min_value?: number;
                                  /**
                                   * Format: float
                                   * @description Minimum value that can be set for this parameter. Only used for numeric parameters.
                                   */
                                  max_value?: number;
                                  /** @description Not implemented at this moment */
                                  ui_rules?: Record<string, never>;
                                  /** @description Not implemented at this moment. */
                                  editable?: boolean;
                              }[];
                          }[];
                          /** @description Array of configurable parameters */
                          parameters?: (
                              | {
                                    /** @description User friendly title for the configurable boolean. */
                                    header?: string;
                                    /** @description User friendly description for what the boolean does. */
                                    description?: string;
                                    /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                    warning?: unknown;
                                    /** @description Value that this boolean currently takes. */
                                    value?: boolean;
                                    /** @description Default value that should be set for this boolean. */
                                    default_value?: boolean;
                                    /** @description Name to identify the configurable boolean by in the system. */
                                    name?: string;
                                    /**
                                     * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable boolean.
                                     * @enum {string}
                                     */
                                    template_type?: 'input';
                                    /**
                                     * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'boolean' for a configurable boolean.
                                     * @enum {string}
                                     */
                                    data_type?: 'boolean';
                                    /** @description Not implemented at this moment */
                                    ui_rules?: Record<string, never>;
                                    /** @description Not implemented at this moment. */
                                    editable?: boolean;
                                }
                              | {
                                    /** @description User friendly title for the float. */
                                    header?: string;
                                    /** @description User friendly description for what the float does. */
                                    description?: string;
                                    /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                    warning?: unknown;
                                    /**
                                     * Format: float
                                     * @description Value that this configurable float currently takes.
                                     */
                                    value?: number;
                                    /**
                                     * Format: float
                                     * @description Default value that should be set for this float.
                                     */
                                    default_value?: number;
                                    /** @description Name to identify the configurable float by in the system. */
                                    name?: string;
                                    /**
                                     * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable float.
                                     * @enum {string}
                                     */
                                    template_type?: 'input';
                                    /**
                                     * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a configurable float.
                                     * @enum {string}
                                     */
                                    data_type?: 'float';
                                    /**
                                     * Format: float
                                     * @description Minimum value that can be set for this parameter.
                                     */
                                    min_value?: number;
                                    /**
                                     * Format: float
                                     * @description Minimum value that can be set for this parameter.
                                     */
                                    max_value?: number;
                                    /** @description Not implemented at this moment */
                                    ui_rules?: Record<string, never>;
                                    /** @description Not implemented at this moment. */
                                    editable?: boolean;
                                }
                              | {
                                    /** @description User friendly title for the integer. */
                                    header?: string;
                                    /** @description User friendly description for what the integer does. */
                                    description?: string;
                                    /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                    warning?: unknown;
                                    /** @description Value that this configurable integer currently takes. */
                                    value?: number;
                                    /** @description Default value that should be set for this integer. */
                                    default_value?: number;
                                    /** @description Name to identify the configurable integer by in the system. */
                                    name?: string;
                                    /**
                                     * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable integer.
                                     * @enum {string}
                                     */
                                    template_type?: 'input';
                                    /**
                                     * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'integer' for a configurable integer.
                                     * @enum {string}
                                     */
                                    data_type?: 'integer';
                                    /** @description Minimum value that can be set for this parameter. */
                                    min_value?: number;
                                    /** @description Minimum value that can be set for this parameter. */
                                    max_value?: number;
                                    /** @description Not implemented at this moment */
                                    ui_rules?: Record<string, never>;
                                    /** @description Not implemented at this moment. */
                                    editable?: boolean;
                                }
                              | {
                                    /** @description User friendly title for the selectable string. */
                                    header?: string;
                                    /** @description User friendly description for what the selectable string parameter does. */
                                    description?: string;
                                    /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                    warning?: unknown;
                                    /** @description Value that this selectable string currently takes. */
                                    value?: string;
                                    /** @description Default value that should be set for this selectable string. */
                                    default_value?: string;
                                    /** @description Name to identify the selectable string parameter by in the system. */
                                    name?: string;
                                    /**
                                     * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable string parameter.
                                     * @enum {string}
                                     */
                                    template_type?: 'selectable';
                                    /**
                                     * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'string' for a selectable string parameter.
                                     * @enum {string}
                                     */
                                    data_type?: 'string';
                                    /** @description List of values that this selectable string can take. */
                                    options?: string[];
                                    /** @description Not implemented at this moment */
                                    ui_rules?: Record<string, never>;
                                    /** @description Not implemented at this moment. */
                                    editable?: boolean;
                                }
                              | {
                                    /** @description User friendly title for the selectable. */
                                    header?: string;
                                    /** @description User friendly description for what the selectable parameter does. */
                                    description?: string;
                                    /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                    warning?: unknown;
                                    /** @description Value that this selectable currently takes. */
                                    value?: string;
                                    /** @description Default value that should be set for this selectable. */
                                    default_value?: string;
                                    /** @description Name to identify the selectable parameter by in the system. */
                                    name?: string;
                                    /**
                                     * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable parameter.
                                     * @enum {string}
                                     */
                                    template_type?: 'selectable';
                                    /**
                                     * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a selectable float.
                                     * @enum {string}
                                     */
                                    data_type?: 'float';
                                    /** @description List of values that this float selectable can take. */
                                    options?: number[];
                                    /** @description Not implemented at this moment */
                                    ui_rules?: Record<string, never>;
                                    /** @description Not implemented at this moment. */
                                    editable?: boolean;
                                }
                          )[];
                      }
                    | {
                          /**
                           * @description Mongo ID of the object
                           * @example 60d31793d5f1fb7e6e3c1a4c
                           */
                          id?: string;
                          /**
                           * @description Type of the configurable parameters. For component parameters the type is always 'CONFIGURABLE_PARAMETERS'.
                           * @enum {string}
                           */
                          type?: 'CONFIGURABLE_PARAMETERS' | 'PARAMETER_GROUP';
                          entity_identifier?:
                              | {
                                    workspace_id?: string;
                                    /**
                                     * @description Mongo ID of the object
                                     * @example 60d31793d5f1fb7e6e3c1a4c
                                     */
                                    project_id?: string;
                                    /**
                                     * @description Mongo ID of the object
                                     * @example 60d31793d5f1fb7e6e3c1a4c
                                     */
                                    task_id?: string;
                                    /** @description Describes the component to which the configurable parameters apply */
                                    component?: string;
                                    /**
                                     * @description Describes the type of the configuration. Set to COMPONENT_PARAMETERS for a configuration that relates to a component.
                                     * @enum {string}
                                     */
                                    type?: 'COMPONENT_PARAMETERS';
                                }
                              | {
                                    workspace_id?: string;
                                    /**
                                     * @description Mongo ID of the object
                                     * @example 60d31793d5f1fb7e6e3c1a4c
                                     */
                                    model_storage_id?: string;
                                    /**
                                     * @description Describes the type of the configurable parameters. For hyper parameters, type is set to HYPER_PARAMETERS.
                                     * @enum {string}
                                     */
                                    type?: 'HYPER_PARAMETERS';
                                }
                              | {
                                    workspace_id?: string;
                                    /**
                                     * @description Mongo ID of the object
                                     * @example 60d31793d5f1fb7e6e3c1a4c
                                     */
                                    model_storage_id?: string;
                                    /** @description Name of the hyper parameter group */
                                    group_name?: string;
                                    /**
                                     * @description Describes the type of the component. For hyper parameter groups, type is always set to HYPER_PARAMETER_GROUP
                                     * @enum {string}
                                     */
                                    type?: 'HYPER_PARAMETER_GROUP';
                                };
                          /**
                           * @description Name of the configuration
                           * @example Subset splitting
                           */
                          header?: string;
                          /**
                           * @description Description of the configuration, indicating which part of the system it controls.
                           * @example These parameters control the splitting of the dataset into training, validation and test set.
                           */
                          description?: string;
                          groups?: {
                              /**
                               * @description Defines the parameter group
                               * @example Learning Parameters
                               */
                              header?: string;
                              /**
                               * @description Description of the parameter group
                               * @example Configuration to control training behaviour
                               */
                              description?: string;
                              /** @enum {string} */
                              type?: 'PARAMETER_GROUP';
                              /** @description Name of the parameter group */
                              name?: string;
                              parameters?: {
                                  /** @description User friendly title for the parameter. */
                                  header?: string;
                                  /** @description User friendly description for what the parameter does. */
                                  description?: string;
                                  /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                  warning?: unknown;
                                  /** @description Value that this parameter currently takes. */
                                  value?: string | number | boolean;
                                  /** @description Default value that should be set for this parameter. */
                                  default_value?: string | number | boolean;
                                  /** @description Name to identify the parameter by in the system. */
                                  name?: string;
                                  /**
                                   * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range.
                                   * @enum {string}
                                   */
                                  template_type?: 'selectable' | 'input';
                                  /**
                                   * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string.
                                   * @enum {string}
                                   */
                                  data_type?: 'float' | 'integer' | 'boolean' | 'string';
                                  /** @description List of values that this parameter can take. Only used for selectable string and selectable float parameters */
                                  options?: (number | string)[];
                                  /**
                                   * Format: float
                                   * @description Minimum value that can be set for this parameter. Only used for numeric parameters.
                                   */
                                  min_value?: number;
                                  /**
                                   * Format: float
                                   * @description Minimum value that can be set for this parameter. Only used for numeric parameters.
                                   */
                                  max_value?: number;
                                  /** @description Not implemented at this moment */
                                  ui_rules?: Record<string, never>;
                                  /** @description Not implemented at this moment. */
                                  editable?: boolean;
                              }[];
                          }[];
                          /** @description Array of configurable parameters */
                          parameters?: (
                              | {
                                    /** @description User friendly title for the configurable boolean. */
                                    header?: string;
                                    /** @description User friendly description for what the boolean does. */
                                    description?: string;
                                    /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                    warning?: unknown;
                                    /** @description Value that this boolean currently takes. */
                                    value?: boolean;
                                    /** @description Default value that should be set for this boolean. */
                                    default_value?: boolean;
                                    /** @description Name to identify the configurable boolean by in the system. */
                                    name?: string;
                                    /**
                                     * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable boolean.
                                     * @enum {string}
                                     */
                                    template_type?: 'input';
                                    /**
                                     * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'boolean' for a configurable boolean.
                                     * @enum {string}
                                     */
                                    data_type?: 'boolean';
                                    /** @description Not implemented at this moment */
                                    ui_rules?: Record<string, never>;
                                    /** @description Not implemented at this moment. */
                                    editable?: boolean;
                                }
                              | {
                                    /** @description User friendly title for the float. */
                                    header?: string;
                                    /** @description User friendly description for what the float does. */
                                    description?: string;
                                    /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                    warning?: unknown;
                                    /**
                                     * Format: float
                                     * @description Value that this configurable float currently takes.
                                     */
                                    value?: number;
                                    /**
                                     * Format: float
                                     * @description Default value that should be set for this float.
                                     */
                                    default_value?: number;
                                    /** @description Name to identify the configurable float by in the system. */
                                    name?: string;
                                    /**
                                     * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable float.
                                     * @enum {string}
                                     */
                                    template_type?: 'input';
                                    /**
                                     * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a configurable float.
                                     * @enum {string}
                                     */
                                    data_type?: 'float';
                                    /**
                                     * Format: float
                                     * @description Minimum value that can be set for this parameter.
                                     */
                                    min_value?: number;
                                    /**
                                     * Format: float
                                     * @description Minimum value that can be set for this parameter.
                                     */
                                    max_value?: number;
                                    /** @description Not implemented at this moment */
                                    ui_rules?: Record<string, never>;
                                    /** @description Not implemented at this moment. */
                                    editable?: boolean;
                                }
                              | {
                                    /** @description User friendly title for the integer. */
                                    header?: string;
                                    /** @description User friendly description for what the integer does. */
                                    description?: string;
                                    /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                    warning?: unknown;
                                    /** @description Value that this configurable integer currently takes. */
                                    value?: number;
                                    /** @description Default value that should be set for this integer. */
                                    default_value?: number;
                                    /** @description Name to identify the configurable integer by in the system. */
                                    name?: string;
                                    /**
                                     * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable integer.
                                     * @enum {string}
                                     */
                                    template_type?: 'input';
                                    /**
                                     * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'integer' for a configurable integer.
                                     * @enum {string}
                                     */
                                    data_type?: 'integer';
                                    /** @description Minimum value that can be set for this parameter. */
                                    min_value?: number;
                                    /** @description Minimum value that can be set for this parameter. */
                                    max_value?: number;
                                    /** @description Not implemented at this moment */
                                    ui_rules?: Record<string, never>;
                                    /** @description Not implemented at this moment. */
                                    editable?: boolean;
                                }
                              | {
                                    /** @description User friendly title for the selectable string. */
                                    header?: string;
                                    /** @description User friendly description for what the selectable string parameter does. */
                                    description?: string;
                                    /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                    warning?: unknown;
                                    /** @description Value that this selectable string currently takes. */
                                    value?: string;
                                    /** @description Default value that should be set for this selectable string. */
                                    default_value?: string;
                                    /** @description Name to identify the selectable string parameter by in the system. */
                                    name?: string;
                                    /**
                                     * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable string parameter.
                                     * @enum {string}
                                     */
                                    template_type?: 'selectable';
                                    /**
                                     * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'string' for a selectable string parameter.
                                     * @enum {string}
                                     */
                                    data_type?: 'string';
                                    /** @description List of values that this selectable string can take. */
                                    options?: string[];
                                    /** @description Not implemented at this moment */
                                    ui_rules?: Record<string, never>;
                                    /** @description Not implemented at this moment. */
                                    editable?: boolean;
                                }
                              | {
                                    /** @description User friendly title for the selectable. */
                                    header?: string;
                                    /** @description User friendly description for what the selectable parameter does. */
                                    description?: string;
                                    /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                    warning?: unknown;
                                    /** @description Value that this selectable currently takes. */
                                    value?: string;
                                    /** @description Default value that should be set for this selectable. */
                                    default_value?: string;
                                    /** @description Name to identify the selectable parameter by in the system. */
                                    name?: string;
                                    /**
                                     * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable parameter.
                                     * @enum {string}
                                     */
                                    template_type?: 'selectable';
                                    /**
                                     * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a selectable float.
                                     * @enum {string}
                                     */
                                    data_type?: 'float';
                                    /** @description List of values that this float selectable can take. */
                                    options?: number[];
                                    /** @description Not implemented at this moment */
                                    ui_rules?: Record<string, never>;
                                    /** @description Not implemented at this moment. */
                                    editable?: boolean;
                                }
                          )[];
                      }
                    | {
                          /**
                           * @description Mongo ID of the object
                           * @example 60d31793d5f1fb7e6e3c1a4c
                           */
                          id?: string;
                          entity_identifier?:
                              | {
                                    workspace_id?: string;
                                    /**
                                     * @description Mongo ID of the object
                                     * @example 60d31793d5f1fb7e6e3c1a4c
                                     */
                                    project_id?: string;
                                    /**
                                     * @description Mongo ID of the object
                                     * @example 60d31793d5f1fb7e6e3c1a4c
                                     */
                                    task_id?: string;
                                    /** @description Describes the component to which the configurable parameters apply */
                                    component?: string;
                                    /**
                                     * @description Describes the type of the configuration. Set to COMPONENT_PARAMETERS for a configuration that relates to a component.
                                     * @enum {string}
                                     */
                                    type?: 'COMPONENT_PARAMETERS';
                                }
                              | {
                                    workspace_id?: string;
                                    /**
                                     * @description Mongo ID of the object
                                     * @example 60d31793d5f1fb7e6e3c1a4c
                                     */
                                    model_storage_id?: string;
                                    /**
                                     * @description Describes the type of the configurable parameters. For hyper parameters, type is set to HYPER_PARAMETERS.
                                     * @enum {string}
                                     */
                                    type?: 'HYPER_PARAMETERS';
                                }
                              | {
                                    workspace_id?: string;
                                    /**
                                     * @description Mongo ID of the object
                                     * @example 60d31793d5f1fb7e6e3c1a4c
                                     */
                                    model_storage_id?: string;
                                    /** @description Name of the hyper parameter group */
                                    group_name?: string;
                                    /**
                                     * @description Describes the type of the component. For hyper parameter groups, type is always set to HYPER_PARAMETER_GROUP
                                     * @enum {string}
                                     */
                                    type?: 'HYPER_PARAMETER_GROUP';
                                };
                          /**
                           * @description Type of the configurable parameters. For hyper parameters the type is always 'CONFIGURABLE_PARAMETERS'.
                           * @enum {string}
                           */
                          type?: 'CONFIGURABLE_PARAMETERS' | 'PARAMETER_GROUP';
                          /**
                           * @description The name of the configuration
                           * @example Hyper parameters for a segmentation task
                           */
                          header?: string;
                          /**
                           * @description Description of model to which this configuration belongs
                           * @example Hyper parameters for a segmentation task
                           */
                          description?: string;
                          groups?: {
                              /**
                               * @description Defines the parameter group
                               * @example Learning Parameters
                               */
                              header?: string;
                              /**
                               * @description Description of the parameter group
                               * @example Configuration to control training behaviour
                               */
                              description?: string;
                              /** @enum {string} */
                              type?: 'PARAMETER_GROUP';
                              /** @description Name of the parameter group */
                              name?: string;
                              parameters?: {
                                  /** @description User friendly title for the parameter. */
                                  header?: string;
                                  /** @description User friendly description for what the parameter does. */
                                  description?: string;
                                  /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                  warning?: unknown;
                                  /** @description Value that this parameter currently takes. */
                                  value?: string | number | boolean;
                                  /** @description Default value that should be set for this parameter. */
                                  default_value?: string | number | boolean;
                                  /** @description Name to identify the parameter by in the system. */
                                  name?: string;
                                  /**
                                   * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range.
                                   * @enum {string}
                                   */
                                  template_type?: 'selectable' | 'input';
                                  /**
                                   * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string.
                                   * @enum {string}
                                   */
                                  data_type?: 'float' | 'integer' | 'boolean' | 'string';
                                  /** @description List of values that this parameter can take. Only used for selectable string and selectable float parameters */
                                  options?: (number | string)[];
                                  /**
                                   * Format: float
                                   * @description Minimum value that can be set for this parameter. Only used for numeric parameters.
                                   */
                                  min_value?: number;
                                  /**
                                   * Format: float
                                   * @description Minimum value that can be set for this parameter. Only used for numeric parameters.
                                   */
                                  max_value?: number;
                                  /** @description Not implemented at this moment */
                                  ui_rules?: Record<string, never>;
                                  /** @description Not implemented at this moment. */
                                  editable?: boolean;
                              }[];
                          }[];
                          /** @description Array of configurable parameters */
                          parameters?: (
                              | {
                                    /** @description User friendly title for the configurable boolean. */
                                    header?: string;
                                    /** @description User friendly description for what the boolean does. */
                                    description?: string;
                                    /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                    warning?: unknown;
                                    /** @description Value that this boolean currently takes. */
                                    value?: boolean;
                                    /** @description Default value that should be set for this boolean. */
                                    default_value?: boolean;
                                    /** @description Name to identify the configurable boolean by in the system. */
                                    name?: string;
                                    /**
                                     * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable boolean.
                                     * @enum {string}
                                     */
                                    template_type?: 'input';
                                    /**
                                     * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'boolean' for a configurable boolean.
                                     * @enum {string}
                                     */
                                    data_type?: 'boolean';
                                    /** @description Not implemented at this moment */
                                    ui_rules?: Record<string, never>;
                                    /** @description Not implemented at this moment. */
                                    editable?: boolean;
                                }
                              | {
                                    /** @description User friendly title for the float. */
                                    header?: string;
                                    /** @description User friendly description for what the float does. */
                                    description?: string;
                                    /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                    warning?: unknown;
                                    /**
                                     * Format: float
                                     * @description Value that this configurable float currently takes.
                                     */
                                    value?: number;
                                    /**
                                     * Format: float
                                     * @description Default value that should be set for this float.
                                     */
                                    default_value?: number;
                                    /** @description Name to identify the configurable float by in the system. */
                                    name?: string;
                                    /**
                                     * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable float.
                                     * @enum {string}
                                     */
                                    template_type?: 'input';
                                    /**
                                     * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a configurable float.
                                     * @enum {string}
                                     */
                                    data_type?: 'float';
                                    /**
                                     * Format: float
                                     * @description Minimum value that can be set for this parameter.
                                     */
                                    min_value?: number;
                                    /**
                                     * Format: float
                                     * @description Minimum value that can be set for this parameter.
                                     */
                                    max_value?: number;
                                    /** @description Not implemented at this moment */
                                    ui_rules?: Record<string, never>;
                                    /** @description Not implemented at this moment. */
                                    editable?: boolean;
                                }
                              | {
                                    /** @description User friendly title for the integer. */
                                    header?: string;
                                    /** @description User friendly description for what the integer does. */
                                    description?: string;
                                    /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                    warning?: unknown;
                                    /** @description Value that this configurable integer currently takes. */
                                    value?: number;
                                    /** @description Default value that should be set for this integer. */
                                    default_value?: number;
                                    /** @description Name to identify the configurable integer by in the system. */
                                    name?: string;
                                    /**
                                     * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable integer.
                                     * @enum {string}
                                     */
                                    template_type?: 'input';
                                    /**
                                     * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'integer' for a configurable integer.
                                     * @enum {string}
                                     */
                                    data_type?: 'integer';
                                    /** @description Minimum value that can be set for this parameter. */
                                    min_value?: number;
                                    /** @description Minimum value that can be set for this parameter. */
                                    max_value?: number;
                                    /** @description Not implemented at this moment */
                                    ui_rules?: Record<string, never>;
                                    /** @description Not implemented at this moment. */
                                    editable?: boolean;
                                }
                              | {
                                    /** @description User friendly title for the selectable string. */
                                    header?: string;
                                    /** @description User friendly description for what the selectable string parameter does. */
                                    description?: string;
                                    /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                    warning?: unknown;
                                    /** @description Value that this selectable string currently takes. */
                                    value?: string;
                                    /** @description Default value that should be set for this selectable string. */
                                    default_value?: string;
                                    /** @description Name to identify the selectable string parameter by in the system. */
                                    name?: string;
                                    /**
                                     * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable string parameter.
                                     * @enum {string}
                                     */
                                    template_type?: 'selectable';
                                    /**
                                     * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'string' for a selectable string parameter.
                                     * @enum {string}
                                     */
                                    data_type?: 'string';
                                    /** @description List of values that this selectable string can take. */
                                    options?: string[];
                                    /** @description Not implemented at this moment */
                                    ui_rules?: Record<string, never>;
                                    /** @description Not implemented at this moment. */
                                    editable?: boolean;
                                }
                              | {
                                    /** @description User friendly title for the selectable. */
                                    header?: string;
                                    /** @description User friendly description for what the selectable parameter does. */
                                    description?: string;
                                    /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                    warning?: unknown;
                                    /** @description Value that this selectable currently takes. */
                                    value?: string;
                                    /** @description Default value that should be set for this selectable. */
                                    default_value?: string;
                                    /** @description Name to identify the selectable parameter by in the system. */
                                    name?: string;
                                    /**
                                     * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable parameter.
                                     * @enum {string}
                                     */
                                    template_type?: 'selectable';
                                    /**
                                     * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a selectable float.
                                     * @enum {string}
                                     */
                                    data_type?: 'float';
                                    /** @description List of values that this float selectable can take. */
                                    options?: number[];
                                    /** @description Not implemented at this moment */
                                    ui_rules?: Record<string, never>;
                                    /** @description Not implemented at this moment. */
                                    editable?: boolean;
                                }
                          )[];
                      }
                )[];
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                task_id?: string;
                /** @description Title of the task the configuration is connected to */
                task_title?: string;
            }[];
        };
        'task_chain_configuration-2': {
            /** @description Array of task configurations */
            task_chain: {
                /** @description Array of configurable parameter objects for the different components in the task, as well as the hyper parameters for the current algorithm in the task */
                components: {
                    entity_identifier:
                        | {
                              workspace_id?: string;
                              /**
                               * @description Mongo ID of the object
                               * @example 60d31793d5f1fb7e6e3c1a4c
                               */
                              project_id?: string;
                              /**
                               * @description Mongo ID of the task
                               * @example 60d31793d5f1fb7e6e3c1a4c
                               */
                              task_id?: string;
                              /**
                               * @description If the configuration is a component configuration, describes the component.
                               * @enum {string}
                               */
                              component:
                                  | 'NULL_COMPONENT'
                                  | 'SUBSET_MANAGER'
                                  | 'DATASET_COUNTER'
                                  | 'PROJECT_ACTIVE_LEARNING'
                                  | 'TASK_ACTIVE_LEARNING'
                                  | 'TASK_NODE'
                                  | 'PIPELINE_DATASET_MANAGER';
                              /**
                               * @description Describes the type of the configuration. Set to COMPONENT_PARAMETERS for a configuration that relates to a component.
                               * @enum {string}
                               */
                              type: 'COMPONENT_PARAMETERS';
                          }
                        | {
                              workspace_id?: string;
                              /**
                               * @description Mongo ID of the object
                               * @example 60d31793d5f1fb7e6e3c1a4c
                               */
                              model_storage_id: string;
                              /**
                               * @description Describes the type of the configurable parameters. For hyper parameters, type is set to HYPER_PARAMETERS.
                               * @enum {string}
                               */
                              type: 'HYPER_PARAMETERS';
                          }
                        | {
                              workspace_id?: string;
                              /**
                               * @description Mongo ID of the object
                               * @example 60d31793d5f1fb7e6e3c1a4c
                               */
                              model_storage_id: string;
                              /** @description The name of the hyper parameter group */
                              group_name: string;
                              /**
                               * @description Describes the type of the component. For hyper parameter groups, type is always set to HYPER_PARAMETER_GROUP
                               * @enum {string}
                               */
                              type: 'HYPER_PARAMETER_GROUP';
                          };
                    groups?: {
                        /** @description Name of the parameter group */
                        name: string;
                        /** @description Array of parameters */
                        parameters: {
                            /** @description Value to set the parameter to. */
                            value: string | number | boolean;
                            /** @description Name to identify the parameter by in the system. */
                            name: string;
                        }[];
                    }[];
                    parameters?: {
                        /** @description Value to set the parameter to. */
                        value: string | number | boolean;
                        /** @description Name to identify the parameter by in the system. */
                        name: string;
                    }[];
                }[];
            }[];
        };
        product_info: {
            /** @description Version number of installed product. */
            'product-version'?: string;
        };
        upload_file: {
            /**
             * File
             * Format: binary
             * @description The dataset file to be uploaded.
             */
            file?: string;
        };
        labels: {
            name?: string;
            color?: string;
        };
        /** Import project body */
        import_project: {
            /**
             * File Id
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            file_id: string;
            /**
             * Project Name
             * @example Pet Classification
             */
            project_name: string;
            /**
             * Task Type
             * @enum {string}
             */
            task_type:
                | 'classification'
                | 'classification_hierarchical'
                | 'detection'
                | 'segmentation'
                | 'instance_segmentation'
                | 'anomaly'
                | 'detection_oriented'
                | 'detection_classification'
                | 'detection_segmentation'
                | 'keypoint_detection';
            /** @example [
             *       {
             *         "name": "cat",
             *         "color": "#0014ffff"
             *       },
             *       {
             *         "name": "dog",
             *         "color": "#0015ffff"
             *       }
             *     ] */
            labels: {
                name?: string;
                color?: string;
            }[];
        };
        /** Import to project - existing dataset body */
        import_to_project_existing_dataset: {
            /**
             * File Id
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            file_id: string;
            /**
             * Dataset Id
             * @example 60d31793d5f1fb7e6e3c1a4d
             */
            dataset_id: string;
            /**
             * Dataset name
             * @example
             * @enum {string}
             */
            dataset_name: '';
            /**
             * Map of dataset label names to project label ids
             * @example {
             *       "person": "627d0c97bc34fab51b383f23",
             *       "bicycle": "627d0c97bc34fab51b383f23",
             *       "car": "627d0c97bc34fab51b383f22"
             *     }
             */
            labels_map: Record<string, never>;
        };
        /** Import to project - new dataset body */
        import_to_project_new_dataset: {
            /**
             * File Id
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            file_id: string;
            /**
             * Dataset Id
             * @example
             * @enum {string}
             */
            dataset_id: '';
            /**
             * Dataset name
             * @example New dataset name
             */
            dataset_name: string;
            /**
             * Map of dataset label names to project label ids
             * @example {
             *       "person": "627d0c97bc34fab51b383f23",
             *       "bicycle": "627d0c97bc34fab51b383f23",
             *       "car": "627d0c97bc34fab51b383f22"
             *     }
             */
            labels_map: Record<string, never>;
        };
        'import_parameters-2': {
            /**
             * @description The ID of the uploaded project archive zip file
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            file_id: string;
            /** @description The name to assign to the imported project */
            project_name?: unknown;
        };
        model_identifier: {
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            model_id: string;
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            model_group_id: string;
        };
        model_identifier_list: {
            /** @description Array of model identifiers */
            models: {
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                model_id: string;
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                model_group_id: string;
            }[];
        };
        deployment_response: {
            /**
             * @description Mongo ID of the object
             * @example 60d31793d5f1fb7e6e3c1a4c
             */
            id?: string;
            /** @description progress of code deployment */
            progress?: number;
            /**
             * @description State of the deployment
             * @enum {string}
             */
            state?: 'NONE' | 'PREPARING' | 'DONE' | 'FAILED';
            /** @description Identifiers of the exported models */
            models?: {
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                model_id: string;
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                model_group_id: string;
            }[];
            /** @description Id of the user who started the deployment */
            creator_id?: string;
            /** @description Creation time of the model */
            creation_time?: string;
        };
        deployment_package_request: {
            /** @description Array of model identifiers */
            models: {
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                model_id: string;
                /**
                 * @description Mongo ID of the object
                 * @example 60d31793d5f1fb7e6e3c1a4c
                 */
                model_group_id: string;
            }[];
            /** @enum {unknown} */
            package_type: 'ovms' | 'geti_sdk';
        };
        /** BalanceResponse */
        BalanceResponse: {
            /** Incoming */
            incoming: number;
            /** Available */
            available: number;
            /** Blocked */
            blocked: number;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: unknown[];
        };
        /** NextPage */
        NextPage: {
            /** Limit */
            limit: number;
            /** Skip */
            skip: number;
        };
        /** CreditAccount */
        CreditAccount: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Organization Id */
            organization_id: string;
            /** Name */
            name: string;
            /** Renewable Amount */
            renewable_amount?: number | null;
            /** Renewal Day Of Month */
            renewal_day_of_month?: number | null;
            /** Created */
            created: number;
            /** Updated */
            updated: number;
            /** Expires */
            expires?: number | null;
            /** BalanceResponse */
            balance: {
                /** Incoming */
                incoming: number;
                /** Available */
                available: number;
                /** Blocked */
                blocked: number;
            };
        };
        /** CreditAccountsResponse */
        CreditAccountsResponse: {
            /** Total Matched */
            total_matched: number;
            next_page?: {
                /** Limit */
                limit: number;
                /** Skip */
                skip: number;
            } | null;
            /** Credit Accounts */
            credit_accounts: {
                /**
                 * Id
                 * Format: uuid
                 */
                id: string;
                /** Organization Id */
                organization_id: string;
                /** Name */
                name: string;
                /** Renewable Amount */
                renewable_amount?: number | null;
                /** Renewal Day Of Month */
                renewal_day_of_month?: number | null;
                /** Created */
                created: number;
                /** Updated */
                updated: number;
                /** Expires */
                expires?: number | null;
                /** BalanceResponse */
                balance: {
                    /** Incoming */
                    incoming: number;
                    /** Available */
                    available: number;
                    /** Blocked */
                    blocked: number;
                };
            }[];
        };
        /** SubscriptionResponse */
        SubscriptionResponse: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Organization Id */
            organization_id: string;
            /** Workspace Id */
            workspace_id: string;
            /**
             * Product Id
             * Format: uuid
             */
            product_id: string;
            /** Status */
            status: string;
            /** Created */
            created: number;
            /** Updated */
            updated: number;
            /** Next Renewal Date */
            next_renewal_date?: number | null;
            /** Previous Renewal Date */
            previous_renewal_date?: number | null;
        };
        /** OrgSubscriptionsResponse */
        OrgSubscriptionsResponse: {
            /** Total Matched */
            total_matched: number;
            next_page?: {
                /** Limit */
                limit: number;
                /** Skip */
                skip: number;
            } | null;
            /** Subscriptions */
            subscriptions: {
                /**
                 * Id
                 * Format: uuid
                 */
                id: string;
                /** Organization Id */
                organization_id: string;
                /** Workspace Id */
                workspace_id: string;
                /**
                 * Product Id
                 * Format: uuid
                 */
                product_id: string;
                /** Status */
                status: string;
                /** Created */
                created: number;
                /** Updated */
                updated: number;
                /** Next Renewal Date */
                next_renewal_date?: number | null;
                /** Previous Renewal Date */
                previous_renewal_date?: number | null;
            }[];
        };
        /** TransactionInfo */
        TransactionInfo: {
            /** Credits */
            credits: number;
            /** Project Id */
            project_id?: string | null;
            /** Service Name */
            service_name: string;
            /** Milliseconds Timestamp */
            milliseconds_timestamp: number;
        };
        /** TransactionsResponse */
        TransactionsResponse: {
            /** Total Matched */
            total_matched: number;
            next_page?: {
                /** Limit */
                limit: number;
                /** Skip */
                skip: number;
            } | null;
            /** Transactions */
            transactions: {
                /** Credits */
                credits: number;
                /** Project Id */
                project_id?: string | null;
                /** Service Name */
                service_name: string;
                /** Milliseconds Timestamp */
                milliseconds_timestamp: number;
            }[];
        };
        /**
         * AggregatesKey
         * @description Allowed keys for transaction aggregates
         * @enum {string}
         */
        AggregatesKey: 'project' | 'service_name' | 'date';
        /** GroupItem */
        GroupItem: {
            /** Key */
            key: string;
            /** Value */
            value: string | number;
        };
        /** ResourcesAmount */
        ResourcesAmount: {
            /**
             * Images
             * @default 0
             */
            images: number;
            /**
             * Frames
             * @default 0
             */
            frames: number;
        };
        /** AggregatesResult */
        AggregatesResult: {
            /** Credits */
            credits: number;
            /** ResourcesAmount */
            resources: {
                /**
                 * Images
                 * @default 0
                 */
                images: number;
                /**
                 * Frames
                 * @default 0
                 */
                frames: number;
            };
        };
        /** AggregateItem */
        AggregateItem: {
            /** Group */
            group: {
                /** Key */
                key: string;
                /** Value */
                value: string | number;
            }[];
            /** AggregatesResult */
            result: {
                /** Credits */
                credits: number;
                /** ResourcesAmount */
                resources: {
                    /**
                     * Images
                     * @default 0
                     */
                    images: number;
                    /**
                     * Frames
                     * @default 0
                     */
                    frames: number;
                };
            };
        };
        /** AggregatesResponse */
        AggregatesResponse: {
            /** Aggregates */
            aggregates: {
                /** Group */
                group: {
                    /** Key */
                    key: string;
                    /** Value */
                    value: string | number;
                }[];
                /** AggregatesResult */
                result: {
                    /** Credits */
                    credits: number;
                    /** ResourcesAmount */
                    resources: {
                        /**
                         * Images
                         * @default 0
                         */
                        images: number;
                        /**
                         * Frames
                         * @default 0
                         */
                        frames: number;
                    };
                };
            }[];
        };
    };
    responses: never;
    parameters: {
        /** @description The ID of the organization. */
        organization_id: string;
        /** @description The ID of the workspace. */
        workspace_id: string;
        /** @description Fill this field to filter the list based on project name. This is an `include` filter. */
        name: string;
        /** @description Number of items returned in the response. Default is 10 and maximum is 100. */
        limit: number;
        /** @description Number indicating how many items to skip from the first item that matches the query.
         *     This field is used in combination with the limit field for the pagination feature. */
        skip: string;
        /** @description Sorting order, could be `asc` (ascending) or `dsc` (descending).  */
        sort_direction: 'asc' | 'dsc';
        /** @description Field to sort by, could be name or creation_date */
        sort_by: 'name' | 'creation_date';
        /** @description Set to true to return the project size in the response. Default is False. */
        with_size: boolean;
        /** @description The ID of the project. */
        project_id: string;
        /** @description Set to True to also include the deleted labels in the response.  If set to true, each label will have a field called is_deleted that will be set to true if the label has been deleted. Default value is False. */
        include_deleted_labels: boolean;
        /** @description The ID of the dataset in the project. */
        dataset_id: string;
        /** @description Field to sort by.  */
        filter_sort_by:
            | 'media_name'
            | 'media_upload_date'
            | 'media_width'
            | 'media_height'
            | 'media_size'
            | 'annotation_creation_date';
        /** @description The ID of the image. */
        image_id: string;
        /** @description The ID of the video. */
        video_id: string;
        /** @description Set to true to include the frame details in the response. Note that this will increase the response size.
         *     Default is `false`.  */
        include_frame_details: boolean;
        /** @description This is a 0-based index, meaning to retrieve the first frame of the video, this parameter should be set to `0`.
         *     The possible values for this parameter range from `0` to `frame_count-1`. The `frame_count` is the total number of frames contained in the video
         *     and it can be retrieved from the response body of [video detail](#Media/GetVideoDetail) endpoint.  */
        frame_index: number;
        /** @description Set to `latest` to fetch the latest annotations.
         *     This parameter can also be set to the ID of a specific annotation. For example, the specific ID could be obtained
         *     from the [training revision](#Training%20dataset%20versions/GetMediaForDataset) response,
         *     where the response includes the specific user annotation for a media that is used for training. */
        annotation_id: string | 'latest';
        /** @description Set to `true` to return the annotations without the geometric shapes. Default is `false`. */
        label_only: boolean;
        /** @description Number indicating for how many frames in the video an annotation should be uploaded. A value of 1 means every frame is annotated while a value of 10 means every 10th frame gets an annotation. If nothing is passed, it defaults to the video fps. */
        skip_frame: string;
        /** @description The starting index of the range of interest. This is a 0-based inclusive index, meaning to include the first frame of the video,
         *     this parameter should be set to `0`. The value cannot be bigger than `frame_count-1`.
         *     The `frame_count` is the total number of frames contained in the video
         *     and it can be retrieved from the response body of [video detail](#Media/GetVideoDetail) endpoint.  */
        start_frame: number;
        /** @description :- The ending index of the range of interest. This is a 0-based inclusive index, meaning to include the last frame of the video, this parameter should be set to `frame_count-1`; the value cannot be bigger than `frame_count-1`. The `frame_count` is the total number of frames contained in the video and it can be retrieved from the response body of [video detail](#Media/GetVideoDetail) endpoint. */
        end_frame: number;
        /** @description Set to the number of desired frame intervals in the response. For example, to retrieve all frame annotations of the video, set this value to `1`.
         *     If not set, this value will be equal to the video fps. The video fps can be obtained from the response of the [video detail](#Media/GetVideoDetail)
         *     endpoint.    */
        frameskip: number;
        /** @description Whether to include obsolete algorithms in the response. */
        include_obsolete: boolean;
        /** @description The ID of the model group of interest. This can be found as `model_groups[].id` in the response body of [model group listing](#Models/GetModelGroups) endpoint. */
        model_group_id: string;
        /** @description The ID of the model of interest. This can be found as `model_groups[].models[].id` from the response of [model group listing](#Models/GetModelGroups)
         *     endpoint or `models[].id` from [model group detail](#Models/GetModelGroup) endpoint. */
        model_id: string;
        /** @description The ID of the optimized model */
        optimized_model_id: string;
        /** @description Only applicable to OpenVINO-optimized models. Set to `true` to only download the model binaries; set to `false` to also include
         *     the code in the exported file.  */
        model_only: boolean;
        /**
         * @description Set this parameter to `active` request predictions generated using the currently active model(s) in the project.
         *     For task chain, this parameter could be set to the task ID within the project to request for inference only for that task.
         *     The task ID can be found in the [project detail](#Projects/GetProjectInfo) endpoint.
         * @example active
         */
        pipeline_id_or_active: string | 'active';
        /** @description The Region of Interest (ROI) of the image or video frame to use for inference.
         *     The ROI is a rectangle defined by four zero-index pixel coordinates, separated by comma,
         *     with the format: `left,top,width,height`. */
        roi: string;
        /** @description Hyper parameters for the inference */
        hyper_parameters: string;
        /** @description This parameter defines the origin of the predictions.
         *
         *     When `use_cache=always`, the predictions are pulled from the database cache. If no prediction with the desired configuration exists in the
         *     cache, a 'not found' respones will be returned.
         *
         *     When `use_cache=never`, the predictions are generated on the fly based on the request. Note that, the predictions are generated using
         *     the OpenVINO model with FP32 precision with XAI. This model can be found under the [model detail](#Models/GetModelDetail) endpoint.
         *
         *     When `use_cache=auto`, the system will first attempt to retrieve an existing prediction for the media item from the
         *     cache. If no prediction with the desired configuration exists in the cache, a new prediction will be generated on the
         *     fly. By default, `auto` is used. */
        use_cache: 'always' | 'never' | 'auto';
        /** @description The ID of the task of interest. */
        task_id: string;
        /** @description The ID of the dataset of interest */
        dataset_revision_id: string;
        /** @description The ID of the test of interest */
        model_test_id: string;
        /** @description Field to sort by, only 'score' available */
        filter_media_scores_sort_by: 'score';
        /** @description Select only items related to the given project. */
        'project_id-2': string;
        /** @description Select only jobs in the given state. */
        job_state: 'idle' | 'running' | 'paused' | 'finished' | 'error' | 'failed' | 'cancelled';
        /** @description Select only jobs of the given type. */
        job_type: ('train' | 'optimize_pot' | 'test')[];
        /** @description Select jobs with matching key. */
        key: string;
        /** @description Filter jobs by the author's unique identifier */
        author_id: string;
        /** @description Filter jobs which started after this time. If time is not specified (only date), it defaults to the beginning of the day. */
        start_time_from: string;
        /** @description Filter jobs which started before this time. If time is not specified (only date), it defaults to the beginning of the day. */
        start_time_to: string;
        /** @description Field to sort by, could be [job_name, start_time, end_time, creation_date, priority] */
        jobs_sort_by: 'job_name' | 'start_time' | 'end_time' | 'creation_date' | 'priority';
        /** @description The ID of the job of interest */
        job_id: string;
        /** @description The ID of the model of interest */
        'model_id-2': string;
        /** @description The name of the algorithm for which we want to pull the configurable parameters */
        algorithm_name: string;
        /** @description The ID of the file uploaded using the TUS protocol.
         *     This can be found in the `Location` response header of [TUS upload initialization](#Project%20Import%2FExport/CreateTUSUpload). */
        file_id: string;
        /** @description The ID of the uploaded file */
        'file_id-2': string;
        /** @description The format to which to export the dataset */
        export_format: 'coco' | 'yolo' | 'voc' | 'datumaro';
        /** @description Boolean that indicates if unannotated media should be included in the export dataset. */
        include_unannotated_media: boolean;
        /** @description If true, videos will be exported as a set of images, one for each annotated frame. If the specified dataset format cannot natively represent videos (e.g., VOC, COCO, ...), this parameter is overridden to true by the server. Conversely, if the format is Datumaro and this option is false, videos will be exported fully. */
        save_video_as_images: boolean;
        /** @description The ID of the export dataset of interest */
        export_dataset_id: string;
        /** @description The ID of the deployment */
        deployment_id: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    PersonalAccessTokenOrganization: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Organization data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "organizationId": "2503c663-b4e1-4162-ba32-11ba5b50722d"
                     *     } */
                    'application/json': {
                        organizationId: string;
                    };
                };
            };
        };
    };
    GetAllWorkspaces: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The requested workspaces info */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "workspaces": [
                     *         {
                     *           "creation_date": "2021-07-28T09:07:13.999000+00:00",
                     *           "creator_name": "dummy",
                     *           "description": "This is the first workspace.",
                     *           "id": "97041954-7589-448a-808f-a32d607852cb",
                     *           "name": "Workspace 1"
                     *         },
                     *         {
                     *           "creation_date": "2021-07-28T09:07:15.985000+00:00",
                     *           "creator_name": "dummy",
                     *           "description": "This is another workspace.",
                     *           "id": "7a3cb253-4532-44b8-a490-6b0ca023b9b2",
                     *           "name": "Workspace 2"
                     *         }
                     *       ]
                     *     } */
                    'application/json': {
                        /** @description Array of workspaces */
                        workspaces: {
                            /**
                             * @description UUID of the object
                             * @example 2e1de607-b549-42bf-8031-fd16d87379e5
                             */
                            id: string;
                            /** @description Name of the workspace */
                            name: string;
                            /** @description Description of the workspace */
                            description?: string;
                            /** @description Name of the creator of the workspace */
                            creator_name?: string;
                            /** @description Creation date of the workspace */
                            creation_date?: string;
                        }[];
                    };
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    GetAllProjectsInAWorkspace: {
        parameters: {
            query?: {
                /** @description Fill this field to filter the list based on project name. This is an `include` filter. */
                name?: string;
                /** @description Number of items returned in the response. Default is 10 and maximum is 100. */
                limit?: number;
                /** @description Number indicating how many items to skip from the first item that matches the query.
                 *     This field is used in combination with the limit field for the pagination feature. */
                skip?: string;
                /** @description Sorting order, could be `asc` (ascending) or `dsc` (descending).  */
                sort_direction?: 'asc' | 'dsc';
                /** @description Field to sort by, could be name or creation_date */
                sort_by?: 'name' | 'creation_date';
                /** @description Set to true to return the project size in the response. Default is False. */
                with_size?: boolean;
            };
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The requested project info */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "projects": [
                     *         {
                     *           "creation_time": "2021-07-28T09:31:18.137000+00:00",
                     *           "creator_id": "Example user",
                     *           "id": "610123e6efba22ca453f11bd",
                     *           "name": "Example segmentation project",
                     *           "storage_info": {},
                     *           "pipeline": {
                     *             "connections": [
                     *               {
                     *                 "from": "610123e6efba22ca453f11be",
                     *                 "to": "610123e6efba22ca453f11c1"
                     *               }
                     *             ],
                     *             "tasks": [
                     *               {
                     *                 "id": "610123e6efba22ca453f11be",
                     *                 "task_type": "dataset",
                     *                 "title": "Dataset"
                     *               },
                     *               {
                     *                 "id": "610123e6efba22ca453f11c1",
                     *                 "label_schema_id": "610123e6efba22ca453f11d2",
                     *                 "labels": [
                     *                   {
                     *                     "color": "#0015ffff",
                     *                     "group": "default_segmentation",
                     *                     "hotkey": "ctrl+5",
                     *                     "id": "610123e5efba22ca453f11b9",
                     *                     "is_empty": false,
                     *                     "is_anomalous": false,
                     *                     "name": "object",
                     *                     "parent_id": null
                     *                   },
                     *                   {
                     *                     "color": "#b10334ff",
                     *                     "group": "Empty",
                     *                     "hotkey": "ctrl+0",
                     *                     "id": "610123e5efba22ca453f11ba",
                     *                     "is_empty": true,
                     *                     "name": "Empty",
                     *                     "is_anomalous": false,
                     *                     "parent_id": null
                     *                   }
                     *                 ],
                     *                 "task_type": "segmentation",
                     *                 "title": "Sample segmentation task"
                     *               }
                     *             ]
                     *           },
                     *           "performance": {
                     *             "score": 0.7,
                     *             "task_performances": [
                     *               {
                     *                 "task_id": "610123e6efba22ca453f11c1",
                     *                 "score": {
                     *                   "value": 0.7,
                     *                   "metric_type": "f-measure"
                     *                 }
                     *               }
                     *             ]
                     *           },
                     *           "thumbnail": "/api/v1/organizations/61b3a664-822d-45c5-beb1-8b10187e301d/workspaces/db99fa0c-46a2-427f-aba6-fd76f1b86d7f/projects/610123e6efba22ca453f11bd/thumbnail"
                     *         },
                     *         {
                     *           "creation_time": "2021-07-28T09:31:18.137000+00:00",
                     *           "id": "60d31793d5f1fb7e6e3c1a4c",
                     *           "name": "Example detection project",
                     *           "storage_info": {},
                     *           "pipeline": {
                     *             "connections": [
                     *               {
                     *                 "from": "610123e6efba22ca453f11bh",
                     *                 "to": "610123e6efba22ca453f11ch"
                     *               }
                     *             ],
                     *             "tasks": [
                     *               {
                     *                 "id": "610123e6efba22ca453f11bh",
                     *                 "task_type": "dataset",
                     *                 "title": "Dataset"
                     *               },
                     *               {
                     *                 "id": "610123e6efba22ca453f11ch",
                     *                 "label_schema_id": "610123e6efba22ca453f11dh",
                     *                 "labels": [
                     *                   {
                     *                     "color": "#0015ffff",
                     *                     "group": "default_detection",
                     *                     "hotkey": "ctrl+5",
                     *                     "id": "610123e5efba22ca453f11b9",
                     *                     "is_empty": false,
                     *                     "is_anomalous": false,
                     *                     "name": "object",
                     *                     "parent_id": null
                     *                   },
                     *                   {
                     *                     "color": "#b10334ff",
                     *                     "group": "Empty",
                     *                     "hotkey": "ctrl+0",
                     *                     "id": "610123e5efba22ca453f11ba",
                     *                     "is_empty": true,
                     *                     "is_anomalous": false,
                     *                     "name": "Empty",
                     *                     "parent_id": null
                     *                   }
                     *                 ],
                     *                 "task_type": "detection",
                     *                 "title": "Sample detection task"
                     *               }
                     *             ]
                     *           },
                     *           "performance": {
                     *             "score": 0.7,
                     *             "task_performances": [
                     *               {
                     *                 "task_id": "610123e6efba22ca453f11ch",
                     *                 "score": {
                     *                   "value": 0.7,
                     *                   "metric_type": "f-measure"
                     *                 }
                     *               }
                     *             ]
                     *           },
                     *           "thumbnail": "/api/v1/organizations/61b3a664-822d-45c5-beb1-8b10187e301d/workspaces/db99fa0c-46a2-427f-aba6-fd76f1b86d7f/projects/610123e6efba22ca453f11bh/thumbnail"
                     *         },
                     *         {
                     *           "creation_time": "2021-07-28T09:37:17.319000+00:00",
                     *           "creator_id": "Example user",
                     *           "id": "61012cdb1d38a5e71ef3baf9",
                     *           "name": "Example classification project",
                     *           "storage_info": {},
                     *           "pipeline": {
                     *             "connections": [
                     *               {
                     *                 "from": "6101254defba22ca453f11ce",
                     *                 "to": "6101254defba22ca453f11d1"
                     *               }
                     *             ],
                     *             "tasks": [
                     *               {
                     *                 "id": "6101254defba22ca453f11ce",
                     *                 "task_type": "dataset",
                     *                 "title": "Dataset"
                     *               },
                     *               {
                     *                 "id": "6101254defba22ca453f11d1",
                     *                 "label_schema_id": "610123e6efba22ca453f11f1",
                     *                 "labels": [
                     *                   {
                     *                     "color": "#0015ffff",
                     *                     "group": "species",
                     *                     "hotkey": "ctrl+6",
                     *                     "id": "6101254defba22ca453f11c6",
                     *                     "is_empty": false,
                     *                     "is_anomalous": false,
                     *                     "name": "horse",
                     *                     "parent_id": null
                     *                   },
                     *                   {
                     *                     "color": "#00ffffff",
                     *                     "group": "species",
                     *                     "hotkey": "ctrl+7",
                     *                     "id": "6101254defba22ca453f11c7",
                     *                     "is_empty": false,
                     *                     "is_anomalous": false,
                     *                     "name": "donkey",
                     *                     "parent_id": null
                     *                   },
                     *                   {
                     *                     "color": "#00aaaaff",
                     *                     "group": "saddle_state",
                     *                     "hotkey": "ctrl+8",
                     *                     "id": "6101254defba22ca453f11c8",
                     *                     "is_empty": false,
                     *                     "is_anomalous": false,
                     *                     "name": "saddled",
                     *                     "parent_id": null
                     *                   },
                     *                   {
                     *                     "color": "#00aaffff",
                     *                     "group": "saddle_state",
                     *                     "hotkey": "ctrl+9",
                     *                     "id": "6101254defba22ca453f11c9",
                     *                     "is_empty": false,
                     *                     "is_anomalous": false,
                     *                     "name": "unsaddled",
                     *                     "parent_id": null
                     *                   },
                     *                   {
                     *                     "color": "#7ada55ff",
                     *                     "group": "No class",
                     *                     "hotkey": "ctrl+0",
                     *                     "id": "6101254defba22ca453f11ca",
                     *                     "is_empty": true,
                     *                     "is_anomalous": false,
                     *                     "name": "No class",
                     *                     "parent_id": null
                     *                   }
                     *                 ],
                     *                 "task_type": "classification",
                     *                 "title": "Sample classification task"
                     *               }
                     *             ]
                     *           },
                     *           "performance": {
                     *             "score": null,
                     *             "task_performances": [
                     *               {
                     *                 "task_id": "6101254defba22ca453f11d1",
                     *                 "score": null
                     *               }
                     *             ]
                     *           },
                     *           "thumbnail": "/api/v1/organizations/61b3a664-822d-45c5-beb1-8b10187e301d/workspaces/db99fa0c-46a2-427f-aba6-fd76f1b86d7f/projects/6101254defba22ca453f11cd/thumbnail"
                     *         },
                     *         {
                     *           "creation_time": "2021-07-28T10:03:08.944000+00:00",
                     *           "creator_id": "Example user",
                     *           "id": "61012b5cefba22ca453f11df",
                     *           "name": "Example classification project - label hierarchy",
                     *           "storage_info": {},
                     *           "pipeline": {
                     *             "connections": [
                     *               {
                     *                 "from": "61012b5cefba22ca453f11e0",
                     *                 "to": "61012b5defba22ca453f11e3"
                     *               }
                     *             ],
                     *             "tasks": [
                     *               {
                     *                 "id": "61012b5cefba22ca453f11e0",
                     *                 "task_type": "dataset",
                     *                 "title": "Dataset"
                     *               },
                     *               {
                     *                 "id": "61012b5defba22ca453f11e3",
                     *                 "label_schema_id": "610123e6efba22ca453f11e4",
                     *                 "labels": [
                     *                   {
                     *                     "color": "#0015ddff",
                     *                     "group": "default - Sample classification task",
                     *                     "hotkey": "",
                     *                     "id": "61012b5cefba22ca453f11d7",
                     *                     "is_empty": false,
                     *                     "is_anomalous": false,
                     *                     "name": "animal",
                     *                     "parent_id": null
                     *                   },
                     *                   {
                     *                     "color": "#0015ffff",
                     *                     "group": "species",
                     *                     "hotkey": "ctrl+5",
                     *                     "id": "61012b5cefba22ca453f11d8",
                     *                     "is_empty": false,
                     *                     "is_anomalous": false,
                     *                     "name": "horse",
                     *                     "parent_id": null
                     *                   },
                     *                   {
                     *                     "color": "#00ffffff",
                     *                     "group": "species",
                     *                     "hotkey": "ctrl+6",
                     *                     "id": "61012b5cefba22ca453f11d9",
                     *                     "is_empty": false,
                     *                     "is_anomalous": false,
                     *                     "name": "donkey",
                     *                     "parent_id": null
                     *                   },
                     *                   {
                     *                     "color": "#00aaaaff",
                     *                     "group": "saddle_state",
                     *                     "hotkey": "ctrl+7",
                     *                     "id": "61012b5cefba22ca453f11da",
                     *                     "is_empty": false,
                     *                     "is_anomalous": false,
                     *                     "name": "saddled",
                     *                     "parent_id": null
                     *                   },
                     *                   {
                     *                     "color": "#00aaffff",
                     *                     "group": "saddle_state",
                     *                     "hotkey": "ctrl+8",
                     *                     "id": "61012b5cefba22ca453f11db",
                     *                     "is_empty": false,
                     *                     "is_anomalous": false,
                     *                     "name": "unsaddled",
                     *                     "parent_id": null
                     *                   },
                     *                   {
                     *                     "color": "#676f5fff",
                     *                     "group": "No class",
                     *                     "hotkey": "ctrl+0",
                     *                     "id": "61012b5cefba22ca453f11dc",
                     *                     "is_empty": true,
                     *                     "is_anomalous": false,
                     *                     "name": "No class",
                     *                     "parent_id": null
                     *                   }
                     *                 ],
                     *                 "task_type": "classification",
                     *                 "title": "Sample classification task"
                     *               }
                     *             ]
                     *           },
                     *           "performance": {
                     *             "score": 0.36,
                     *             "task_performances": [
                     *               {
                     *                 "task_id": "61012b5defba22ca453f11e3",
                     *                 "score": {
                     *                   "value": 0.7,
                     *                   "metric_type": "f-measure"
                     *                 }
                     *               }
                     *             ]
                     *           },
                     *           "thumbnail": "/api/v1/organizations/61b3a664-822d-45c5-beb1-8b10187e301d/workspaces/db99fa0c-46a2-427f-aba6-fd76f1b86d7f/projects/61012b5cefba22ca453f11df/thumbnail"
                     *         },
                     *         {
                     *           "creation_time": "2021-07-28T10:05:43.819000+00:00",
                     *           "creator_id": "Example user",
                     *           "id": "61012bf776379a12afa0789c",
                     *           "name": "Example classification project - label hierarchy",
                     *           "storage_info": {},
                     *           "pipeline": {
                     *             "connections": [
                     *               {
                     *                 "from": "61012bf776379a12afa0789d",
                     *                 "to": "61012bf776379a12afa078a0"
                     *               }
                     *             ],
                     *             "tasks": [
                     *               {
                     *                 "id": "61012bf776379a12afa0789d",
                     *                 "task_type": "dataset",
                     *                 "title": "Dataset"
                     *               },
                     *               {
                     *                 "id": "61012bf776379a12afa078a0",
                     *                 "label_schema_id": "61012bf776379a12afa078b2",
                     *                 "labels": [
                     *                   {
                     *                     "color": "#0015ddff",
                     *                     "group": "default - Sample classification task",
                     *                     "hotkey": "",
                     *                     "id": "61012bf776379a12afa07894",
                     *                     "is_empty": false,
                     *                     "is_anomalous": false,
                     *                     "name": "animal",
                     *                     "parent_id": null
                     *                   },
                     *                   {
                     *                     "color": "#0015ffff",
                     *                     "group": "species",
                     *                     "hotkey": "ctrl+5",
                     *                     "id": "61012bf776379a12afa07895",
                     *                     "is_empty": false,
                     *                     "is_anomalous": false,
                     *                     "name": "horse",
                     *                     "parent_id": null
                     *                   },
                     *                   {
                     *                     "color": "#00ffffff",
                     *                     "group": "species",
                     *                     "hotkey": "ctrl+6",
                     *                     "id": "61012bf776379a12afa07896",
                     *                     "is_empty": false,
                     *                     "is_anomalous": false,
                     *                     "name": "donkey",
                     *                     "parent_id": null
                     *                   },
                     *                   {
                     *                     "color": "#00aaaaff",
                     *                     "group": "saddle_state",
                     *                     "hotkey": "ctrl+7",
                     *                     "id": "61012bf776379a12afa07897",
                     *                     "is_empty": false,
                     *                     "is_anomalous": false,
                     *                     "name": "saddled",
                     *                     "parent_id": null
                     *                   },
                     *                   {
                     *                     "color": "#00aaffff",
                     *                     "group": "saddle_state",
                     *                     "hotkey": "ctrl+8",
                     *                     "id": "61012bf776379a12afa07898",
                     *                     "is_empty": false,
                     *                     "is_anomalous": false,
                     *                     "name": "unsaddled",
                     *                     "parent_id": null
                     *                   },
                     *                   {
                     *                     "color": "#19e0a5ff",
                     *                     "group": "No class",
                     *                     "hotkey": "ctrl+0",
                     *                     "id": "61012bf776379a12afa07899",
                     *                     "is_empty": true,
                     *                     "is_anomalous": false,
                     *                     "name": "No class",
                     *                     "parent_id": null
                     *                   }
                     *                 ],
                     *                 "task_type": "classification",
                     *                 "title": "Sample classification task"
                     *               }
                     *             ]
                     *           },
                     *           "performance": {
                     *             "score": 0.7,
                     *             "task_performances": [
                     *               {
                     *                 "task_id": "61012bf776379a12afa078a0",
                     *                 "score": {
                     *                   "value": 0.7,
                     *                   "metric_type": "f-measure"
                     *                 }
                     *               }
                     *             ]
                     *           },
                     *           "thumbnail": "/api/v1/organizations/61b3a664-822d-45c5-beb1-8b10187e301d/workspaces/db99fa0c-46a2-427f-aba6-fd76f1b86d7f/projects/61012bf776379a12afa0789c/thumbnail"
                     *         },
                     *         {
                     *           "creation_time": "2021-07-28T10:09:31.764000+00:00",
                     *           "creator_id": "Example user",
                     *           "id": "61012cdb1d38a5e71ef3baf9",
                     *           "name": "Example classification project - label hierarchy",
                     *           "storage_info": {},
                     *           "pipeline": {
                     *             "connections": [
                     *               {
                     *                 "from": "61012cdb1d38a5e71ef3bafa",
                     *                 "to": "61012cdb1d38a5e71ef3bafd"
                     *               }
                     *             ],
                     *             "tasks": [
                     *               {
                     *                 "id": "61012cdb1d38a5e71ef3bafa",
                     *                 "task_type": "dataset",
                     *                 "title": "Dataset"
                     *               },
                     *               {
                     *                 "id": "61012cdb1d38a5e71ef3bafd",
                     *                 "label_schema_id": "61012cdb1d38a5e71ef3bafe",
                     *                 "labels": [
                     *                   {
                     *                     "color": "#0015ddff",
                     *                     "group": "default - Sample classification task",
                     *                     "hotkey": "",
                     *                     "id": "61012cdb1d38a5e71ef3baf1",
                     *                     "is_empty": false,
                     *                     "is_anomalous": false,
                     *                     "name": "animal",
                     *                     "parent_id": null
                     *                   },
                     *                   {
                     *                     "color": "#0015ffff",
                     *                     "group": "species",
                     *                     "hotkey": "ctrl+5",
                     *                     "id": "61012cdb1d38a5e71ef3baf2",
                     *                     "is_empty": false,
                     *                     "is_anomalous": false,
                     *                     "name": "horse",
                     *                     "parent_id": "61012cdb1d38a5e71ef3baf1"
                     *                   },
                     *                   {
                     *                     "color": "#00ffffff",
                     *                     "group": "species",
                     *                     "hotkey": "ctrl+6",
                     *                     "id": "61012cdb1d38a5e71ef3baf3",
                     *                     "is_empty": false,
                     *                     "is_anomalous": false,
                     *                     "name": "donkey",
                     *                     "parent_id": "61012cdb1d38a5e71ef3baf1"
                     *                   },
                     *                   {
                     *                     "color": "#00aaaaff",
                     *                     "group": "saddle_state",
                     *                     "hotkey": "ctrl+7",
                     *                     "id": "61012cdb1d38a5e71ef3baf4",
                     *                     "is_empty": false,
                     *                     "is_anomalous": false,
                     *                     "name": "saddled",
                     *                     "parent_id": null
                     *                   },
                     *                   {
                     *                     "color": "#00aaffff",
                     *                     "group": "saddle_state",
                     *                     "hotkey": "ctrl+8",
                     *                     "id": "61012cdb1d38a5e71ef3baf5",
                     *                     "is_empty": false,
                     *                     "is_anomalous": false,
                     *                     "name": "unsaddled",
                     *                     "parent_id": null
                     *                   },
                     *                   {
                     *                     "color": "#9ee8d3ff",
                     *                     "group": "No class",
                     *                     "hotkey": "ctrl+0",
                     *                     "id": "61012cdb1d38a5e71ef3baf6",
                     *                     "is_empty": true,
                     *                     "is_anomalous": false,
                     *                     "name": "No class",
                     *                     "parent_id": null
                     *                   }
                     *                 ],
                     *                 "task_type": "classification",
                     *                 "title": "Sample classification task"
                     *               }
                     *             ]
                     *           },
                     *           "performance": {
                     *             "score": 0.7,
                     *             "task_performances": [
                     *               {
                     *                 "task_id": "61012cdb1d38a5e71ef3bafd",
                     *                 "score": {
                     *                   "value": 0.7,
                     *                   "metric_type": "f-measure"
                     *                 }
                     *               }
                     *             ]
                     *           },
                     *           "thumbnail": "/api/v1/organizations/61b3a664-822d-45c5-beb1-8b10187e301d/workspaces/db99fa0c-46a2-427f-aba6-fd76f1b86d7f/projects/61012cdb1d38a5e71ef3baf9/thumbnail"
                     *         },
                     *         {
                     *           "creation_time": "2022-06-17T10:33:29.896000+00:00",
                     *           "id": "6290a8f9003ddb3967f14385",
                     *           "name": "Anomaly Example",
                     *           "storage_info": {},
                     *           "performance": {
                     *             "score": 0.7,
                     *             "task_performances": [
                     *               {
                     *                 "task_id": "6290a8f9003ddb3967f14383",
                     *                 "score": {
                     *                   "value": 0.7,
                     *                   "metric_type": "accuracy"
                     *                 }
                     *               }
                     *             ]
                     *           },
                     *           "pipeline": {
                     *             "connections": [
                     *               {
                     *                 "from": "6290a8f9003ddb3967f14383",
                     *                 "to": "6290a8f9003ddb3967f14384"
                     *               }
                     *             ],
                     *             "tasks": [
                     *               {
                     *                 "id": "6290a8f9003ddb3967f14383",
                     *                 "task_type": "dataset",
                     *                 "title": "Dataset"
                     *               },
                     *               {
                     *                 "id": "6290a8f9003ddb3967f14384",
                     *                 "label_schema_id": "6290a8f9003ddb3967f1438f",
                     *                 "labels": [
                     *                   {
                     *                     "color": "#8bae46ff",
                     *                     "group": "default - Anomaly task",
                     *                     "hotkey": "",
                     *                     "id": "6290a8f9003ddb3967f1438c",
                     *                     "is_empty": false,
                     *                     "is_anomalous": false,
                     *                     "name": "Normal",
                     *                     "parent_id": null
                     *                   },
                     *                   {
                     *                     "color": "#ff5662ff",
                     *                     "group": "default - Anomaly task",
                     *                     "hotkey": "",
                     *                     "id": "6290a8f9003ddb3967f1438d",
                     *                     "is_empty": false,
                     *                     "is_anomalous": false,
                     *                     "name": "Anomalous",
                     *                     "parent_id": null
                     *                   }
                     *                 ],
                     *                 "task_type": "anomaly",
                     *                 "title": "Anomaly task"
                     *               }
                     *             ]
                     *           },
                     *           "thumbnail": "/api/v1/organizations/61b3a664-822d-45c5-beb1-8b10187e301d/workspaces/db99fa0c-46a2-427f-aba6-fd76f1b86d7f/projects/6290a8f9003ddb3967f14385/thumbnail"
                     *         },
                     *         {
                     *           "creation_time": "2022-05-30T07:04:01.917000+00:00",
                     *           "id": "62946c61003ddb3967f14750",
                     *           "name": "Card detection",
                     *           "storage_info": {},
                     *           "performance": {
                     *             "score": 0.24,
                     *             "task_performances": [
                     *               {
                     *                 "task_id": "62946c61003ddb3967f1474d",
                     *                 "score": {
                     *                   "value": 0.24,
                     *                   "metric_type": "accuracy"
                     *                 }
                     *               }
                     *             ]
                     *           },
                     *           "pipeline": {
                     *             "connections": [
                     *               {
                     *                 "from": "62946c61003ddb3967f1474c",
                     *                 "to": "62946c61003ddb3967f1474d"
                     *               },
                     *               {
                     *                 "from": "62946c61003ddb3967f1474d",
                     *                 "to": "62946c61003ddb3967f1474e"
                     *               },
                     *               {
                     *                 "from": "62946c61003ddb3967f1474e",
                     *                 "to": "62946c61003ddb3967f1474f"
                     *               }
                     *             ],
                     *             "tasks": [
                     *               {
                     *                 "id": "62946c61003ddb3967f1474c",
                     *                 "task_type": "dataset",
                     *                 "title": "Dataset"
                     *               },
                     *               {
                     *                 "id": "62946c61003ddb3967f1474d",
                     *                 "label_schema_id": "62946c62003ddb3967f1475f",
                     *                 "labels": [
                     *                   {
                     *                     "color": "#26518eff",
                     *                     "group": "Default group root task",
                     *                     "hotkey": "",
                     *                     "id": "62946c62003ddb3967f1475b",
                     *                     "is_empty": false,
                     *                     "is_anomalous": false,
                     *                     "name": "Card",
                     *                     "parent_id": null
                     *                   },
                     *                   {
                     *                     "color": "#a4fc32ff",
                     *                     "group": "No object",
                     *                     "hotkey": "",
                     *                     "id": "62946c62003ddb3967f1475d",
                     *                     "is_empty": true,
                     *                     "is_anomalous": false,
                     *                     "name": "No object",
                     *                     "parent_id": null
                     *                   }
                     *                 ],
                     *                 "task_type": "detection",
                     *                 "title": "Detection task"
                     *               },
                     *               {
                     *                 "id": "62946c61003ddb3967f1474e",
                     *                 "task_type": "crop",
                     *                 "title": "Crop task"
                     *               },
                     *               {
                     *                 "id": "62946c61003ddb3967f1474f",
                     *                 "label_schema_id": "62946c62003ddb3967f14770",
                     *                 "labels": [
                     *                   {
                     *                     "color": "#ff5662ff",
                     *                     "group": "Default group root task___Suit",
                     *                     "hotkey": "",
                     *                     "id": "62946c62003ddb3967f14760",
                     *                     "is_empty": false,
                     *                     "is_anomalous": false,
                     *                     "name": "Hearts",
                     *                     "parent_id": "62946c62003ddb3967f1475b"
                     *                   },
                     *                   {
                     *                     "color": "#81407bff",
                     *                     "group": "Default group root task___Suit",
                     *                     "hotkey": "",
                     *                     "id": "62946c62003ddb3967f14762",
                     *                     "is_empty": false,
                     *                     "is_anomalous": false,
                     *                     "name": "Diamonds",
                     *                     "parent_id": "62946c62003ddb3967f1475b"
                     *                   },
                     *                   {
                     *                     "color": "#f7dab3ff",
                     *                     "group": "Default group root task___Suit",
                     *                     "hotkey": "",
                     *                     "id": "62946c62003ddb3967f14763",
                     *                     "is_empty": false,
                     *                     "is_anomalous": false,
                     *                     "name": "Spades",
                     *                     "parent_id": "62946c62003ddb3967f1475b"
                     *                   },
                     *                   {
                     *                     "color": "#80e9afff",
                     *                     "group": "Default group root task___Suit",
                     *                     "hotkey": "",
                     *                     "id": "62946c62003ddb3967f14764",
                     *                     "is_empty": false,
                     *                     "is_anomalous": false,
                     *                     "name": "Clubs",
                     *                     "parent_id": "62946c62003ddb3967f1475b"
                     *                   },
                     *                   {
                     *                     "color": "#ff7d00ff",
                     *                     "group": "Default group root task___Value",
                     *                     "hotkey": "",
                     *                     "id": "62946c62003ddb3967f14765",
                     *                     "is_empty": false,
                     *                     "is_anomalous": false,
                     *                     "name": "Seven",
                     *                     "parent_id": "62946c62003ddb3967f1475b"
                     *                   },
                     *                   {
                     *                     "color": "#c9e649ff",
                     *                     "group": "Default group root task___Value",
                     *                     "hotkey": "",
                     *                     "id": "62946c62003ddb3967f14767",
                     *                     "is_empty": false,
                     *                     "is_anomalous": false,
                     *                     "name": "Eight",
                     *                     "parent_id": "62946c62003ddb3967f1475b"
                     *                   },
                     *                   {
                     *                     "color": "#25a18eff",
                     *                     "group": "Default group root task___Value",
                     *                     "hotkey": "",
                     *                     "id": "62946c62003ddb3967f14768",
                     *                     "is_empty": false,
                     *                     "is_anomalous": false,
                     *                     "name": "Nine",
                     *                     "parent_id": "62946c62003ddb3967f1475b"
                     *                   },
                     *                   {
                     *                     "color": "#00a5cfff",
                     *                     "group": "Default group root task___Value",
                     *                     "hotkey": "",
                     *                     "id": "62946c62003ddb3967f14769",
                     *                     "is_empty": false,
                     *                     "is_anomalous": false,
                     *                     "name": "Ten",
                     *                     "parent_id": "62946c62003ddb3967f1475b"
                     *                   },
                     *                   {
                     *                     "color": "#708541ff",
                     *                     "group": "Default group root task___Value",
                     *                     "hotkey": "",
                     *                     "id": "62946c62003ddb3967f1476a",
                     *                     "is_empty": false,
                     *                     "is_anomalous": false,
                     *                     "name": "Jack",
                     *                     "parent_id": "62946c62003ddb3967f1475b"
                     *                   },
                     *                   {
                     *                     "color": "#26518eff",
                     *                     "group": "Default group root task___Value",
                     *                     "hotkey": "",
                     *                     "id": "62946c62003ddb3967f1476b",
                     *                     "is_empty": false,
                     *                     "is_anomalous": false,
                     *                     "name": "Queen",
                     *                     "parent_id": "62946c62003ddb3967f1475b"
                     *                   },
                     *                   {
                     *                     "color": "#5b69ffff",
                     *                     "group": "Default group root task___Value",
                     *                     "hotkey": "",
                     *                     "id": "62946c62003ddb3967f1476c",
                     *                     "is_empty": false,
                     *                     "is_anomalous": false,
                     *                     "name": "King",
                     *                     "parent_id": "62946c62003ddb3967f1475b"
                     *                   },
                     *                   {
                     *                     "color": "#f15b85ff",
                     *                     "group": "Default group root task___Value",
                     *                     "hotkey": "",
                     *                     "id": "62946c62003ddb3967f1476d",
                     *                     "is_empty": false,
                     *                     "is_anomalous": false,
                     *                     "name": "Ace",
                     *                     "parent_id": "62946c62003ddb3967f1475b"
                     *                   },
                     *                   {
                     *                     "color": "#29d5ecff",
                     *                     "group": "No class",
                     *                     "hotkey": "",
                     *                     "id": "62946c62003ddb3967f1476e",
                     *                     "is_empty": true,
                     *                     "is_anomalous": false,
                     *                     "name": "No class",
                     *                     "parent_id": "62946c62003ddb3967f1475b"
                     *                   }
                     *                 ],
                     *                 "task_type": "classification",
                     *                 "title": "Classification task"
                     *               }
                     *             ]
                     *           },
                     *           "thumbnail": "/api/v1/organizations/61b3a664-822d-45c5-beb1-8b10187e301d/workspaces/db99fa0c-46a2-427f-aba6-fd76f1b86d7f/projects/62946c61003ddb3967f14750/thumbnail"
                     *         },
                     *         {
                     *           "creation_time": "2024-10-16T14:45:01.917000+00:00",
                     *           "id": "62946c61003ddb3967f14751",
                     *           "name": "Human pose detection",
                     *           "storage_info": {},
                     *           "performance": {
                     *             "score": 0.54,
                     *             "task_performances": [
                     *               {
                     *                 "task_id": "62946c61003ddb3967f1474f",
                     *                 "score": {
                     *                   "value": 0.54,
                     *                   "metric_type": "accuracy"
                     *                 }
                     *               }
                     *             ]
                     *           },
                     *           "pipeline": {
                     *             "connections": [
                     *               {
                     *                 "from": "62946c61003ddb3967f1474e",
                     *                 "to": "62946c61003ddb3967f1474d"
                     *               }
                     *             ],
                     *             "tasks": [
                     *               {
                     *                 "id": "62946c61003ddb3967f1474e",
                     *                 "task_type": "dataset",
                     *                 "title": "Dataset"
                     *               },
                     *               {
                     *                 "task_type": "keypoint_detection",
                     *                 "title": "Keypoint detection task",
                     *                 "id": "62946c61003ddb3967f1474d",
                     *                 "label_schema_id": "62946c62003ddb3967f14760",
                     *                 "labels": [
                     *                   {
                     *                     "color": "#26518eff",
                     *                     "group": "Default keypoint detection task",
                     *                     "hotkey": "",
                     *                     "id": "62946c62003ddb3967f1475c",
                     *                     "is_empty": false,
                     *                     "is_anomalous": false,
                     *                     "name": "head",
                     *                     "parent_id": null
                     *                   },
                     *                   {
                     *                     "color": "#a4fc32ff",
                     *                     "group": "Default keypoint detection task",
                     *                     "hotkey": "",
                     *                     "id": "62946c62003ddb3967f1475e",
                     *                     "is_empty": false,
                     *                     "is_anomalous": false,
                     *                     "name": "neck",
                     *                     "parent_id": null
                     *                   }
                     *                 ],
                     *                 "keypoint_structure": {
                     *                   "edges": [
                     *                     {
                     *                       "nodes": [
                     *                         "62946c62003ddb3967f1475c",
                     *                         "62946c62003ddb3967f1475e"
                     *                       ]
                     *                     }
                     *                   ],
                     *                   "positions": [
                     *                     {
                     *                       "label": "62946c62003ddb3967f1475c",
                     *                       "x": 0.1,
                     *                       "y": 0.2
                     *                     },
                     *                     {
                     *                       "label": "62946c62003ddb3967f1475e",
                     *                       "x": 0.3,
                     *                       "y": 0.4
                     *                     }
                     *                   ]
                     *                 }
                     *               }
                     *             ]
                     *           },
                     *           "thumbnail": "/api/v1/organizations/61b3a664-822d-45c5-beb1-8b10187e301d/workspaces/db99fa0c-46a2-427f-aba6-fd76f1b86d7f/projects/62946c61003ddb3967f14751/thumbnail"
                     *         }
                     *       ],
                     *       "next_page": "",
                     *       "project_counts": 9,
                     *       "project_page_count": 10
                     *     } */
                    'application/json': {
                        /** @description Array of projects */
                        projects?: {
                            /** @description Project name */
                            name: string;
                            /**
                             * @description Mongo ID of the object
                             * @example 60d31793d5f1fb7e6e3c1a4c
                             */
                            id: string;
                            pipeline: {
                                /** @description List of connections between pipeline tasks */
                                connections: {
                                    /**
                                     * @description Mongo ID of the object
                                     * @example 60d31793d5f1fb7e6e3c1a4c
                                     */
                                    from?: string;
                                    /**
                                     * @description Mongo ID of the object
                                     * @example 60d31793d5f1fb7e6e3c1a4c
                                     */
                                    to?: string;
                                }[];
                                /** @description List of tasks in the pipeline */
                                tasks: {
                                    /** @description Task title, must be unique */
                                    title: string;
                                    /** @description Task type; should be one of: [ classification, detection, segmentation, crop, dataset ] */
                                    task_type: string;
                                    /** @description List of labels */
                                    labels?: {
                                        /** @description Label name, must be unique */
                                        name: string;
                                        /**
                                         * @description Mongo ID of the object
                                         * @example 60d31793d5f1fb7e6e3c1a4c
                                         */
                                        id: string;
                                        /** @description Label color, picked at random if not specified */
                                        color: string;
                                        /** @description Name of label group */
                                        group: string;
                                        /** @description Name of parent label */
                                        parent_id: string | null;
                                        /** @description Indicates whether the label is an empty label */
                                        is_empty: boolean;
                                        /** @description Indicates whether the label is anomalous or not */
                                        is_anomalous: boolean;
                                        /** @description Indicates whether the label is deleted */
                                        is_deleted?: boolean;
                                        /** @description Key or combination of key to select this label. Can be empty (no key). */
                                        hotkey: string;
                                    }[];
                                    /**
                                     * @description Mongo ID of the object
                                     * @example 60d31793d5f1fb7e6e3c1a4c
                                     */
                                    id: string;
                                    /**
                                     * @description Mongo ID of the object
                                     * @example 60d31793d5f1fb7e6e3c1a4c
                                     */
                                    label_schema_id?: string;
                                    /** @description The keypoint structure which holds the edges of the graph, and the position of the keypoints. Supported only for Keypoint Detection tasks. */
                                    keypoint_structure?: {
                                        edges?: {
                                            nodes: string[];
                                        }[];
                                        positions?: {
                                            /**
                                             * @description Mongo ID of the object
                                             * @example 60d31793d5f1fb7e6e3c1a4c
                                             */
                                            label: string;
                                            /** Format: float */
                                            x: number;
                                            /** Format: float */
                                            y: number;
                                        }[];
                                    };
                                }[];
                            };
                            /** @description Creation time of the project */
                            creation_time: string;
                            /** @description Identifier of the user who created the project */
                            creator_id?: string;
                            performance?: {
                                /**
                                 * Format: float
                                 * @description Average score of task scores of a project, null if no model is trained.
                                 */
                                score?: number | null;
                                task_performances?: {
                                    /**
                                     * @description Mongo ID of the object
                                     * @example 60d31793d5f1fb7e6e3c1a4c
                                     */
                                    task_id: string;
                                    /** @description Model score for the task, null if no model is trained. */
                                    score: null | {
                                        /**
                                         * Format: float
                                         * @description Value of the score.
                                         */
                                        value: number;
                                        /** @description Name of the algorithm that is used to calculate the metric value, eg dice average, f-measure, etc. */
                                        metric_type: string;
                                    };
                                }[];
                            };
                            /** @description Thumbnail URL */
                            thumbnail: string;
                            storage_info: {
                                /** Project size in bytes */
                                size?: number;
                            };
                        }[];
                        /** @description URL to the next projects page */
                        next_page?: string;
                        /** @description Total number of projects in the workspace */
                        project_counts?: number;
                        /** @description Total number of projects in the response */
                        project_page_count?: number;
                    };
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    CreateProject: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @description Project name */
                    name: string;
                    pipeline: {
                        /** @description List of connections between pipeline tasks */
                        connections: {
                            /** @description Title of source task */
                            from: string;
                            /** @description Title of destination task */
                            to: string;
                        }[];
                        /** @description List of tasks in the pipeline */
                        tasks: {
                            /** @description Task title, must be unique */
                            title: string;
                            /**
                             * @description Type of task, can only be one of the predefined task types
                             * @enum {string}
                             */
                            task_type:
                                | 'dataset'
                                | 'crop'
                                | 'classification'
                                | 'detection'
                                | 'segmentation'
                                | 'rotated_detection'
                                | 'instance_segmentation'
                                | 'anomaly'
                                | 'keypoint_detection';
                            /** @description List of labels */
                            labels?: {
                                /** @description Label name, must be unique */
                                name: string;
                                /** @description Label color, picked at random if not specified */
                                color?: string;
                                /** @description Key or combination of key to select this label. Can be empty (no key). */
                                hotkey?: string;
                                /** @description Name of label group */
                                group?: string;
                                /** @description Name of parent label */
                                parent_id?: unknown;
                            }[];
                            /** @description The keypoint structure which holds the edges of the graph, and the position of the keypoints. Supported only for Keypoint Detection tasks. */
                            keypoint_structure?: {
                                edges?: {
                                    nodes: string[];
                                }[];
                                positions?: {
                                    label: string;
                                    /** Format: float */
                                    x: number;
                                    /** Format: float */
                                    y: number;
                                }[];
                            };
                        }[];
                    };
                };
            };
        };
        responses: {
            /** @description Project successfully created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Project name */
                        name?: string;
                        /**
                         * @description Mongo ID of the object
                         * @example 60d31793d5f1fb7e6e3c1a4c
                         */
                        id?: string;
                        pipeline: {
                            /** @description List of connections between pipeline tasks */
                            connections: {
                                /**
                                 * @description Mongo ID of the object
                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                 */
                                from?: string;
                                /**
                                 * @description Mongo ID of the object
                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                 */
                                to?: string;
                            }[];
                            /** @description List of tasks in the pipeline */
                            tasks: {
                                /** @description Task title, must be unique */
                                title: string;
                                /** @description Task type; should be one of: [ classification, detection, segmentation, crop, dataset ] */
                                task_type: string;
                                /** @description List of labels */
                                labels?: {
                                    /** @description Label name, must be unique */
                                    name: string;
                                    /**
                                     * @description Mongo ID of the object
                                     * @example 60d31793d5f1fb7e6e3c1a4c
                                     */
                                    id: string;
                                    /** @description Label color, picked at random if not specified */
                                    color: string;
                                    /** @description Name of label group */
                                    group: string;
                                    /** @description Name of parent label */
                                    parent_id: string | null;
                                    /** @description Indicates whether the label is an empty label */
                                    is_empty: boolean;
                                    /** @description Indicates whether the label is anomalous or not */
                                    is_anomalous: boolean;
                                    /** @description Indicates whether the label is deleted */
                                    is_deleted?: boolean;
                                    /** @description Key or combination of key to select this label. Can be empty (no key). */
                                    hotkey: string;
                                }[];
                                /**
                                 * @description Mongo ID of the object
                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                 */
                                id: string;
                                /**
                                 * @description Mongo ID of the object
                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                 */
                                label_schema_id?: string;
                                /** @description The keypoint structure which holds the edges of the graph, and the position of the keypoints. Supported only for Keypoint Detection tasks. */
                                keypoint_structure?: {
                                    edges?: {
                                        nodes: string[];
                                    }[];
                                    positions?: {
                                        /**
                                         * @description Mongo ID of the object
                                         * @example 60d31793d5f1fb7e6e3c1a4c
                                         */
                                        label: string;
                                        /** Format: float */
                                        x: number;
                                        /** Format: float */
                                        y: number;
                                    }[];
                                };
                            }[];
                        };
                        /** @description Creation time of the project */
                        creation_time?: string;
                        /** @description The ID of the user who created the project */
                        creator_id?: string;
                        performance?: {
                            /**
                             * Format: float
                             * @description Average score of task scores of a project, null if no model is trained.
                             */
                            score?: number | null;
                            task_performances?: {
                                /**
                                 * @description Mongo ID of the object
                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                 */
                                task_id: string;
                                /** @description Model score for the task, null if no model is trained. */
                                score: null | {
                                    /**
                                     * Format: float
                                     * @description Value of the score.
                                     */
                                    value: number;
                                    /** @description Name of the algorithm that is used to calculate the metric value, eg dice average, f-measure, etc. */
                                    metric_type: string;
                                };
                            }[];
                        };
                        /** @description Thumbnail url */
                        thumbnail?: string;
                        /** @description List of datasets in the project */
                        datasets: {
                            /**
                             * @description Mongo ID of the object
                             * @example 60d31793d5f1fb7e6e3c1a4c
                             */
                            id: string;
                            /** @description Name of the dataset */
                            name: string;
                            /** @description Creation time of the dataset */
                            creation_time: string;
                            /** @description Indicates if the dataset is used to train the active model */
                            use_for_training: boolean;
                        }[];
                        storage_info: {
                            /** Project size in bytes */
                            size?: number;
                        };
                    };
                };
            };
            /** @description Bad request. The provided information is insufficient to create a project. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    GetAllProjectsNamesInAWorkspace: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The requested projects names */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "projects": [
                     *         {
                     *           "id": "610123e6efba22ca453f11bd",
                     *           "name": "Example segmentation project"
                     *         },
                     *         {
                     *           "id": "60d31793d5f1fb7e6e3c1a4c",
                     *           "name": "Example detection project"
                     *         },
                     *         {
                     *           "id": "61012cdb1d38a5e71ef3baf9",
                     *           "name": "Example classification project"
                     *         },
                     *         {
                     *           "id": "61012b5cefba22ca453f11df",
                     *           "name": "Example classification project - label hierarchy"
                     *         },
                     *         {
                     *           "id": "61012bf776379a12afa0789c",
                     *           "name": "Example classification project - label hierarchy"
                     *         },
                     *         {
                     *           "id": "62adb9b2a4002f5a6757533c",
                     *           "name": "Anomaly Detection Example"
                     *         },
                     *         {
                     *           "id": "62946c61003ddb3967f14750",
                     *           "name": "Card detection"
                     *         }
                     *       ]
                     *     } */
                    'application/json': {
                        projects?: {
                            /** @description Project name */
                            name: string;
                            /**
                             * @description Mongo ID of the object
                             * @example 60d31793d5f1fb7e6e3c1a4c
                             */
                            id: string;
                        }[];
                    };
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    GetProjectInfo: {
        parameters: {
            query?: {
                /** @description Set to True to also include the deleted labels in the response.  If set to true, each label will have a field called is_deleted that will be set to true if the label has been deleted. Default value is False. */
                include_deleted_labels?: boolean;
                /** @description Set to true to return the project size in the response. Default is False. */
                with_size?: boolean;
            };
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Info about the requested project */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Project name */
                        name?: string;
                        /**
                         * @description Mongo ID of the object
                         * @example 60d31793d5f1fb7e6e3c1a4c
                         */
                        id?: string;
                        pipeline: {
                            /** @description List of connections between pipeline tasks */
                            connections: {
                                /**
                                 * @description Mongo ID of the object
                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                 */
                                from?: string;
                                /**
                                 * @description Mongo ID of the object
                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                 */
                                to?: string;
                            }[];
                            /** @description List of tasks in the pipeline */
                            tasks: {
                                /** @description Task title, must be unique */
                                title: string;
                                /** @description Task type; should be one of: [ classification, detection, segmentation, crop, dataset ] */
                                task_type: string;
                                /** @description List of labels */
                                labels?: {
                                    /** @description Label name, must be unique */
                                    name: string;
                                    /**
                                     * @description Mongo ID of the object
                                     * @example 60d31793d5f1fb7e6e3c1a4c
                                     */
                                    id: string;
                                    /** @description Label color, picked at random if not specified */
                                    color: string;
                                    /** @description Name of label group */
                                    group: string;
                                    /** @description Name of parent label */
                                    parent_id: string | null;
                                    /** @description Indicates whether the label is an empty label */
                                    is_empty: boolean;
                                    /** @description Indicates whether the label is anomalous or not */
                                    is_anomalous: boolean;
                                    /** @description Indicates whether the label is deleted */
                                    is_deleted?: boolean;
                                    /** @description Key or combination of key to select this label. Can be empty (no key). */
                                    hotkey: string;
                                }[];
                                /**
                                 * @description Mongo ID of the object
                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                 */
                                id: string;
                                /**
                                 * @description Mongo ID of the object
                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                 */
                                label_schema_id?: string;
                                /** @description The keypoint structure which holds the edges of the graph, and the position of the keypoints. Supported only for Keypoint Detection tasks. */
                                keypoint_structure?: {
                                    edges?: {
                                        nodes: string[];
                                    }[];
                                    positions?: {
                                        /**
                                         * @description Mongo ID of the object
                                         * @example 60d31793d5f1fb7e6e3c1a4c
                                         */
                                        label: string;
                                        /** Format: float */
                                        x: number;
                                        /** Format: float */
                                        y: number;
                                    }[];
                                };
                            }[];
                        };
                        /** @description Creation time of the project */
                        creation_time?: string;
                        /** @description The ID of the user who created the project */
                        creator_id?: string;
                        performance?: {
                            /**
                             * Format: float
                             * @description Average score of task scores of a project, null if no model is trained.
                             */
                            score?: number | null;
                            task_performances?: {
                                /**
                                 * @description Mongo ID of the object
                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                 */
                                task_id: string;
                                /** @description Model score for the task, null if no model is trained. */
                                score: null | {
                                    /**
                                     * Format: float
                                     * @description Value of the score.
                                     */
                                    value: number;
                                    /** @description Name of the algorithm that is used to calculate the metric value, eg dice average, f-measure, etc. */
                                    metric_type: string;
                                };
                            }[];
                        };
                        /** @description Thumbnail url */
                        thumbnail?: string;
                        /** @description List of datasets in the project */
                        datasets: {
                            /**
                             * @description Mongo ID of the object
                             * @example 60d31793d5f1fb7e6e3c1a4c
                             */
                            id: string;
                            /** @description Name of the dataset */
                            name: string;
                            /** @description Creation time of the dataset */
                            creation_time: string;
                            /** @description Indicates if the dataset is used to train the active model */
                            use_for_training: boolean;
                        }[];
                        storage_info: {
                            /** Project size in bytes */
                            size?: number;
                        };
                    };
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    EditProject: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @description Project name */
                    name: string;
                    pipeline: {
                        /** @description List of connections between pipeline tasks */
                        connections: {
                            /**
                             * @description Mongo ID of the object
                             * @example 60d31793d5f1fb7e6e3c1a4c
                             */
                            from: string;
                            /**
                             * @description Mongo ID of the object
                             * @example 60d31793d5f1fb7e6e3c1a4c
                             */
                            to: string;
                        }[];
                        /** @description List of tasks in the pipeline */
                        tasks: {
                            /** @description Task title, must be unique */
                            title: string;
                            /** @description Task type; should be one of: [ classification, detection, segmentation, anomaly, crop, dataset ] */
                            task_type: string;
                            /**
                             * @description Mongo ID of the object
                             * @example 60d31793d5f1fb7e6e3c1a4c
                             */
                            id: string;
                            /** @description List of labels */
                            labels?: {
                                /** @description Label name, must be unique */
                                name: string;
                                /**
                                 * @description Mongo ID of the object
                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                 */
                                id?: string;
                                /** @description Label color, picked at random if not specified */
                                color: string;
                                /** @description Key or combination of key to select this label. Can be empty (no key). */
                                hotkey?: string;
                                /** @description Name of label group */
                                group?: string;
                                /** @description Indicates whether the label is an empty label */
                                readonly is_empty?: boolean;
                                /** @description Indicates whether the label is going to be deleted */
                                is_deleted?: boolean;
                                /** @description Name of parent label */
                                parent_id?: unknown;
                                /** @description On label schema change, whether to mark the annotations linked to this label as "to be revisited" by the user */
                                revisit_affected_annotations?: boolean;
                            }[];
                            /**
                             * @description Mongo ID of the object
                             * @example 60d31793d5f1fb7e6e3c1a4c
                             */
                            label_schema_id?: string | null;
                            /** @description The keypoint structure which holds the edges of the graph, and the position of the keypoints. Supported only for Keypoint Detection tasks. */
                            keypoint_structure?: {
                                edges?: {
                                    nodes: string[];
                                }[];
                                positions?: {
                                    /**
                                     * @description Mongo ID of the object
                                     * @example 60d31793d5f1fb7e6e3c1a4c
                                     */
                                    label: string;
                                    /** Format: float */
                                    x: number;
                                    /** Format: float */
                                    y: number;
                                }[];
                            };
                        }[];
                    };
                    /**
                     * @description Mongo ID of the object
                     * @example 60d31793d5f1fb7e6e3c1a4c
                     */
                    id: string;
                    /** @description Creation time of the project */
                    creation_time?: string;
                    /** @description The username of the creator of the project */
                    creator_id?: string;
                    performance?: {
                        /**
                         * Format: float
                         * @description Average score of task scores of a project, null if no model is trained.
                         */
                        score?: number | null;
                        task_performances?: {
                            /**
                             * @description Mongo ID of the object
                             * @example 60d31793d5f1fb7e6e3c1a4c
                             */
                            task_id: string;
                            /** @description Model score for the task, null if no model is trained. */
                            score: null | {
                                /**
                                 * Format: float
                                 * @description Value of the score.
                                 */
                                value: number;
                                /** @description Name of the algorithm that is used to calculate the metric value, eg dice average, f-measure, etc. */
                                metric_type: string;
                            };
                        }[];
                    };
                    /** @description Thumbnail url */
                    thumbnail?: string;
                    /** @description List of datasets in the project */
                    datasets?: {
                        /**
                         * @description Mongo ID of the object
                         * @example 60d31793d5f1fb7e6e3c1a4c
                         */
                        id?: string;
                        /** @description Name of the dataset */
                        name?: string;
                    }[];
                };
            };
        };
        responses: {
            /** @description Project successfully edited */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Project name */
                        name?: string;
                        /**
                         * @description Mongo ID of the object
                         * @example 60d31793d5f1fb7e6e3c1a4c
                         */
                        id?: string;
                        pipeline: {
                            /** @description List of connections between pipeline tasks */
                            connections: {
                                /**
                                 * @description Mongo ID of the object
                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                 */
                                from?: string;
                                /**
                                 * @description Mongo ID of the object
                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                 */
                                to?: string;
                            }[];
                            /** @description List of tasks in the pipeline */
                            tasks: {
                                /** @description Task title, must be unique */
                                title: string;
                                /** @description Task type; should be one of: [ classification, detection, segmentation, crop, dataset ] */
                                task_type: string;
                                /** @description List of labels */
                                labels?: {
                                    /** @description Label name, must be unique */
                                    name: string;
                                    /**
                                     * @description Mongo ID of the object
                                     * @example 60d31793d5f1fb7e6e3c1a4c
                                     */
                                    id: string;
                                    /** @description Label color, picked at random if not specified */
                                    color: string;
                                    /** @description Name of label group */
                                    group: string;
                                    /** @description Name of parent label */
                                    parent_id: string | null;
                                    /** @description Indicates whether the label is an empty label */
                                    is_empty: boolean;
                                    /** @description Indicates whether the label is anomalous or not */
                                    is_anomalous: boolean;
                                    /** @description Indicates whether the label is deleted */
                                    is_deleted?: boolean;
                                    /** @description Key or combination of key to select this label. Can be empty (no key). */
                                    hotkey: string;
                                }[];
                                /**
                                 * @description Mongo ID of the object
                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                 */
                                id: string;
                                /**
                                 * @description Mongo ID of the object
                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                 */
                                label_schema_id?: string;
                                /** @description The keypoint structure which holds the edges of the graph, and the position of the keypoints. Supported only for Keypoint Detection tasks. */
                                keypoint_structure?: {
                                    edges?: {
                                        nodes: string[];
                                    }[];
                                    positions?: {
                                        /**
                                         * @description Mongo ID of the object
                                         * @example 60d31793d5f1fb7e6e3c1a4c
                                         */
                                        label: string;
                                        /** Format: float */
                                        x: number;
                                        /** Format: float */
                                        y: number;
                                    }[];
                                };
                            }[];
                        };
                        /** @description Creation time of the project */
                        creation_time?: string;
                        /** @description The ID of the user who created the project */
                        creator_id?: string;
                        performance?: {
                            /**
                             * Format: float
                             * @description Average score of task scores of a project, null if no model is trained.
                             */
                            score?: number | null;
                            task_performances?: {
                                /**
                                 * @description Mongo ID of the object
                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                 */
                                task_id: string;
                                /** @description Model score for the task, null if no model is trained. */
                                score: null | {
                                    /**
                                     * Format: float
                                     * @description Value of the score.
                                     */
                                    value: number;
                                    /** @description Name of the algorithm that is used to calculate the metric value, eg dice average, f-measure, etc. */
                                    metric_type: string;
                                };
                            }[];
                        };
                        /** @description Thumbnail url */
                        thumbnail?: string;
                        /** @description List of datasets in the project */
                        datasets: {
                            /**
                             * @description Mongo ID of the object
                             * @example 60d31793d5f1fb7e6e3c1a4c
                             */
                            id: string;
                            /** @description Name of the dataset */
                            name: string;
                            /** @description Creation time of the dataset */
                            creation_time: string;
                            /** @description Indicates if the dataset is used to train the active model */
                            use_for_training: boolean;
                        }[];
                        storage_info: {
                            /** Project size in bytes */
                            size?: number;
                        };
                    };
                };
            };
            /** @description Request body is invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
            /** @description Requested project cannot be edited */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    DeleteProject: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully deleted project */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
            /** @description Requested project cannot be deleted due to running jobs */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    DownloadProjectThumbnail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The requested project thumbnail */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'image/*': string;
                };
            };
            /** @description No media in project. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status: 200 | 201 | 202 | 203 | 204 | 205 | 206;
                        /** @description Message from server */
                        message: string;
                    };
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    GetDatasetsInfo: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Info of the datasets in project */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Array of datasets */
                        datasets?: {
                            /**
                             * @description Mongo ID of the object
                             * @example 60d31793d5f1fb7e6e3c1a4c
                             */
                            id?: string;
                            /** @description Dataset name */
                            name?: string;
                            /** @description Whether dataset is used for training */
                            use_for_training?: boolean;
                            /** @description Creation time of the dataset */
                            creation_time?: string;
                        }[];
                    };
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    CreateDataset: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /** @description Dataset name */
                    name: string;
                };
            };
        };
        responses: {
            /** @description Created dataset successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /**
                         * @description Mongo ID of the object
                         * @example 60d31793d5f1fb7e6e3c1a4c
                         */
                        id?: string;
                        /** @description Dataset name */
                        name?: string;
                        /** @description Whether dataset is used for training */
                        use_for_training?: boolean;
                        /** @description Creation time of the dataset */
                        creation_time?: string;
                    };
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
            /** @description dataset name already exists. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    GetDatasetInfo: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
                /** @description The ID of the dataset in the project. */
                dataset_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Info about the dataset */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /**
                         * @description Mongo ID of the object
                         * @example 60d31793d5f1fb7e6e3c1a4c
                         */
                        id?: string;
                        /** @description Dataset name */
                        name?: string;
                        /** @description Whether dataset is used for training */
                        use_for_training?: boolean;
                        /** @description Creation time of the dataset */
                        creation_time?: string;
                    };
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    UpdateDatasetInfo: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
                /** @description The ID of the dataset in the project. */
                dataset_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /** @description Dataset name */
                    name?: string;
                };
            };
        };
        responses: {
            /** @description Updated info about dataset */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /**
                         * @description Mongo ID of the object
                         * @example 60d31793d5f1fb7e6e3c1a4c
                         */
                        id?: string;
                        /** @description Dataset name */
                        name?: string;
                        /** @description Whether dataset is used for training */
                        use_for_training?: boolean;
                        /** @description Creation time of the dataset */
                        creation_time?: string;
                    };
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
            /** @description Dataset with same name already exists. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    DeleteDataset: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
                /** @description The ID of the dataset in the project. */
                dataset_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Dataset deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status: 200 | 201 | 202 | 203 | 204 | 205 | 206;
                        /** @description Message from server */
                        message: string;
                    };
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    GetDatasetStatistics: {
        parameters: {
            query?: {
                /** @description Provide the task ID to get the statistics specifically for that task. For example in a task chain project,
                 *     if you are interested only in the statistics of the first task, you need to specify the ID of the first task.
                 *     The task ID can be found in the response body of the [project detail](#Projects/GetProjectInfo) endpoint.
                 *
                 *     If no task id is provided, the response will contain statistics for all tasks in the project. */
                task_id?: string;
            };
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
                /** @description The ID of the dataset in the project. */
                dataset_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Statistics for the requested dataset */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Overview of the dataset statistics */
                        overview?: {
                            /**
                             * Format: int32
                             * @description Number of images in the dataset
                             */
                            images?: number;
                            /**
                             * Format: int32
                             * @description Number of videos in the dataset
                             */
                            videos?: number;
                            /**
                             * Format: int32
                             * @description Number of annotated video frames in the dataset
                             */
                            annotated_frames?: number;
                            /**
                             * Format: int32
                             * @description Number of annotated images in the dataset
                             */
                            annotated_images?: number;
                            /**
                             * Format: int32
                             * @description Number of annotated videos in the dataset
                             */
                            annotated_videos?: number;
                        };
                        /** @description List with statistics for each task in the project */
                        tasks?: {
                            /**
                             * Format: int32
                             * @description Number of annotated frames per task
                             */
                            annotated_frames?: number;
                            /**
                             * Format: int32
                             * @description Number of annotated images per task
                             */
                            annotated_images?: number;
                            /**
                             * Format: int32
                             * @description Number of annotated videos per task
                             */
                            annotated_videos?: number;
                            /** @description Number of annotated shapes per label */
                            objects_per_label?: {
                                /**
                                 * @description Mongo ID of the object
                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                 */
                                id?: string;
                                /** @description Name of the label */
                                name?: string;
                                /** @description Color of the label */
                                color?: string;
                                /**
                                 * Format: int32
                                 * @description Number of annotated shapes for this label
                                 */
                                value?: number;
                            }[];
                            /** @description List with information on object size distribution per label */
                            object_size_distribution_per_label?: {
                                /** @description Mean x/y values of the sizes of the objects */
                                cluster_center?: number[];
                                /** @description Width/height values for drawing ellipse from cluster center */
                                cluster_width_height?: number[];
                                /**
                                 * @description Mongo ID of the object
                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                 */
                                id?: string;
                                /** @description Color of the label */
                                color?: string;
                                /** @description Name of the label */
                                name?: string;
                                /** @description Information on the distribution of aspect ratios of annotation shapes */
                                object_distribution_from_aspect_ratio?: {
                                    /** Format: int32 */
                                    balanced?: number;
                                    /** Format: int32 */
                                    tall?: number;
                                    /** Format: int32 */
                                    wide?: number;
                                };
                                /** @description Information on the size distribution of annotation shapes. Contains a list of width/height for every object. */
                                size_distribution?: number[][];
                                /**
                                 * Format: float
                                 * @description Aspect ratio threshold for classifying a shape as tall
                                 */
                                aspect_ratio_threshold_tall?: number;
                                /**
                                 * Format: float
                                 * @description Aspect ratio threshold for classifying a shape as wide
                                 */
                                aspect_ratio_threshold_wide?: number;
                            }[];
                            /**
                             * @description Mongo ID of the object
                             * @example 60d31793d5f1fb7e6e3c1a4c
                             */
                            task_id?: string;
                        }[];
                    };
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    FilterMedia: {
        parameters: {
            query?: {
                /** @description Number of items returned in the response. Default is 10 and maximum is 100. */
                limit?: number;
                /** @description Number indicating how many items to skip from the first item that matches the query.
                 *     This field is used in combination with the limit field for the pagination feature. */
                skip?: string;
                /** @description Sorting order, could be `asc` (ascending) or `dsc` (descending).  */
                sort_direction?: 'asc' | 'dsc';
                /** @description Field to sort by.  */
                sort_by?:
                    | 'media_name'
                    | 'media_upload_date'
                    | 'media_width'
                    | 'media_height'
                    | 'media_size'
                    | 'annotation_creation_date';
            };
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
                /** @description The ID of the dataset in the project. */
                dataset_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /**
                     * @description Condition to apply to group of rules.
                     * @enum {string}
                     */
                    condition?: 'and';
                    /** @description All the rules to filter a dataset with. */
                    rules: {
                        /**
                         * @description Field to filter on in the database. Can be one of 'media_upload_date', 'media_height', 'media_width' , 'media_name', 'label_id', 'annotation_creation_date', 'annotation_scene_state', 'shape_type', 'shape_size' or 'user_name'. Note that media related filters do not affect the outcome when using the filter video endpoint as each frame will have the same values.
                         * @enum {string}
                         */
                        field:
                            | 'media_upload_date'
                            | 'media_height'
                            | 'media_width'
                            | 'media_name'
                            | 'label_id'
                            | 'annotation_creation_date'
                            | 'annotation_scene_state'
                            | 'shape_type'
                            | 'shape_area_percentage'
                            | 'shape_area_pixel'
                            | 'user_name';
                        /**
                         * @description Operator to filter with. Can be one of 'greater', 'less', 'greater_or_equal' , 'less_or_equal', 'equal', 'not_equal', 'in', 'not_in', 'regex'
                         * @enum {string}
                         */
                        operator:
                            | 'greater'
                            | 'less'
                            | 'greater_or_equal'
                            | 'less_or_equal'
                            | 'equal'
                            | 'not_equal'
                            | 'in'
                            | 'not_in'
                            | 'regex';
                        /** @description Value that the field should match to in combination with the operator */
                        value: unknown[] | string | number;
                    }[];
                };
            };
        };
        responses: {
            /** @description Media items matching the filter */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description List of media items */
                        media?: (
                            | {
                                  /**
                                   * @description Mongo ID of the object
                                   * @example 60d31793d5f1fb7e6e3c1a4c
                                   */
                                  id?: string;
                                  media_information?: {
                                      /** @description Display URL of the image or video frame */
                                      display_url?: string;
                                      /** @description Height of the image or video frame */
                                      height?: number;
                                      /** @description Width of the image or video frame */
                                      width?: number;
                                      /** @description Size of the image or video in bytes */
                                      size?: number;
                                      /** @description Extension of the image or video in lowercase with a dot (e.g. '.jpg') */
                                      extension?: string;
                                  };
                                  /** @description Name of the image */
                                  name?: string;
                                  /** @description List of per-task states obtained aggregating the annotation state with the revisit information */
                                  annotation_state_per_task?: {
                                      /**
                                       * @description Mongo ID of the object
                                       * @example 60d31793d5f1fb7e6e3c1a4c
                                       */
                                      task_id?: string;
                                      /**
                                       * @description Annotation state of the media for this task
                                       * @enum {string|null}
                                       */
                                      state?:
                                          | 'annotated'
                                          | 'partially_annotated'
                                          | 'none'
                                          | 'to_revisit'
                                          | null;
                                  }[];
                                  /** @description Relative URL to the image thumbnail */
                                  thumbnail?: string;
                                  /**
                                   * @description Type of media. 'image' for images, 'video' for video and 'video_frame' for video frames.
                                   * @enum {string}
                                   */
                                  type?: 'image';
                                  /** @description Upload time of the media file */
                                  upload_time?: string;
                                  /** @description Optional ID of the annotation scene  if filtering in a specific training revision */
                                  annotation_scene_id?: string;
                                  /** @description Optional ID of the roi id if filtering in a specific training revision */
                                  roi_id?: string;
                                  /** @description Optional ID of the user that last edited the annotation. */
                                  last_annotator_id?: string;
                              }
                            | {
                                  /**
                                   * @description Mongo ID of the object
                                   * @example 60d31793d5f1fb7e6e3c1a4c
                                   */
                                  id?: string;
                                  media_information?: {
                                      /** @description Display URL of the image or video */
                                      display_url?: string;
                                      /** @description Duration of the video */
                                      duration?: number;
                                      /** @description Number of frames in the video */
                                      frame_count?: number;
                                      /** @description Frame stride of the video */
                                      frame_stride?: number;
                                      /** @description Frame rate of the video */
                                      frame_rate?: number;
                                      /** @description Height of the video */
                                      height?: number;
                                      /** @description Width of the video */
                                      width?: number;
                                      /** @description Size of the video in bytes */
                                      size?: number;
                                  };
                                  /** @description Name of the image */
                                  name?: string;
                                  /** @description List of per-task states obtained aggregating the annotation state with the revisit information */
                                  annotation_state_per_task?: {
                                      /**
                                       * @description Mongo ID of the object
                                       * @example 60d31793d5f1fb7e6e3c1a4c
                                       */
                                      task_id?: string;
                                      /**
                                       * @description Annotation state of the media for this task
                                       * @enum {string|null}
                                       */
                                      state?:
                                          | 'annotated'
                                          | 'partially_annotated'
                                          | 'none'
                                          | 'to_revisit'
                                          | null;
                                  }[];
                                  /** @description Relative URL to the video thumbnail */
                                  thumbnail?: string;
                                  /**
                                   * @description Type of media. 'image' for images, 'video' for video and 'video_frame' for video frames.
                                   * @enum {string}
                                   */
                                  type?: 'video';
                                  /** @description Upload time of the media file */
                                  upload_time?: string;
                                  /** @description Number of frames in the video that match the filter. Only returned when filtering by annotation properties. */
                                  matched_frames?: number | null;
                              }
                            | {
                                  /**
                                   * Format: int32
                                   * @description The video frame index
                                   */
                                  id?: number;
                                  media_information?: {
                                      /** @description Display URL of the image or video */
                                      display_url?: string;
                                      /** @description Duration of the video */
                                      duration?: number;
                                      /** @description Number of frames in the video */
                                      frame_count?: number;
                                      /** @description Frame stride of the video */
                                      frame_stride?: number;
                                      /** @description Frame rate of the video */
                                      frame_rate?: number;
                                      /** @description Height of the video */
                                      height?: number;
                                      /** @description Width of the video */
                                      width?: number;
                                      /** @description Size of the video in bytes */
                                      size?: number;
                                  };
                                  /** @description Name of the image */
                                  name?: string;
                                  /** @description List of per-task states obtained aggregating the annotation state with the revisit information */
                                  annotation_state_per_task?: {
                                      /**
                                       * @description Mongo ID of the object
                                       * @example 60d31793d5f1fb7e6e3c1a4c
                                       */
                                      task_id?: string;
                                      /**
                                       * @description Annotation state of the media for this task
                                       * @enum {string|null}
                                       */
                                      state?:
                                          | 'annotated'
                                          | 'partially_annotated'
                                          | 'none'
                                          | 'to_revisit'
                                          | null;
                                  }[];
                                  /** @description Relative URL to the video frame thumbnail */
                                  thumbnail?: string;
                                  /**
                                   * @description Type of media. 'image' for images, 'video' for video and 'video_frame' for video frames.
                                   * @enum {string}
                                   */
                                  type?: 'video_frame';
                                  /** @description Upload time of the media file */
                                  upload_time?: string;
                                  /** @description Optional ID of the annotation scene if filtering in a specific training revision */
                                  annotation_scene_id?: string;
                                  /** @description Optional ID of the roi id if filtering in a specific training revision */
                                  roi_id?: string;
                                  /** @description Optional ID of the user that last edited the annotation. */
                                  last_annotator_id?: string;
                              }
                        )[];
                        /** @description URL to the next page of results, if the same parameters are used. */
                        next_page?: string;
                        /** @description Total images that match the query. */
                        total_matched_images?: number;
                        /** @description Total videos that match the query. */
                        total_matched_videos?: number;
                        /** @description Total video frames that match the query. */
                        total_matched_video_frames?: number;
                        /** @description Total images in the dataset. */
                        total_images?: number;
                        /** @description Total videos in the dataset. */
                        total_videos?: number;
                    };
                };
            };
            /** @description Bad request. See the examples for details. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    UploadImage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
                /** @description The ID of the dataset in the project. */
                dataset_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'multipart/form-data': {
                    /**
                     * Format: binary
                     * @description The image file to be uploaded.
                     */
                    file: string;
                    /** @description IDs of the labels to apply to the image. Uses the format of a json decodable string.
                     *     The label id's could be found from the response of the [project detail](#Projects/GetProjectInfo) endpoint.
                     *     Example: *{\"label_ids\":[\"613776cec8223e455a88383d\", \"613776cec8223e455a88383e\"]}*.                   */
                    upload_info?: string;
                };
            };
        };
        responses: {
            /** @description The image has been uploaded. The 'size' field represents bits. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /**
                         * @description Mongo ID of the object
                         * @example 60d31793d5f1fb7e6e3c1a4c
                         */
                        id?: string;
                        media_information?: {
                            /** @description Display URL of the image or video frame */
                            display_url?: string;
                            /** @description Height of the image or video frame */
                            height?: number;
                            /** @description Width of the image or video frame */
                            width?: number;
                            /** @description Size of the image or video in bytes */
                            size?: number;
                            /** @description Extension of the image or video in lowercase with a dot (e.g. '.jpg') */
                            extension?: string;
                        };
                        /** @description Name of the image */
                        name?: string;
                        /** @description ID of the uploader */
                        uploader_id?: string;
                        /** @description List of per-task states obtained aggregating the annotation state with the revisit information */
                        annotation_state_per_task?: {
                            /**
                             * @description Mongo ID of the object
                             * @example 60d31793d5f1fb7e6e3c1a4c
                             */
                            task_id?: string;
                            /**
                             * @description Annotation state of the media for this task
                             * @enum {string|null}
                             */
                            state?:
                                | 'annotated'
                                | 'partially_annotated'
                                | 'none'
                                | 'to_revisit'
                                | null;
                        }[];
                        /** @description Media preprocessing related information */
                        preprocessing?: {
                            /**
                             * @description Status of the preprocessing operation
                             * @enum {string}
                             */
                            status: 'SCHEDULED' | 'IN_PROGRESS' | 'FINISHED' | 'FAILED';
                            /** @description Message associated with the preprocessing operation */
                            message?: string;
                        };
                        /** @description Relative URL to the media thumbnail */
                        thumbnail?: string;
                        /**
                         * @description Type of media. 'image', 'video' or 'video_frame'
                         * @enum {string}
                         */
                        type?: 'image';
                        /** @description Upload time of the image */
                        upload_time?: string;
                    };
                };
            };
            /** @description No file provided */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
            /** @description Payload too large */
            413: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
            /** @description Invalid media */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    GetImageDetail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
                /** @description The ID of the dataset in the project. */
                dataset_id: string;
                /** @description The ID of the image. */
                image_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The detailed info of the requested image. The "size" field represents bits. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /**
                         * @description Mongo ID of the object
                         * @example 60d31793d5f1fb7e6e3c1a4c
                         */
                        id?: string;
                        media_information?: {
                            /** @description Display URL of the image or video frame */
                            display_url?: string;
                            /** @description Height of the image or video frame */
                            height?: number;
                            /** @description Width of the image or video frame */
                            width?: number;
                            /** @description Size of the image or video in bytes */
                            size?: number;
                            /** @description Extension of the image or video in lowercase with a dot (e.g. '.jpg') */
                            extension?: string;
                        };
                        /** @description Name of the image */
                        name?: string;
                        /** @description ID of the uploader */
                        uploader_id?: string;
                        /** @description List of per-task states obtained aggregating the annotation state with the revisit information */
                        annotation_state_per_task?: {
                            /**
                             * @description Mongo ID of the object
                             * @example 60d31793d5f1fb7e6e3c1a4c
                             */
                            task_id?: string;
                            /**
                             * @description Annotation state of the media for this task
                             * @enum {string|null}
                             */
                            state?:
                                | 'annotated'
                                | 'partially_annotated'
                                | 'none'
                                | 'to_revisit'
                                | null;
                        }[];
                        /** @description Media preprocessing related information */
                        preprocessing?: {
                            /**
                             * @description Status of the preprocessing operation
                             * @enum {string}
                             */
                            status: 'SCHEDULED' | 'IN_PROGRESS' | 'FINISHED' | 'FAILED';
                            /** @description Message associated with the preprocessing operation */
                            message?: string;
                        };
                        /** @description Relative URL to the media thumbnail */
                        thumbnail?: string;
                        /**
                         * @description Type of media. 'image', 'video' or 'video_frame'
                         * @enum {string}
                         */
                        type?: 'image';
                        /** @description Upload time of the image */
                        upload_time?: string;
                    };
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    DeleteAnImage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
                /** @description The ID of the dataset in the project. */
                dataset_id: string;
                /** @description The ID of the image. */
                image_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The image has been deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status: 200 | 201 | 202 | 203 | 204 | 205 | 206;
                        /** @description Message from server */
                        message: string;
                    };
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
            /** @description Requested image cannot be deleted due to running jobs connected to this image */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    DownloadFullImage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
                /** @description The ID of the dataset in the project. */
                dataset_id: string;
                /** @description The ID of the image. */
                image_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The requested image */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'image/*': string;
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    DownloadImageThumbnail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
                /** @description The ID of the dataset in the project. */
                dataset_id: string;
                /** @description The ID of the image. */
                image_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The requested image thumbnail */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'image/*': string;
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    UploadVideo: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
                /** @description The ID of the dataset in the project. */
                dataset_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'multipart/form-data': {
                    /**
                     * Format: binary
                     * @description The video file to be uploaded.
                     */
                    file: string;
                    /** @description IDs of the labels to apply to the video. Uses the format of a json decodable string.
                     *     The label id's could be found from the response of the [project detail](#Projects/GetProjectInfo) endpoint.
                     *     Labels are applied to all video frames at 1 fps.
                     *     Example: *{\"label_ids\":[\"613776cec8223e455a88383d\", \"613776cec8223e455a88383e\"]}*.  */
                    upload_info?: string;
                };
            };
        };
        responses: {
            /** @description Video has been uploaded. The 'size' field represents bits, "duration" is in seconds. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /**
                         * @description Mongo ID of the object
                         * @example 60d31793d5f1fb7e6e3c1a4c
                         */
                        id?: string;
                        media_information?: {
                            /** @description Display URL of the image or video */
                            display_url?: string;
                            /** @description Duration of the video */
                            duration?: number;
                            /** @description Number of frames in the video */
                            frame_count?: number;
                            /** @description Frame stride of the video */
                            frame_stride?: number;
                            /** @description Frame rate of the video */
                            frame_rate?: number;
                            /** @description Height of the video */
                            height?: number;
                            /** @description Width of the video */
                            width?: number;
                            /** @description Size of the video in bytes */
                            size?: number;
                        };
                        /** @description Name of the video */
                        name?: string;
                        /** @description ID of the uploader */
                        uploader_id?: string;
                        /** @description List of per-task states obtained aggregating the annotation state with the revisit information */
                        annotation_state_per_task?: {
                            /**
                             * @description Mongo ID of the object
                             * @example 60d31793d5f1fb7e6e3c1a4c
                             */
                            task_id?: string;
                            /**
                             * @description Annotation state of the media for this task
                             * @enum {string|null}
                             */
                            state?:
                                | 'annotated'
                                | 'partially_annotated'
                                | 'none'
                                | 'to_revisit'
                                | null;
                        }[];
                        annotation_statistics?: {
                            /** @description Number of annotated frames within video */
                            annotated?: number;
                            /** @description Number of partially annotated frames within video */
                            partially_annotated?: number;
                            /** @description Number of unannotated frames within video */
                            unannotated?: number;
                        };
                        /** @description Media preprocessing related information */
                        preprocessing?: {
                            /**
                             * @description Status of the preprocessing operation
                             * @enum {string}
                             */
                            status: 'SCHEDULED' | 'IN_PROGRESS' | 'FINISHED' | 'FAILED';
                            /** @description Message associated with the preprocessing operation */
                            message?: string;
                        };
                        /** @description Relative URL to the video thumbnail */
                        thumbnail?: string;
                        /**
                         * @description Type of media. 'image', 'video' or 'video_frame'
                         * @enum {string}
                         */
                        type?: 'video';
                        /** @description Upload time of the video */
                        upload_time?: string;
                    };
                };
            };
            /** @description No file provided */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
            /** @description Payload too large */
            413: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
            /** @description Invalid media */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    GetVideoDetail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
                /** @description The ID of the dataset in the project. */
                dataset_id: string;
                /** @description The ID of the video. */
                video_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The requested detailed video info. The 'size' field represents bits, "duration" is in seconds. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /**
                         * @description Mongo ID of the object
                         * @example 60d31793d5f1fb7e6e3c1a4c
                         */
                        id?: string;
                        media_information?: {
                            /** @description Display URL of the image or video */
                            display_url?: string;
                            /** @description Duration of the video */
                            duration?: number;
                            /** @description Number of frames in the video */
                            frame_count?: number;
                            /** @description Frame stride of the video */
                            frame_stride?: number;
                            /** @description Frame rate of the video */
                            frame_rate?: number;
                            /** @description Height of the video */
                            height?: number;
                            /** @description Width of the video */
                            width?: number;
                            /** @description Size of the video in bytes */
                            size?: number;
                        };
                        /** @description Name of the video */
                        name?: string;
                        /** @description ID of the uploader */
                        uploader_id?: string;
                        /** @description List of per-task states obtained aggregating the annotation state with the revisit information */
                        annotation_state_per_task?: {
                            /**
                             * @description Mongo ID of the object
                             * @example 60d31793d5f1fb7e6e3c1a4c
                             */
                            task_id?: string;
                            /**
                             * @description Annotation state of the media for this task
                             * @enum {string|null}
                             */
                            state?:
                                | 'annotated'
                                | 'partially_annotated'
                                | 'none'
                                | 'to_revisit'
                                | null;
                        }[];
                        annotation_statistics?: {
                            /** @description Number of annotated frames within video */
                            annotated?: number;
                            /** @description Number of partially annotated frames within video */
                            partially_annotated?: number;
                            /** @description Number of unannotated frames within video */
                            unannotated?: number;
                        };
                        /** @description Media preprocessing related information */
                        preprocessing?: {
                            /**
                             * @description Status of the preprocessing operation
                             * @enum {string}
                             */
                            status: 'SCHEDULED' | 'IN_PROGRESS' | 'FINISHED' | 'FAILED';
                            /** @description Message associated with the preprocessing operation */
                            message?: string;
                        };
                        /** @description Relative URL to the video thumbnail */
                        thumbnail?: string;
                        /**
                         * @description Type of media. 'image', 'video' or 'video_frame'
                         * @enum {string}
                         */
                        type?: 'video';
                        /** @description Upload time of the video */
                        upload_time?: string;
                    };
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    DeleteAVideo: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
                /** @description The ID of the dataset in the project. */
                dataset_id: string;
                /** @description The ID of the video. */
                video_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The video was successfully deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status: 200 | 201 | 202 | 203 | 204 | 205 | 206;
                        /** @description Message from server */
                        message: string;
                    };
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
            /** @description Requested video cannot be deleted due to running jobs connected to the video */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    FilterVideoFrames: {
        parameters: {
            query?: {
                /** @description Number of items returned in the response. Default is 10 and maximum is 100. */
                limit?: number;
                /** @description Number indicating how many items to skip from the first item that matches the query.
                 *     This field is used in combination with the limit field for the pagination feature. */
                skip?: string;
                /** @description Sorting order, could be `asc` (ascending) or `dsc` (descending).  */
                sort_direction?: 'asc' | 'dsc';
                /** @description Field to sort by.  */
                sort_by?:
                    | 'media_name'
                    | 'media_upload_date'
                    | 'media_width'
                    | 'media_height'
                    | 'media_size'
                    | 'annotation_creation_date';
                /** @description Set to true to include the frame details in the response. Note that this will increase the response size.
                 *     Default is `false`.  */
                include_frame_details?: boolean;
            };
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
                /** @description The ID of the dataset in the project. */
                dataset_id: string;
                /** @description The ID of the video. */
                video_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /**
                     * @description Condition to apply to group of rules.
                     * @enum {string}
                     */
                    condition?: 'and';
                    /** @description All the rules to filter a dataset with. */
                    rules: {
                        /**
                         * @description Field to filter on in the database. Can be one of 'media_upload_date', 'media_height', 'media_width' , 'media_name', 'label_id', 'annotation_creation_date', 'annotation_scene_state', 'shape_type', 'shape_size' or 'user_name'. Note that media related filters do not affect the outcome when using the filter video endpoint as each frame will have the same values.
                         * @enum {string}
                         */
                        field:
                            | 'media_upload_date'
                            | 'media_height'
                            | 'media_width'
                            | 'media_name'
                            | 'label_id'
                            | 'annotation_creation_date'
                            | 'annotation_scene_state'
                            | 'shape_type'
                            | 'shape_area_percentage'
                            | 'shape_area_pixel'
                            | 'user_name';
                        /**
                         * @description Operator to filter with. Can be one of 'greater', 'less', 'greater_or_equal' , 'less_or_equal', 'equal', 'not_equal', 'in', 'not_in', 'regex'
                         * @enum {string}
                         */
                        operator:
                            | 'greater'
                            | 'less'
                            | 'greater_or_equal'
                            | 'less_or_equal'
                            | 'equal'
                            | 'not_equal'
                            | 'in'
                            | 'not_in'
                            | 'regex';
                        /** @description Value that the field should match to in combination with the operator */
                        value: unknown[] | string | number;
                    }[];
                };
            };
        };
        responses: {
            /** @description Frames matching the filter */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description List of video frame indices */
                        video_frame_indices?: number[];
                        /** @description List of video frame items */
                        video_frames?: {
                            /**
                             * Format: int32
                             * @description The video frame index
                             */
                            id?: number;
                            media_information?: {
                                /** @description Display URL of the image or video */
                                display_url?: string;
                                /** @description Duration of the video */
                                duration?: number;
                                /** @description Number of frames in the video */
                                frame_count?: number;
                                /** @description Frame stride of the video */
                                frame_stride?: number;
                                /** @description Frame rate of the video */
                                frame_rate?: number;
                                /** @description Height of the video */
                                height?: number;
                                /** @description Width of the video */
                                width?: number;
                                /** @description Size of the video in bytes */
                                size?: number;
                            };
                            /** @description Name of the image */
                            name?: string;
                            /** @description List of per-task states obtained aggregating the annotation state with the revisit information */
                            annotation_state_per_task?: {
                                /**
                                 * @description Mongo ID of the object
                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                 */
                                task_id?: string;
                                /**
                                 * @description Annotation state of the media for this task
                                 * @enum {string|null}
                                 */
                                state?:
                                    | 'annotated'
                                    | 'partially_annotated'
                                    | 'none'
                                    | 'to_revisit'
                                    | null;
                            }[];
                            /** @description Relative URL to the video frame thumbnail */
                            thumbnail?: string;
                            /**
                             * @description Type of media. 'image' for images, 'video' for video and 'video_frame' for video frames.
                             * @enum {string}
                             */
                            type?: 'video_frame';
                            /** @description Upload time of the media file */
                            upload_time?: string;
                            /** @description Optional ID of the annotation scene if filtering in a specific training revision */
                            annotation_scene_id?: string;
                            /** @description Optional ID of the roi id if filtering in a specific training revision */
                            roi_id?: string;
                            /** @description Optional ID of the user that last edited the annotation. */
                            last_annotator_id?: string;
                        }[];
                        video_information?: {
                            /** @description Display URL of the image or video */
                            display_url?: string;
                            /** @description Duration of the video */
                            duration?: number;
                            /** @description Number of frames in the video */
                            frame_count?: number;
                            /** @description Frame stride of the video */
                            frame_stride?: number;
                            /** @description Frame rate of the video */
                            frame_rate?: number;
                            /** @description Height of the video */
                            height?: number;
                            /** @description Width of the video */
                            width?: number;
                            /** @description Size of the video in bytes */
                            size?: number;
                        };
                        /** @description URL to the next page of results, if the same parameters are used. */
                        next_page?: string;
                        /** @description Total video frames that match the query. */
                        total_matched_video_frames?: number;
                    };
                };
            };
            /** @description Bad request. See the examples for details. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    DownloadVideoStream: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
                /** @description The ID of the dataset in the project. */
                dataset_id: string;
                /** @description The ID of the video. */
                video_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The requested video stream */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'image/*': string;
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    DownloadVideoThumbnail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
                /** @description The ID of the dataset in the project. */
                dataset_id: string;
                /** @description The ID of the video. */
                video_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The requested video thumbnail */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'image/*': string;
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    DownloadVideoFrameFull: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
                /** @description The ID of the dataset in the project. */
                dataset_id: string;
                /** @description The ID of the video. */
                video_id: string;
                /** @description This is a 0-based index, meaning to retrieve the first frame of the video, this parameter should be set to `0`.
                 *     The possible values for this parameter range from `0` to `frame_count-1`. The `frame_count` is the total number of frames contained in the video
                 *     and it can be retrieved from the response body of [video detail](#Media/GetVideoDetail) endpoint.  */
                frame_index: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The requested video */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'image/*': string;
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    DownloadVideoFrameThumbnail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
                /** @description The ID of the dataset in the project. */
                dataset_id: string;
                /** @description The ID of the video. */
                video_id: string;
                /** @description This is a 0-based index, meaning to retrieve the first frame of the video, this parameter should be set to `0`.
                 *     The possible values for this parameter range from `0` to `frame_count-1`. The `frame_count` is the total number of frames contained in the video
                 *     and it can be retrieved from the response body of [video detail](#Media/GetVideoDetail) endpoint.  */
                frame_index: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The requested video frame thumbnail */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'image/*': string;
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    CreateImageAnnotation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
                /** @description The ID of the dataset in the project. */
                dataset_id: string;
                /** @description The ID of the image. */
                image_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @description List of annotations */
                    annotations: {
                        /**
                         * @description A UUID, used to identify an annotation.
                         * @example e42cf382-5f7b-4fda-980a-fa0fab00243c
                         */
                        id?: string;
                        shape:
                            | {
                                  /**
                                   * @description Type of the shape.
                                   * @enum {string}
                                   */
                                  type: 'RECTANGLE';
                                  /** @description x-coordinate of the left side of the rectangle. Coordinates are pixel values. */
                                  x: number;
                                  /** @description y-coordinate of the top of the rectangle. Coordinates are pixel values. */
                                  y: number;
                                  /** @description Width of the rectangle. Coordinates are pixel values. */
                                  width: number;
                                  /** @description Height of the rectangle. Coordinates are pixel values. */
                                  height: number;
                              }
                            | {
                                  /**
                                   * @description Type of the shape.
                                   * @enum {string}
                                   */
                                  type: 'POLYGON';
                                  /** @description Array of points that define the polygon. */
                                  points: {
                                      /** @description x-coordinate of the point. Coordinates are pixel values. */
                                      x: number;
                                      /** @description y-coordinate of the point. Coordinates are pixel values. */
                                      y: number;
                                  }[];
                              }
                            | {
                                  /**
                                   * @description Type of the shape.
                                   * @enum {string}
                                   */
                                  type: 'ELLIPSE';
                                  /** @description Lowest x-coordinate of the ellipse. Coordinates are pixel values. */
                                  x: number;
                                  /** @description Lowest y-coordinate of the ellipse. Coordinates are pixel values. */
                                  y: number;
                                  /** @description Width of the ellipse. Coordinates are pixel values. */
                                  width: number;
                                  /** @description Height of the ellipse. Coordinates are pixel values. */
                                  height: number;
                              }
                            | {
                                  /**
                                   * @description Type of the shape.
                                   * @enum {string}
                                   */
                                  type: 'ROTATED_RECTANGLE';
                                  /** @description Center x-coordinate of the rotated rectangle. Coordinates are pixel values. */
                                  x: number;
                                  /** @description Center y-coordinate of the rotated rectangle. Coordinates are pixel values. */
                                  y: number;
                                  /** @description Width of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values. */
                                  width: number;
                                  /** @description Height of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values. */
                                  height: number;
                                  /** @description Clockwise angle in degrees for the rectangle. */
                                  angle: number;
                              }
                            | {
                                  /**
                                   * @description Type of the shape.
                                   * @enum {string}
                                   */
                                  type: 'KEYPOINT';
                                  /** @description X-coordinate of the keypoint. Coordinates are pixel values. */
                                  x: number;
                                  /** @description Y-coordinate of the keypoint. Coordinates are pixel values. */
                                  y: number;
                                  /** @description Indicates whether the feature the keypoint is describing is visible in the image. */
                                  is_visible: boolean;
                              };
                        /** @description List of labels */
                        labels: {
                            /**
                             * @description Mongo ID of the object
                             * @example 60d31793d5f1fb7e6e3c1a4c
                             */
                            id: string;
                        }[];
                        /** @description List of labels IDs for which the annotation should be revisited */
                        labels_to_revisit?: string[];
                    }[];
                    media_identifier?: {
                        /**
                         * @description Mongo ID of the object
                         * @example 60d31793d5f1fb7e6e3c1a4c
                         */
                        image_id?: string;
                        /**
                         * @description Type of media. 'image' for images, 'video' for videos.
                         * @enum {string}
                         */
                        type?: 'image';
                    };
                    /** @description Modification date */
                    modified?: string;
                    /** @description List of labels IDs for which the scene (full-image ROI) should be revisited */
                    labels_to_revisit_full_scene?: string[];
                };
            };
        };
        responses: {
            /** @description Annotation successfully uploaded for image */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description List of annotations */
                        annotations: {
                            /**
                             * @description A UUID, used to identify an annotation.
                             * @example e42cf382-5f7b-4fda-980a-fa0fab00243c
                             */
                            id: string;
                            shape?:
                                | {
                                      /**
                                       * @description Type of the shape.
                                       * @enum {string}
                                       */
                                      type: 'RECTANGLE';
                                      /** @description x-coordinate of the left side of the rectangle. Coordinates are pixel values. */
                                      x: number;
                                      /** @description y-coordinate of the top of the rectangle. Coordinates are pixel values. */
                                      y: number;
                                      /** @description Width of the rectangle. Coordinates are pixel values. */
                                      width: number;
                                      /** @description Height of the rectangle. Coordinates are pixel values. */
                                      height: number;
                                  }
                                | {
                                      /**
                                       * @description Type of the shape.
                                       * @enum {string}
                                       */
                                      type: 'POLYGON';
                                      /** @description Array of points that define the polygon. */
                                      points: {
                                          /** @description x-coordinate of the point. Coordinates are pixel values. */
                                          x: number;
                                          /** @description y-coordinate of the point. Coordinates are pixel values. */
                                          y: number;
                                      }[];
                                  }
                                | {
                                      /**
                                       * @description Type of the shape.
                                       * @enum {string}
                                       */
                                      type: 'ELLIPSE';
                                      /** @description Lowest x-coordinate of the ellipse. Coordinates are pixel values. */
                                      x: number;
                                      /** @description Lowest y-coordinate of the ellipse. Coordinates are pixel values. */
                                      y: number;
                                      /** @description Width of the ellipse. Coordinates are pixel values. */
                                      width: number;
                                      /** @description Height of the ellipse. Coordinates are pixel values. */
                                      height: number;
                                  }
                                | {
                                      /**
                                       * @description Type of the shape.
                                       * @enum {string}
                                       */
                                      type: 'ROTATED_RECTANGLE';
                                      /** @description Center x-coordinate of the rotated rectangle. Coordinates are pixel values. */
                                      x: number;
                                      /** @description Center y-coordinate of the rotated rectangle. Coordinates are pixel values. */
                                      y: number;
                                      /** @description Width of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values. */
                                      width: number;
                                      /** @description Height of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values. */
                                      height: number;
                                      /** @description Clockwise angle in degrees for the rectangle. */
                                      angle: number;
                                  }
                                | {
                                      /**
                                       * @description Type of the shape.
                                       * @enum {string}
                                       */
                                      type: 'KEYPOINT';
                                      /** @description X-coordinate of the keypoint. Coordinates are pixel values. */
                                      x: number;
                                      /** @description Y-coordinate of the keypoint. Coordinates are pixel values. */
                                      y: number;
                                      /** @description Indicates whether the feature the keypoint is describing is visible in the image. */
                                      is_visible: boolean;
                                  };
                            /** @description List of labels */
                            labels: {
                                /**
                                 * @description Mongo ID of the object
                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                 */
                                id?: string;
                                /**
                                 * Probability
                                 * Format: float
                                 * @description Estimated probability of a prediction. For annotations, this is set to 1.
                                 */
                                probability?: number;
                                source?: {
                                    /** @description User name of the user that added the label or accepted the prediction */
                                    user_id?: string | null;
                                    /** @description Model id of the model that predicted the label */
                                    model_id?: string | null;
                                    /** @description Model storage id of model that predicted the label */
                                    model_storage_id?: string | null;
                                };
                            }[];
                            /** @description Modification date */
                            modified: string;
                            /** @description List of labels IDs for which the annotation should be revisited */
                            labels_to_revisit?: string[];
                        }[];
                        /**
                         * @description Mongo ID of the object
                         * @example 60d31793d5f1fb7e6e3c1a4c
                         */
                        id: string;
                        /**
                         * @description Kind of annotation (prediction or annotation).
                         * @enum {string}
                         */
                        kind: 'prediction' | 'annotation';
                        media_identifier: {
                            /**
                             * @description Mongo ID of the object
                             * @example 60d31793d5f1fb7e6e3c1a4c
                             */
                            image_id?: string;
                            /**
                             * @description Type of media. 'image' for images, 'video' for videos.
                             * @enum {string}
                             */
                            type?: 'image';
                        };
                        /** @description Modification date */
                        modified: string;
                        /** @description List of labels IDs for which the scene (full-image ROI) should be revisited */
                        labels_to_revisit_full_scene: string[];
                        /** @description List of per-task states obtained aggregating the annotation state with the revisit information */
                        annotation_state_per_task: {
                            /**
                             * @description Mongo ID of the object
                             * @example 60d31793d5f1fb7e6e3c1a4c
                             */
                            task_id?: string;
                            /**
                             * @description Overall state obtained aggregating the annotation states with the 'revisit' information on a per-task basis. This only has meaning for an  image/frame/scene, as a video does not have an annotation scene. - Image/VideoFrame/AnnotationScene: - to_revisit: Some annotations need to be revisited by the user for this task - annotated: All the ROIs for this task are annotated (contain a label for the task) - partially_annotated: Some ROIs for this task do not contain labels, other ones do - none: No label is present for this task - Video: - all tasks are set to null
                             * @enum {string|null}
                             */
                            state?:
                                | 'to_revisit'
                                | 'annotated'
                                | 'partially_annotated'
                                | 'none'
                                | null;
                        }[];
                    };
                };
            };
            /** @description Annotation is invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    GetImageAnnotation: {
        parameters: {
            query?: {
                /** @description Set to `true` to return the annotations without the geometric shapes. Default is `false`. */
                label_only?: boolean;
            };
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
                /** @description The ID of the dataset in the project. */
                dataset_id: string;
                /** @description The ID of the image. */
                image_id: string;
                /** @description Set to `latest` to fetch the latest annotations.
                 *     This parameter can also be set to the ID of a specific annotation. For example, the specific ID could be obtained
                 *     from the [training revision](#Training%20dataset%20versions/GetMediaForDataset) response,
                 *     where the response includes the specific user annotation for a media that is used for training. */
                annotation_id: string | 'latest';
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Annotation successfully retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description List of annotations */
                        annotations: {
                            /**
                             * @description A UUID, used to identify an annotation.
                             * @example e42cf382-5f7b-4fda-980a-fa0fab00243c
                             */
                            id: string;
                            shape?:
                                | {
                                      /**
                                       * @description Type of the shape.
                                       * @enum {string}
                                       */
                                      type: 'RECTANGLE';
                                      /** @description x-coordinate of the left side of the rectangle. Coordinates are pixel values. */
                                      x: number;
                                      /** @description y-coordinate of the top of the rectangle. Coordinates are pixel values. */
                                      y: number;
                                      /** @description Width of the rectangle. Coordinates are pixel values. */
                                      width: number;
                                      /** @description Height of the rectangle. Coordinates are pixel values. */
                                      height: number;
                                  }
                                | {
                                      /**
                                       * @description Type of the shape.
                                       * @enum {string}
                                       */
                                      type: 'POLYGON';
                                      /** @description Array of points that define the polygon. */
                                      points: {
                                          /** @description x-coordinate of the point. Coordinates are pixel values. */
                                          x: number;
                                          /** @description y-coordinate of the point. Coordinates are pixel values. */
                                          y: number;
                                      }[];
                                  }
                                | {
                                      /**
                                       * @description Type of the shape.
                                       * @enum {string}
                                       */
                                      type: 'ELLIPSE';
                                      /** @description Lowest x-coordinate of the ellipse. Coordinates are pixel values. */
                                      x: number;
                                      /** @description Lowest y-coordinate of the ellipse. Coordinates are pixel values. */
                                      y: number;
                                      /** @description Width of the ellipse. Coordinates are pixel values. */
                                      width: number;
                                      /** @description Height of the ellipse. Coordinates are pixel values. */
                                      height: number;
                                  }
                                | {
                                      /**
                                       * @description Type of the shape.
                                       * @enum {string}
                                       */
                                      type: 'ROTATED_RECTANGLE';
                                      /** @description Center x-coordinate of the rotated rectangle. Coordinates are pixel values. */
                                      x: number;
                                      /** @description Center y-coordinate of the rotated rectangle. Coordinates are pixel values. */
                                      y: number;
                                      /** @description Width of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values. */
                                      width: number;
                                      /** @description Height of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values. */
                                      height: number;
                                      /** @description Clockwise angle in degrees for the rectangle. */
                                      angle: number;
                                  }
                                | {
                                      /**
                                       * @description Type of the shape.
                                       * @enum {string}
                                       */
                                      type: 'KEYPOINT';
                                      /** @description X-coordinate of the keypoint. Coordinates are pixel values. */
                                      x: number;
                                      /** @description Y-coordinate of the keypoint. Coordinates are pixel values. */
                                      y: number;
                                      /** @description Indicates whether the feature the keypoint is describing is visible in the image. */
                                      is_visible: boolean;
                                  };
                            /** @description List of labels */
                            labels: {
                                /**
                                 * @description Mongo ID of the object
                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                 */
                                id?: string;
                                /**
                                 * Probability
                                 * Format: float
                                 * @description Estimated probability of a prediction. For annotations, this is set to 1.
                                 */
                                probability?: number;
                                source?: {
                                    /** @description User name of the user that added the label or accepted the prediction */
                                    user_id?: string | null;
                                    /** @description Model id of the model that predicted the label */
                                    model_id?: string | null;
                                    /** @description Model storage id of model that predicted the label */
                                    model_storage_id?: string | null;
                                };
                            }[];
                            /** @description Modification date */
                            modified: string;
                            /** @description List of labels IDs for which the annotation should be revisited */
                            labels_to_revisit?: string[];
                        }[];
                        /**
                         * @description Mongo ID of the object
                         * @example 60d31793d5f1fb7e6e3c1a4c
                         */
                        id: string;
                        /**
                         * @description Kind of annotation (prediction or annotation).
                         * @enum {string}
                         */
                        kind: 'prediction' | 'annotation';
                        media_identifier: {
                            /**
                             * @description Mongo ID of the object
                             * @example 60d31793d5f1fb7e6e3c1a4c
                             */
                            image_id?: string;
                            /**
                             * @description Type of media. 'image' for images, 'video' for videos.
                             * @enum {string}
                             */
                            type?: 'image';
                        };
                        /** @description Modification date */
                        modified: string;
                        /** @description List of labels IDs for which the scene (full-image ROI) should be revisited */
                        labels_to_revisit_full_scene: string[];
                        /** @description List of per-task states obtained aggregating the annotation state with the revisit information */
                        annotation_state_per_task: {
                            /**
                             * @description Mongo ID of the object
                             * @example 60d31793d5f1fb7e6e3c1a4c
                             */
                            task_id?: string;
                            /**
                             * @description Overall state obtained aggregating the annotation states with the 'revisit' information on a per-task basis. This only has meaning for an  image/frame/scene, as a video does not have an annotation scene. - Image/VideoFrame/AnnotationScene: - to_revisit: Some annotations need to be revisited by the user for this task - annotated: All the ROIs for this task are annotated (contain a label for the task) - partially_annotated: Some ROIs for this task do not contain labels, other ones do - none: No label is present for this task - Video: - all tasks are set to null
                             * @enum {string|null}
                             */
                            state?:
                                | 'to_revisit'
                                | 'annotated'
                                | 'partially_annotated'
                                | 'none'
                                | null;
                        }[];
                    };
                };
            };
            /** @description The latest annotation could not be found or does not exist for the requested image. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status: 200 | 201 | 202 | 203 | 204 | 205 | 206;
                        /** @description Message from server */
                        message: string;
                    };
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    CreateVideoFrameAnnotation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
                /** @description The ID of the dataset in the project. */
                dataset_id: string;
                /** @description The ID of the video. */
                video_id: string;
                /** @description This is a 0-based index, meaning to retrieve the first frame of the video, this parameter should be set to `0`.
                 *     The possible values for this parameter range from `0` to `frame_count-1`. The `frame_count` is the total number of frames contained in the video
                 *     and it can be retrieved from the response body of [video detail](#Media/GetVideoDetail) endpoint.  */
                frame_index: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @description List of annotations */
                    annotations: {
                        /**
                         * @description A UUID, used to identify an annotation.
                         * @example e42cf382-5f7b-4fda-980a-fa0fab00243c
                         */
                        id?: string;
                        shape:
                            | {
                                  /**
                                   * @description Type of the shape.
                                   * @enum {string}
                                   */
                                  type: 'RECTANGLE';
                                  /** @description x-coordinate of the left side of the rectangle. Coordinates are pixel values. */
                                  x: number;
                                  /** @description y-coordinate of the top of the rectangle. Coordinates are pixel values. */
                                  y: number;
                                  /** @description Width of the rectangle. Coordinates are pixel values. */
                                  width: number;
                                  /** @description Height of the rectangle. Coordinates are pixel values. */
                                  height: number;
                              }
                            | {
                                  /**
                                   * @description Type of the shape.
                                   * @enum {string}
                                   */
                                  type: 'POLYGON';
                                  /** @description Array of points that define the polygon. */
                                  points: {
                                      /** @description x-coordinate of the point. Coordinates are pixel values. */
                                      x: number;
                                      /** @description y-coordinate of the point. Coordinates are pixel values. */
                                      y: number;
                                  }[];
                              }
                            | {
                                  /**
                                   * @description Type of the shape.
                                   * @enum {string}
                                   */
                                  type: 'ELLIPSE';
                                  /** @description Lowest x-coordinate of the ellipse. Coordinates are pixel values. */
                                  x: number;
                                  /** @description Lowest y-coordinate of the ellipse. Coordinates are pixel values. */
                                  y: number;
                                  /** @description Width of the ellipse. Coordinates are pixel values. */
                                  width: number;
                                  /** @description Height of the ellipse. Coordinates are pixel values. */
                                  height: number;
                              }
                            | {
                                  /**
                                   * @description Type of the shape.
                                   * @enum {string}
                                   */
                                  type: 'ROTATED_RECTANGLE';
                                  /** @description Center x-coordinate of the rotated rectangle. Coordinates are pixel values. */
                                  x: number;
                                  /** @description Center y-coordinate of the rotated rectangle. Coordinates are pixel values. */
                                  y: number;
                                  /** @description Width of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values. */
                                  width: number;
                                  /** @description Height of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values. */
                                  height: number;
                                  /** @description Clockwise angle in degrees for the rectangle. */
                                  angle: number;
                              }
                            | {
                                  /**
                                   * @description Type of the shape.
                                   * @enum {string}
                                   */
                                  type: 'KEYPOINT';
                                  /** @description X-coordinate of the keypoint. Coordinates are pixel values. */
                                  x: number;
                                  /** @description Y-coordinate of the keypoint. Coordinates are pixel values. */
                                  y: number;
                                  /** @description Indicates whether the feature the keypoint is describing is visible in the image. */
                                  is_visible: boolean;
                              };
                        /** @description List of labels */
                        labels: {
                            /**
                             * @description Mongo ID of the object
                             * @example 60d31793d5f1fb7e6e3c1a4c
                             */
                            id: string;
                        }[];
                        /** @description List of labels IDs for which the annotation should be revisited */
                        labels_to_revisit?: string[];
                    }[];
                    media_identifier?: {
                        /** Format: int32 */
                        frame_index?: number;
                        /**
                         * @description Mongo ID of the object
                         * @example 60d31793d5f1fb7e6e3c1a4c
                         */
                        video_id?: string;
                        /**
                         * @description Type of media. 'image' for images, 'video' for videos.
                         * @enum {string}
                         */
                        type?: 'video_frame';
                    };
                    /** @description Modification date */
                    modified?: string;
                    /** @description List of labels IDs for which the scene (full-image ROI) should be revisited */
                    labels_to_revisit_full_scene?: string[];
                };
            };
        };
        responses: {
            /** @description Annotation successfully uploaded for a video frame */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description List of annotations */
                        annotations?: {
                            /**
                             * @description A UUID, used to identify an annotation.
                             * @example e42cf382-5f7b-4fda-980a-fa0fab00243c
                             */
                            id: string;
                            shape?:
                                | {
                                      /**
                                       * @description Type of the shape.
                                       * @enum {string}
                                       */
                                      type: 'RECTANGLE';
                                      /** @description x-coordinate of the left side of the rectangle. Coordinates are pixel values. */
                                      x: number;
                                      /** @description y-coordinate of the top of the rectangle. Coordinates are pixel values. */
                                      y: number;
                                      /** @description Width of the rectangle. Coordinates are pixel values. */
                                      width: number;
                                      /** @description Height of the rectangle. Coordinates are pixel values. */
                                      height: number;
                                  }
                                | {
                                      /**
                                       * @description Type of the shape.
                                       * @enum {string}
                                       */
                                      type: 'POLYGON';
                                      /** @description Array of points that define the polygon. */
                                      points: {
                                          /** @description x-coordinate of the point. Coordinates are pixel values. */
                                          x: number;
                                          /** @description y-coordinate of the point. Coordinates are pixel values. */
                                          y: number;
                                      }[];
                                  }
                                | {
                                      /**
                                       * @description Type of the shape.
                                       * @enum {string}
                                       */
                                      type: 'ELLIPSE';
                                      /** @description Lowest x-coordinate of the ellipse. Coordinates are pixel values. */
                                      x: number;
                                      /** @description Lowest y-coordinate of the ellipse. Coordinates are pixel values. */
                                      y: number;
                                      /** @description Width of the ellipse. Coordinates are pixel values. */
                                      width: number;
                                      /** @description Height of the ellipse. Coordinates are pixel values. */
                                      height: number;
                                  }
                                | {
                                      /**
                                       * @description Type of the shape.
                                       * @enum {string}
                                       */
                                      type: 'ROTATED_RECTANGLE';
                                      /** @description Center x-coordinate of the rotated rectangle. Coordinates are pixel values. */
                                      x: number;
                                      /** @description Center y-coordinate of the rotated rectangle. Coordinates are pixel values. */
                                      y: number;
                                      /** @description Width of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values. */
                                      width: number;
                                      /** @description Height of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values. */
                                      height: number;
                                      /** @description Clockwise angle in degrees for the rectangle. */
                                      angle: number;
                                  }
                                | {
                                      /**
                                       * @description Type of the shape.
                                       * @enum {string}
                                       */
                                      type: 'KEYPOINT';
                                      /** @description X-coordinate of the keypoint. Coordinates are pixel values. */
                                      x: number;
                                      /** @description Y-coordinate of the keypoint. Coordinates are pixel values. */
                                      y: number;
                                      /** @description Indicates whether the feature the keypoint is describing is visible in the image. */
                                      is_visible: boolean;
                                  };
                            /** @description List of labels */
                            labels: {
                                /**
                                 * @description Mongo ID of the object
                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                 */
                                id?: string;
                                /**
                                 * Probability
                                 * Format: float
                                 * @description Estimated probability of a prediction. For annotations, this is set to 1.
                                 */
                                probability?: number;
                                source?: {
                                    /** @description User name of the user that added the label or accepted the prediction */
                                    user_id?: string | null;
                                    /** @description Model id of the model that predicted the label */
                                    model_id?: string | null;
                                    /** @description Model storage id of model that predicted the label */
                                    model_storage_id?: string | null;
                                };
                            }[];
                            /** @description Modification date */
                            modified: string;
                            /** @description List of labels IDs for which the annotation should be revisited */
                            labels_to_revisit?: string[];
                        }[];
                        /**
                         * @description Mongo ID of the object
                         * @example 60d31793d5f1fb7e6e3c1a4c
                         */
                        id?: string;
                        /**
                         * @description Kind of annotation (prediction or annotation).
                         * @enum {string}
                         */
                        kind?: 'prediction' | 'annotation';
                        media_identifier?: {
                            frame_index?: number;
                            /**
                             * @description Mongo ID of the object
                             * @example 60d31793d5f1fb7e6e3c1a4c
                             */
                            video_id?: string;
                            /**
                             * @description Type of media. 'image' for images, 'video' for videos.
                             * @enum {string}
                             */
                            type?: 'video_frame';
                        };
                        /** @description Modification date */
                        modified?: string;
                        /** @description List of labels IDs for which the scene (full-image ROI) should be revisited */
                        labels_to_revisit_full_scene?: string[];
                        /** @description List of per-task states obtained aggregating the annotation state with the revisit information */
                        annotation_state_per_task?: {
                            /**
                             * @description Mongo ID of the object
                             * @example 60d31793d5f1fb7e6e3c1a4c
                             */
                            task_id?: string;
                            /**
                             * @description Overall state obtained aggregating the annotation states with the 'revisit' information on a per-task basis. This only has meaning for an  image/frame/scene, as a video does not have an annotation scene. - Image/VideoFrame/AnnotationScene: - to_revisit: Some annotations need to be revisited by the user for this task - annotated: All the ROIs for this task are annotated (contain a label for the task) - partially_annotated: Some ROIs for this task do not contain labels, other ones do - none: No label is present for this task - Video: - all tasks are set to null
                             * @enum {string|null}
                             */
                            state?:
                                | 'to_revisit'
                                | 'annotated'
                                | 'partially_annotated'
                                | 'none'
                                | null;
                        }[];
                    };
                };
            };
            /** @description Annotation is invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    GetVideoFrameAnnotation: {
        parameters: {
            query?: {
                /** @description Set to `true` to return the annotations without the geometric shapes. Default is `false`. */
                label_only?: boolean;
            };
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
                /** @description The ID of the dataset in the project. */
                dataset_id: string;
                /** @description The ID of the video. */
                video_id: string;
                /** @description This is a 0-based index, meaning to retrieve the first frame of the video, this parameter should be set to `0`.
                 *     The possible values for this parameter range from `0` to `frame_count-1`. The `frame_count` is the total number of frames contained in the video
                 *     and it can be retrieved from the response body of [video detail](#Media/GetVideoDetail) endpoint.  */
                frame_index: number;
                /** @description Set to `latest` to fetch the latest annotations.
                 *     This parameter can also be set to the ID of a specific annotation. For example, the specific ID could be obtained
                 *     from the [training revision](#Training%20dataset%20versions/GetMediaForDataset) response,
                 *     where the response includes the specific user annotation for a media that is used for training. */
                annotation_id: string | 'latest';
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Annotation successfully retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description List of annotations */
                        annotations?: {
                            /**
                             * @description A UUID, used to identify an annotation.
                             * @example e42cf382-5f7b-4fda-980a-fa0fab00243c
                             */
                            id: string;
                            shape?:
                                | {
                                      /**
                                       * @description Type of the shape.
                                       * @enum {string}
                                       */
                                      type: 'RECTANGLE';
                                      /** @description x-coordinate of the left side of the rectangle. Coordinates are pixel values. */
                                      x: number;
                                      /** @description y-coordinate of the top of the rectangle. Coordinates are pixel values. */
                                      y: number;
                                      /** @description Width of the rectangle. Coordinates are pixel values. */
                                      width: number;
                                      /** @description Height of the rectangle. Coordinates are pixel values. */
                                      height: number;
                                  }
                                | {
                                      /**
                                       * @description Type of the shape.
                                       * @enum {string}
                                       */
                                      type: 'POLYGON';
                                      /** @description Array of points that define the polygon. */
                                      points: {
                                          /** @description x-coordinate of the point. Coordinates are pixel values. */
                                          x: number;
                                          /** @description y-coordinate of the point. Coordinates are pixel values. */
                                          y: number;
                                      }[];
                                  }
                                | {
                                      /**
                                       * @description Type of the shape.
                                       * @enum {string}
                                       */
                                      type: 'ELLIPSE';
                                      /** @description Lowest x-coordinate of the ellipse. Coordinates are pixel values. */
                                      x: number;
                                      /** @description Lowest y-coordinate of the ellipse. Coordinates are pixel values. */
                                      y: number;
                                      /** @description Width of the ellipse. Coordinates are pixel values. */
                                      width: number;
                                      /** @description Height of the ellipse. Coordinates are pixel values. */
                                      height: number;
                                  }
                                | {
                                      /**
                                       * @description Type of the shape.
                                       * @enum {string}
                                       */
                                      type: 'ROTATED_RECTANGLE';
                                      /** @description Center x-coordinate of the rotated rectangle. Coordinates are pixel values. */
                                      x: number;
                                      /** @description Center y-coordinate of the rotated rectangle. Coordinates are pixel values. */
                                      y: number;
                                      /** @description Width of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values. */
                                      width: number;
                                      /** @description Height of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values. */
                                      height: number;
                                      /** @description Clockwise angle in degrees for the rectangle. */
                                      angle: number;
                                  }
                                | {
                                      /**
                                       * @description Type of the shape.
                                       * @enum {string}
                                       */
                                      type: 'KEYPOINT';
                                      /** @description X-coordinate of the keypoint. Coordinates are pixel values. */
                                      x: number;
                                      /** @description Y-coordinate of the keypoint. Coordinates are pixel values. */
                                      y: number;
                                      /** @description Indicates whether the feature the keypoint is describing is visible in the image. */
                                      is_visible: boolean;
                                  };
                            /** @description List of labels */
                            labels: {
                                /**
                                 * @description Mongo ID of the object
                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                 */
                                id?: string;
                                /**
                                 * Probability
                                 * Format: float
                                 * @description Estimated probability of a prediction. For annotations, this is set to 1.
                                 */
                                probability?: number;
                                source?: {
                                    /** @description User name of the user that added the label or accepted the prediction */
                                    user_id?: string | null;
                                    /** @description Model id of the model that predicted the label */
                                    model_id?: string | null;
                                    /** @description Model storage id of model that predicted the label */
                                    model_storage_id?: string | null;
                                };
                            }[];
                            /** @description Modification date */
                            modified: string;
                            /** @description List of labels IDs for which the annotation should be revisited */
                            labels_to_revisit?: string[];
                        }[];
                        /**
                         * @description Mongo ID of the object
                         * @example 60d31793d5f1fb7e6e3c1a4c
                         */
                        id?: string;
                        /**
                         * @description Kind of annotation (prediction or annotation).
                         * @enum {string}
                         */
                        kind?: 'prediction' | 'annotation';
                        media_identifier?: {
                            frame_index?: number;
                            /**
                             * @description Mongo ID of the object
                             * @example 60d31793d5f1fb7e6e3c1a4c
                             */
                            video_id?: string;
                            /**
                             * @description Type of media. 'image' for images, 'video' for videos.
                             * @enum {string}
                             */
                            type?: 'video_frame';
                        };
                        /** @description Modification date */
                        modified?: string;
                        /** @description List of labels IDs for which the scene (full-image ROI) should be revisited */
                        labels_to_revisit_full_scene?: string[];
                        /** @description List of per-task states obtained aggregating the annotation state with the revisit information */
                        annotation_state_per_task?: {
                            /**
                             * @description Mongo ID of the object
                             * @example 60d31793d5f1fb7e6e3c1a4c
                             */
                            task_id?: string;
                            /**
                             * @description Overall state obtained aggregating the annotation states with the 'revisit' information on a per-task basis. This only has meaning for an  image/frame/scene, as a video does not have an annotation scene. - Image/VideoFrame/AnnotationScene: - to_revisit: Some annotations need to be revisited by the user for this task - annotated: All the ROIs for this task are annotated (contain a label for the task) - partially_annotated: Some ROIs for this task do not contain labels, other ones do - none: No label is present for this task - Video: - all tasks are set to null
                             * @enum {string|null}
                             */
                            state?:
                                | 'to_revisit'
                                | 'annotated'
                                | 'partially_annotated'
                                | 'none'
                                | null;
                        }[];
                    };
                };
            };
            /** @description The latest annotation could not be found or does not exist for the requested video frame. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status: 200 | 201 | 202 | 203 | 204 | 205 | 206;
                        /** @description Message from server */
                        message: string;
                    };
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    GetVideoAnnotationRange: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
                /** @description The ID of the dataset in the project. */
                dataset_id: string;
                /** @description The ID of the video. */
                video_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Annotation range successfully retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /**
                         * @description A UUID, used to identify an annotation.
                         * @example e42cf382-5f7b-4fda-980a-fa0fab00243c
                         */
                        video_id?: string;
                        /** @description List of range labels */
                        range_labels: {
                            /** @description Frame index that represents the left endpoint (inclusive) of the range */
                            start_frame: number;
                            /** @description Frame index that represents the right endpoint (inclusive) of the range */
                            end_frame: number;
                            /** @description ids of the labels assigned to the range */
                            label_ids: string[];
                        }[];
                    };
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    CreateVideoAnnotationRange: {
        parameters: {
            query?: {
                /** @description Number indicating for how many frames in the video an annotation should be uploaded. A value of 1 means every frame is annotated while a value of 10 means every 10th frame gets an annotation. If nothing is passed, it defaults to the video fps. */
                skip_frame?: string;
            };
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
                /** @description The ID of the dataset in the project. */
                dataset_id: string;
                /** @description The ID of the video. */
                video_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @description List of frame ranges and their associated labels */
                    range_labels: {
                        /** @description Frame index that represents the left endpoint (inclusive) of the range */
                        start_frame: number;
                        /** @description Frame index that represents the right endpoint (inclusive) of the range */
                        end_frame: number;
                        /** @description ids of the labels to assign to the range */
                        label_ids: string[];
                    }[];
                };
            };
        };
        responses: {
            /** @description Annotation range successfully uploaded */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /**
                         * @description A UUID, used to identify an annotation.
                         * @example e42cf382-5f7b-4fda-980a-fa0fab00243c
                         */
                        video_id?: string;
                        /** @description List of range labels */
                        range_labels: {
                            /** @description Frame index that represents the left endpoint (inclusive) of the range */
                            start_frame: number;
                            /** @description Frame index that represents the right endpoint (inclusive) of the range */
                            end_frame: number;
                            /** @description ids of the labels assigned to the range */
                            label_ids: string[];
                        }[];
                    };
                };
            };
            /** @description Annotation range is invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    GetVideoAnnotation: {
        parameters: {
            query?: {
                /** @description Set to `true` to return the annotations without the geometric shapes. Default is `false`. */
                label_only?: boolean;
                /** @description The starting index of the range of interest. This is a 0-based inclusive index, meaning to include the first frame of the video,
                 *     this parameter should be set to `0`. The value cannot be bigger than `frame_count-1`.
                 *     The `frame_count` is the total number of frames contained in the video
                 *     and it can be retrieved from the response body of [video detail](#Media/GetVideoDetail) endpoint.  */
                start_frame?: number;
                /** @description :- The ending index of the range of interest. This is a 0-based inclusive index, meaning to include the last frame of the video, this parameter should be set to `frame_count-1`; the value cannot be bigger than `frame_count-1`. The `frame_count` is the total number of frames contained in the video and it can be retrieved from the response body of [video detail](#Media/GetVideoDetail) endpoint. */
                end_frame?: number;
                /** @description Set to the number of desired frame intervals in the response. For example, to retrieve all frame annotations of the video, set this value to `1`.
                 *     If not set, this value will be equal to the video fps. The video fps can be obtained from the response of the [video detail](#Media/GetVideoDetail)
                 *     endpoint.    */
                frameskip?: number;
            };
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
                /** @description The ID of the dataset in the project. */
                dataset_id: string;
                /** @description The ID of the video. */
                video_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Annotations successfully retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description List of annotations */
                        annotations?: {
                            /**
                             * @description A UUID, used to identify an annotation.
                             * @example e42cf382-5f7b-4fda-980a-fa0fab00243c
                             */
                            id: string;
                            shape?:
                                | {
                                      /**
                                       * @description Type of the shape.
                                       * @enum {string}
                                       */
                                      type: 'RECTANGLE';
                                      /** @description x-coordinate of the left side of the rectangle. Coordinates are pixel values. */
                                      x: number;
                                      /** @description y-coordinate of the top of the rectangle. Coordinates are pixel values. */
                                      y: number;
                                      /** @description Width of the rectangle. Coordinates are pixel values. */
                                      width: number;
                                      /** @description Height of the rectangle. Coordinates are pixel values. */
                                      height: number;
                                  }
                                | {
                                      /**
                                       * @description Type of the shape.
                                       * @enum {string}
                                       */
                                      type: 'POLYGON';
                                      /** @description Array of points that define the polygon. */
                                      points: {
                                          /** @description x-coordinate of the point. Coordinates are pixel values. */
                                          x: number;
                                          /** @description y-coordinate of the point. Coordinates are pixel values. */
                                          y: number;
                                      }[];
                                  }
                                | {
                                      /**
                                       * @description Type of the shape.
                                       * @enum {string}
                                       */
                                      type: 'ELLIPSE';
                                      /** @description Lowest x-coordinate of the ellipse. Coordinates are pixel values. */
                                      x: number;
                                      /** @description Lowest y-coordinate of the ellipse. Coordinates are pixel values. */
                                      y: number;
                                      /** @description Width of the ellipse. Coordinates are pixel values. */
                                      width: number;
                                      /** @description Height of the ellipse. Coordinates are pixel values. */
                                      height: number;
                                  }
                                | {
                                      /**
                                       * @description Type of the shape.
                                       * @enum {string}
                                       */
                                      type: 'ROTATED_RECTANGLE';
                                      /** @description Center x-coordinate of the rotated rectangle. Coordinates are pixel values. */
                                      x: number;
                                      /** @description Center y-coordinate of the rotated rectangle. Coordinates are pixel values. */
                                      y: number;
                                      /** @description Width of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values. */
                                      width: number;
                                      /** @description Height of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values. */
                                      height: number;
                                      /** @description Clockwise angle in degrees for the rectangle. */
                                      angle: number;
                                  }
                                | {
                                      /**
                                       * @description Type of the shape.
                                       * @enum {string}
                                       */
                                      type: 'KEYPOINT';
                                      /** @description X-coordinate of the keypoint. Coordinates are pixel values. */
                                      x: number;
                                      /** @description Y-coordinate of the keypoint. Coordinates are pixel values. */
                                      y: number;
                                      /** @description Indicates whether the feature the keypoint is describing is visible in the image. */
                                      is_visible: boolean;
                                  };
                            /** @description List of labels */
                            labels: {
                                /**
                                 * @description Mongo ID of the object
                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                 */
                                id?: string;
                                /**
                                 * Probability
                                 * Format: float
                                 * @description Estimated probability of a prediction. For annotations, this is set to 1.
                                 */
                                probability?: number;
                                source?: {
                                    /** @description User name of the user that added the label or accepted the prediction */
                                    user_id?: string | null;
                                    /** @description Model id of the model that predicted the label */
                                    model_id?: string | null;
                                    /** @description Model storage id of model that predicted the label */
                                    model_storage_id?: string | null;
                                };
                            }[];
                            /** @description Modification date */
                            modified: string;
                            /** @description List of labels IDs for which the annotation should be revisited */
                            labels_to_revisit?: string[];
                        }[];
                        /**
                         * @description Mongo ID of the object
                         * @example 60d31793d5f1fb7e6e3c1a4c
                         */
                        id?: string;
                        /**
                         * @description Kind of annotation (prediction or annotation).
                         * @enum {string}
                         */
                        kind?: 'prediction' | 'annotation';
                        media_identifier?: {
                            frame_index?: number;
                            /**
                             * @description Mongo ID of the object
                             * @example 60d31793d5f1fb7e6e3c1a4c
                             */
                            video_id?: string;
                            /**
                             * @description Type of media. 'image' for images, 'video' for videos.
                             * @enum {string}
                             */
                            type?: 'video_frame';
                        };
                        /** @description Modification date */
                        modified?: string;
                        /** @description List of labels IDs for which the scene (full-image ROI) should be revisited */
                        labels_to_revisit_full_scene?: string[];
                        /** @description List of per-task states obtained aggregating the annotation state with the revisit information */
                        annotation_state_per_task?: {
                            /**
                             * @description Mongo ID of the object
                             * @example 60d31793d5f1fb7e6e3c1a4c
                             */
                            task_id?: string;
                            /**
                             * @description Overall state obtained aggregating the annotation states with the 'revisit' information on a per-task basis. This only has meaning for an  image/frame/scene, as a video does not have an annotation scene. - Image/VideoFrame/AnnotationScene: - to_revisit: Some annotations need to be revisited by the user for this task - annotated: All the ROIs for this task are annotated (contain a label for the task) - partially_annotated: Some ROIs for this task do not contain labels, other ones do - none: No label is present for this task - Video: - all tasks are set to null
                             * @enum {string|null}
                             */
                            state?:
                                | 'to_revisit'
                                | 'annotated'
                                | 'partially_annotated'
                                | 'none'
                                | null;
                        }[];
                    };
                };
            };
            /** @description Annotation could not be found. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status: 200 | 201 | 202 | 203 | 204 | 205 | 206;
                        /** @description Message from server */
                        message: string;
                    };
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    GetSupportedAlgorithms: {
        parameters: {
            query?: {
                /** @description Whether to include obsolete algorithms in the response. */
                include_obsolete?: boolean;
            };
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of supported algorithms */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description List of supported algorithms */
                        supported_algorithms?: {
                            /** @description Name of the algorithm */
                            name?: string;
                            /**
                             * @description Task type of the algorithm.
                             * @enum {string}
                             */
                            task_type?:
                                | 'detection'
                                | 'rotated_detection'
                                | 'anomaly'
                                | 'segmentation'
                                | 'instance_segmentation'
                                | 'classification'
                                | 'keypoint_detection';
                            /**
                             * Format: float
                             * @description Storage size of the model, in MB
                             */
                            model_size?: number;
                            /** @description Unique identifier for the algorithm */
                            model_template_id?: string;
                            /**
                             * Format: float
                             * @description Theoretical complexity of the model, in billions of operations
                             */
                            gigaflops?: number;
                            /** @description A short summary that gives information about the algorithm */
                            summary?: string;
                            /**
                             * @deprecated
                             * @description Boolean that indicates whether the algorithm supports automatic hyper parameter optimization.
                             *     This field is deprecated and should not be used, it will be removed in the future.
                             */
                            supports_auto_hpo?: boolean;
                            /** @description Boolean that indicates whether the model template is the default selection for the task */
                            default_algorithm?: boolean;
                            /**
                             * @description The category of the model template. Some algorithms focus more on accuracy, others on inference speed.
                             * @enum {string}
                             */
                            performance_category?: 'balance' | 'speed' | 'accuracy' | 'other';
                            /**
                             * @description The current support status of the model architecture. 'Active' algorithms are fully supported and maintained.
                             *     'Deprecated' ones are still supported, but not recommended for training; in a later version, they may be
                             *     discontinued and become 'obsolete', which means that new models cannot be trained with such algorithms.
                             * @enum {string}
                             */
                            lifecycle_stage?: 'active' | 'deprecated' | 'obsolete';
                        }[];
                    };
                };
            };
            /** @description Task type is not recognized or supported */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    TrainModel: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @description The ID of the model architecture to be trained. This can be obtained from the [supported algorithms endpoint](#Projects/GetSupportedAlgorithms). */
                    model_template_id?: string;
                    /** @description The ID of the task to train. For task-chain projects, this is a required parameter.
                     *     The task ID can be found in the response body of the [project detail](#Projects/GetProjectInfo) endpoint. */
                    task_id?: string;
                    /** @description Set to `true` to train the model from scratch (i.e., not finetuning from previous version). */
                    train_from_scratch?: boolean;
                    /** @description Set to `true` to reset the train, test and validation subsets (Only valid when `train_from_scratch` is set to `true`). */
                    reshuffle_subsets?: boolean;
                    /** @description Defines the maximum dataset size for training. If no value is provided, the whole dataset is used. */
                    max_training_dataset_size?: number;
                    /**
                     * @deprecated
                     * @description Boolean that indicates whether to run hyper-parameter optimization (HPO) before training.
                     *     This field is deprecated and should not be used, it will be removed in the future.
                     */
                    enable_hyper_parameter_optimization?: boolean;
                    /**
                     * @deprecated
                     * @description These parameters control the automatic hyper parameter optimization process, if it is enabled. If `enable_hyper_parameter_optimization` is set to `true`, the hpo_parameters in this field must be specified. Otherwise, this field can be left empty.
                     *
                     */
                    hpo_parameters?: {
                        /**
                         * Format: float
                         * @description This parameter controls the time allotted for automatic hyper parameter optimization. It is measured in multiples of training time, e.g. setting `hpo_time_ratio` to `4.0` will result in the hpo process taking approximately 4 times as long as a normal training without hpo would.
                         *
                         */
                        hpo_time_ratio?: number;
                    };
                    /** @description Hyper parameters for the model to be trained */
                    hyper_parameters?: {
                        /** @description Array of hyper parameter groups */
                        components: {
                            /** Hyper parameter group entity identifier */
                            entity_identifier: {
                                workspace_id?: string;
                                /**
                                 * @description Mongo ID of the object
                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                 */
                                model_storage_id: string;
                                /** @description The name of the hyper parameter group */
                                group_name: string;
                                /**
                                 * @description Describes the type of the component. For hyper parameter groups, type is always set to HYPER_PARAMETER_GROUP
                                 * @enum {string}
                                 */
                                type: 'HYPER_PARAMETER_GROUP';
                            };
                            groups?: {
                                /** @description Name of the parameter group */
                                name: string;
                                /** @description Array of parameters */
                                parameters: {
                                    /** @description Value to set the parameter to. */
                                    value: string | number | boolean;
                                    /** @description Name to identify the parameter by in the system. */
                                    name: string;
                                }[];
                            }[];
                            parameters?: {
                                /** @description Value to set the parameter to. */
                                value: string | number | boolean;
                                /** @description Name to identify the parameter by in the system. */
                                name: string;
                            }[];
                        }[];
                    };
                };
            };
        };
        responses: {
            /** @description Training job submitted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /**
                         * @description Mongo ID of the object
                         * @example 60d31793d5f1fb7e6e3c1a4c
                         */
                        job_id?: string;
                    };
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
            /** @description Insufficient balance for training job execution. */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
            /** @description Unprocessable Content. See the examples for details. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    LegacyTrainModel: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @description The ID of the model architecture to be trained. This can be obtained from the [supported algorithms endpoint](#Projects/GetSupportedAlgorithms). */
                    model_template_id?: string;
                    /** @description The ID of the task to train. For task-chain projects, this is a required parameter.
                     *     The task ID can be found in the response body of the [project detail](#Projects/GetProjectInfo) endpoint. */
                    task_id?: string;
                    /** @description Set to `true` to train the model from scratch (i.e., not finetuning from previous version). */
                    train_from_scratch?: boolean;
                    /** @description Set to `true` to reset the train, test and validation subsets (Only valid when `train_from_scratch` is set to `true`). */
                    reshuffle_subsets?: boolean;
                    /** @description Defines the maximum dataset size for training. If no value is provided, the whole dataset is used. */
                    max_training_dataset_size?: number;
                    /**
                     * @deprecated
                     * @description Boolean that indicates whether to run hyper-parameter optimization (HPO) before training.
                     *     This field is deprecated and should not be used, it will be removed in the future.
                     */
                    enable_hyper_parameter_optimization?: boolean;
                    /**
                     * @deprecated
                     * @description These parameters control the automatic hyper parameter optimization process, if it is enabled. If `enable_hyper_parameter_optimization` is set to `true`, the hpo_parameters in this field must be specified. Otherwise, this field can be left empty.
                     *
                     */
                    hpo_parameters?: {
                        /**
                         * Format: float
                         * @description This parameter controls the time allotted for automatic hyper parameter optimization. It is measured in multiples of training time, e.g. setting `hpo_time_ratio` to `4.0` will result in the hpo process taking approximately 4 times as long as a normal training without hpo would.
                         *
                         */
                        hpo_time_ratio?: number;
                    };
                    /** @description Hyper parameters for the model to be trained */
                    hyper_parameters?: {
                        /** @description Array of hyper parameter groups */
                        components: {
                            /** Hyper parameter group entity identifier */
                            entity_identifier: {
                                workspace_id?: string;
                                /**
                                 * @description Mongo ID of the object
                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                 */
                                model_storage_id: string;
                                /** @description The name of the hyper parameter group */
                                group_name: string;
                                /**
                                 * @description Describes the type of the component. For hyper parameter groups, type is always set to HYPER_PARAMETER_GROUP
                                 * @enum {string}
                                 */
                                type: 'HYPER_PARAMETER_GROUP';
                            };
                            groups?: {
                                /** @description Name of the parameter group */
                                name: string;
                                /** @description Array of parameters */
                                parameters: {
                                    /** @description Value to set the parameter to. */
                                    value: string | number | boolean;
                                    /** @description Name to identify the parameter by in the system. */
                                    name: string;
                                }[];
                            }[];
                            parameters?: {
                                /** @description Value to set the parameter to. */
                                value: string | number | boolean;
                                /** @description Name to identify the parameter by in the system. */
                                name: string;
                            }[];
                        }[];
                    };
                };
            };
        };
        responses: {
            /** @description Training job submitted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /**
                         * @description Mongo ID of the object
                         * @example 60d31793d5f1fb7e6e3c1a4c
                         */
                        job_id?: string;
                    };
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
            /** @description Unprocessable Content. See the examples for details. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    GetModelGroups: {
        parameters: {
            query?: {
                /** @description Provide the task ID to get the model groups related to that task. For example in a task chain project,
                 *     set this parameter to the ID of the first task if you are interested only in the model groups of the first task.
                 *     The task ID can be found in the response body of the [project detail](#Projects/GetProjectInfo) endpoint.
                 *
                 *     If no task id is provided, the response will contain the model groups for all tasks in the project. */
                task_id?: string;
            };
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Information on all models and their groups belonging to a project */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Array of model groups */
                        model_groups?: {
                            /** @description Array of models. The models at this level represent the successfully trained models. Note that these are not
                             *     the (OpenVINO or ONNX) optimized models;
                             *     the list of optimized models can be found through the [model detail](#Models/GetModelDetail) endpoint.   */
                            models?: {
                                /**
                                 * @description Mongo ID of the object
                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                 */
                                id?: string;
                                /** @description Name of the model. */
                                name?: string;
                                /** @description Creation date of the model. */
                                creation_date?: string;
                                /**
                                 * Format: int32
                                 * @description Model size in bytes.
                                 */
                                size?: number;
                                /**
                                 * Format: int32
                                 * @description The aggregated size (bytes) for model-related files. This includes all the exportable binaries, such as exportable code,
                                 *     and the binaries from the optimized models.
                                 */
                                total_disk_size?: number;
                                performance?: {
                                    /**
                                     * Format: float
                                     * @description Accuracy score for the model. Only applicable for non-anomaly projects.
                                     */
                                    score?: number | null;
                                };
                                /** @description Boolean that indicates whether the label schema for the model is in sync with the latest label schema for the task containing the model */
                                label_schema_in_sync?: boolean;
                                /**
                                 * @deprecated
                                 * @description Boolean indicating whether the score of the model is the most recent score.
                                 *     This parameter is deprecated and should not be used, it will be removed in the future.
                                 */
                                score_up_to_date?: boolean;
                                /** @description ID of the model storage */
                                model_storage_id?: string;
                                /** @description Boolean indicating that the model is used for inference requests for the project. */
                                active_model?: boolean;
                                /** @description Version of the model */
                                version?: number;
                                /** @description Purging state of the model. A model is purged when all its binary files are removed from the server.
                                 *     This is performed through the [purge model](#Models/ArchiveModel) endpoint. */
                                purge_info?: {
                                    /** @description Boolean indicating if the model is purged. */
                                    is_purged?: boolean;
                                    /** @description The user ID who requested the cancellation. */
                                    user_uid?: string | null;
                                    /**
                                     * Format: date-time
                                     * @description The time when the model was purged.
                                     */
                                    purge_time?: string | null;
                                };
                                /**
                                 * @description The current support status of the model format. 'Active' models are fully supported and maintained.
                                 *     'Obsolete' ones can be used for inference and deployment, but they can no longer be optimized.
                                 *     In addition, training with an 'obsolete' happens from scratch rather than incrementally.
                                 * @enum {string}
                                 */
                                lifecycle_stage?: 'active' | 'obsolete';
                            }[];
                            /**
                             * @description Mongo ID of the object
                             * @example 60d31793d5f1fb7e6e3c1a4c
                             */
                            task_id?: string;
                            /**
                             * @description Mongo ID of the object
                             * @example 60d31793d5f1fb7e6e3c1a4c
                             */
                            id?: string;
                            /** @description Name of the model group, typically the name of the architecture. */
                            name?: string;
                            /** @description The ID of the model architecture. */
                            model_template_id?: string;
                            /**
                             * @description The learning approach from which the model is generated.
                             *
                             *     `fully_supervised` is for models that are trained through training job; while `one_shot` models are not. For example, `one_shot`
                             *     is used for visual prompt models.
                             * @enum {string}
                             */
                            learning_approach?: 'fully_supervised' | 'one_shot';
                            /**
                             * @description The current support status of the model architecture. 'Active' algorithms are fully supported and maintained.
                             *     'Deprecated' ones are still supported, but not recommended for training; in a later version, they may be
                             *     discontinued and become 'obsolete', which means that new models cannot be trained with such algorithms.
                             * @enum {string}
                             */
                            lifecycle_stage?: 'active' | 'deprecated' | 'obsolete';
                        }[];
                    };
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    GetModelGroup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
                /** @description The ID of the model group of interest. This can be found as `model_groups[].id` in the response body of [model group listing](#Models/GetModelGroups) endpoint. */
                model_group_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Information on all models and their groups belonging to a project */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Array of models. The models at this level represent the successfully trained models. Note that these are not
                         *     the (OpenVINO or ONNX) optimized models;
                         *     the list of optimized models can be found through the [model detail](#Models/GetModelDetail) endpoint.   */
                        models?: {
                            /**
                             * @description Mongo ID of the object
                             * @example 60d31793d5f1fb7e6e3c1a4c
                             */
                            id?: string;
                            /** @description Name of the model. */
                            name?: string;
                            /** @description Creation date of the model. */
                            creation_date?: string;
                            /**
                             * Format: int32
                             * @description Model size in bytes.
                             */
                            size?: number;
                            /**
                             * Format: int32
                             * @description The aggregated size (bytes) for model-related files. This includes all the exportable binaries, such as exportable code,
                             *     and the binaries from the optimized models.
                             */
                            total_disk_size?: number;
                            performance?: {
                                /**
                                 * Format: float
                                 * @description Accuracy score for the model. Only applicable for non-anomaly projects.
                                 */
                                score?: number | null;
                            };
                            /** @description Boolean that indicates whether the label schema for the model is in sync with the latest label schema for the task containing the model */
                            label_schema_in_sync?: boolean;
                            /**
                             * @deprecated
                             * @description Boolean indicating whether the score of the model is the most recent score.
                             *     This parameter is deprecated and should not be used, it will be removed in the future.
                             */
                            score_up_to_date?: boolean;
                            /** @description ID of the model storage */
                            model_storage_id?: string;
                            /** @description Boolean indicating that the model is used for inference requests for the project. */
                            active_model?: boolean;
                            /** @description Version of the model */
                            version?: number;
                            /** @description Purging state of the model. A model is purged when all its binary files are removed from the server.
                             *     This is performed through the [purge model](#Models/ArchiveModel) endpoint. */
                            purge_info?: {
                                /** @description Boolean indicating if the model is purged. */
                                is_purged?: boolean;
                                /** @description The user ID who requested the cancellation. */
                                user_uid?: string | null;
                                /**
                                 * Format: date-time
                                 * @description The time when the model was purged.
                                 */
                                purge_time?: string | null;
                            };
                            /**
                             * @description The current support status of the model format. 'Active' models are fully supported and maintained.
                             *     'Obsolete' ones can be used for inference and deployment, but they can no longer be optimized.
                             *     In addition, training with an 'obsolete' happens from scratch rather than incrementally.
                             * @enum {string}
                             */
                            lifecycle_stage?: 'active' | 'obsolete';
                        }[];
                        /**
                         * @description Mongo ID of the object
                         * @example 60d31793d5f1fb7e6e3c1a4c
                         */
                        task_id?: string;
                        /**
                         * @description Mongo ID of the object
                         * @example 60d31793d5f1fb7e6e3c1a4c
                         */
                        id?: string;
                        /** @description Name of the model group, typically the name of the architecture. */
                        name?: string;
                        /** @description The ID of the model architecture. */
                        model_template_id?: string;
                        /**
                         * @description The learning approach from which the model is generated.
                         *
                         *     `fully_supervised` is for models that are trained through training job; while `one_shot` models are not. For example, `one_shot`
                         *     is used for visual prompt models.
                         * @enum {string}
                         */
                        learning_approach?: 'fully_supervised' | 'one_shot';
                        /**
                         * @description The current support status of the model architecture. 'Active' algorithms are fully supported and maintained.
                         *     'Deprecated' ones are still supported, but not recommended for training; in a later version, they may be
                         *     discontinued and become 'obsolete', which means that new models cannot be trained with such algorithms.
                         * @enum {string}
                         */
                        lifecycle_stage?: 'active' | 'deprecated' | 'obsolete';
                    };
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    ActivateModelGroup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
                /** @description The ID of the model group of interest. This can be found as `model_groups[].id` in the response body of [model group listing](#Models/GetModelGroups) endpoint. */
                model_group_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Model group successfully activated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Array of models. The models at this level represent the successfully trained models. Note that these are not
                         *     the (OpenVINO or ONNX) optimized models;
                         *     the list of optimized models can be found through the [model detail](#Models/GetModelDetail) endpoint.   */
                        models?: {
                            /**
                             * @description Mongo ID of the object
                             * @example 60d31793d5f1fb7e6e3c1a4c
                             */
                            id?: string;
                            /** @description Name of the model. */
                            name?: string;
                            /** @description Creation date of the model. */
                            creation_date?: string;
                            /**
                             * Format: int32
                             * @description Model size in bytes.
                             */
                            size?: number;
                            /**
                             * Format: int32
                             * @description The aggregated size (bytes) for model-related files. This includes all the exportable binaries, such as exportable code,
                             *     and the binaries from the optimized models.
                             */
                            total_disk_size?: number;
                            performance?: {
                                /**
                                 * Format: float
                                 * @description Accuracy score for the model. Only applicable for non-anomaly projects.
                                 */
                                score?: number | null;
                            };
                            /** @description Boolean that indicates whether the label schema for the model is in sync with the latest label schema for the task containing the model */
                            label_schema_in_sync?: boolean;
                            /**
                             * @deprecated
                             * @description Boolean indicating whether the score of the model is the most recent score.
                             *     This parameter is deprecated and should not be used, it will be removed in the future.
                             */
                            score_up_to_date?: boolean;
                            /** @description ID of the model storage */
                            model_storage_id?: string;
                            /** @description Boolean indicating that the model is used for inference requests for the project. */
                            active_model?: boolean;
                            /** @description Version of the model */
                            version?: number;
                            /** @description Purging state of the model. A model is purged when all its binary files are removed from the server.
                             *     This is performed through the [purge model](#Models/ArchiveModel) endpoint. */
                            purge_info?: {
                                /** @description Boolean indicating if the model is purged. */
                                is_purged?: boolean;
                                /** @description The user ID who requested the cancellation. */
                                user_uid?: string | null;
                                /**
                                 * Format: date-time
                                 * @description The time when the model was purged.
                                 */
                                purge_time?: string | null;
                            };
                            /**
                             * @description The current support status of the model format. 'Active' models are fully supported and maintained.
                             *     'Obsolete' ones can be used for inference and deployment, but they can no longer be optimized.
                             *     In addition, training with an 'obsolete' happens from scratch rather than incrementally.
                             * @enum {string}
                             */
                            lifecycle_stage?: 'active' | 'obsolete';
                        }[];
                        /**
                         * @description Mongo ID of the object
                         * @example 60d31793d5f1fb7e6e3c1a4c
                         */
                        task_id?: string;
                        /**
                         * @description Mongo ID of the object
                         * @example 60d31793d5f1fb7e6e3c1a4c
                         */
                        id?: string;
                        /** @description Name of the model group, typically the name of the architecture. */
                        name?: string;
                        /** @description The ID of the model architecture. */
                        model_template_id?: string;
                        /**
                         * @description The learning approach from which the model is generated.
                         *
                         *     `fully_supervised` is for models that are trained through training job; while `one_shot` models are not. For example, `one_shot`
                         *     is used for visual prompt models.
                         * @enum {string}
                         */
                        learning_approach?: 'fully_supervised' | 'one_shot';
                        /**
                         * @description The current support status of the model architecture. 'Active' algorithms are fully supported and maintained.
                         *     'Deprecated' ones are still supported, but not recommended for training; in a later version, they may be
                         *     discontinued and become 'obsolete', which means that new models cannot be trained with such algorithms.
                         * @enum {string}
                         */
                        lifecycle_stage?: 'active' | 'deprecated' | 'obsolete';
                    };
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
            /** @description Model group cannot be activated. It does not contain successful models */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    GetModelDetail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
                /** @description The ID of the model group of interest. This can be found as `model_groups[].id` in the response body of [model group listing](#Models/GetModelGroups) endpoint. */
                model_group_id: string;
                /** @description The ID of the model of interest. This can be found as `model_groups[].models[].id` from the response of [model group listing](#Models/GetModelGroups)
                 *     endpoint or `models[].id` from [model group detail](#Models/GetModelGroup) endpoint. */
                model_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Detailed information on a model */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /**
                         * @description Mongo ID of the object
                         * @example 60d31793d5f1fb7e6e3c1a4c
                         */
                        id?: string;
                        /** @description Network architecture of the model */
                        architecture?: string;
                        /** @description Name of the model */
                        name?: string;
                        /** @description Creation date of the model */
                        creation_date?: string;
                        /**
                         * Format: int32
                         * @description Model size in bytes
                         */
                        size?: number;
                        /**
                         * Format: int32
                         * @description The aggregated size (bytes) for model-related files. This includes all the exportable binaries, such as exportable code,
                         *     and the binaries from the optimized models.
                         */
                        total_disk_size?: number;
                        performance?: {
                            /**
                             * Format: float
                             * @description Accuracy score for the model. Only applicable for non-anomaly projects.
                             */
                            score?: number | null;
                        };
                        /** @description Boolean that indicates whether the label schema for the model is in sync with the latest label schema for the task containing the model */
                        label_schema_in_sync?: boolean;
                        /**
                         * @deprecated
                         * @description Boolean that indicates whether the score of the model is the most recent score.
                         *     This parameter is deprecated and should not be used, it will be removed in the future.
                         */
                        score_up_to_date?: boolean;
                        /**
                         * Format: int32
                         * @deprecated
                         * @description FPS throughput for the model.
                         *     This parameter is deprecated and should not be used, it will be removed in the future.
                         */
                        fps_throughput?: number;
                        /**
                         * Format: int32
                         * @deprecated
                         * @description Latency for the model, in ms.
                         *     This parameter is deprecated and should not be used, it will be removed in the future.
                         */
                        latency?: number;
                        precision?: string[];
                        /**
                         * @deprecated
                         * @description Type of device the model is best used on.
                         *     This parameter is deprecated and should not be used, it will be removed in the future.
                         */
                        target_device?: string;
                        /**
                         * @deprecated
                         * @description Detailed type of device the model is best used on.
                         *     This parameter is deprecated and should not be used, it will be removed in the future.
                         */
                        target_device_type?: string;
                        /** @description Version of the model */
                        version?: number;
                        /** @description ID of the previous model */
                        previous_revision_id?: string;
                        /** @description ID of the previous trained model */
                        previous_trained_revision_id?: string;
                        /** @description Array of optimized models */
                        optimized_models?: {
                            /** @description ID of the optimized model */
                            id?: string;
                            /**
                             * Format: int32
                             * @description Model size in bytes
                             */
                            size?: number;
                            /**
                             * Format: int32
                             * @deprecated
                             * @description FPS throughput of the optimized model.
                             *     This parameter is deprecated and should not be used, it will be removed in the future.
                             */
                            fps_throughput?: number;
                            /**
                             * Format: int32
                             * @deprecated
                             * @description Latency for the optimized model, in ms.
                             *     This parameter is deprecated and should not be used, it will be removed in the future.
                             */
                            latency?: number;
                            optimization_levels?: Record<string, never>;
                            /** @description Array of optimization methods */
                            optimization_methods?: string[];
                            /** @description Optimization type of the model */
                            optimization_type?: string;
                            /** @description Precision of the model */
                            precision?: string[];
                            /** @description Whether the model also outputs eXplainable AI artifacts, e.g. saliency maps. */
                            has_xai_head?: boolean;
                            /**
                             * @description Format of the model
                             * @enum {string}
                             */
                            model_format?: 'OpenVINO' | 'ONNX';
                            /** @description Version of the model */
                            version?: number;
                            /** @description ID of the prevoius model */
                            previous_revision_id?: string;
                            /** @description ID of the previous trained model */
                            previous_trained_revision_id?: string;
                            performance?: {
                                /**
                                 * Format: float
                                 * @description Accuracy score for the model. Only applicable for non-anomaly projects.
                                 */
                                score?: number | null;
                            };
                            /**
                             * @deprecated
                             * @description Type of device the model is best used on.
                             *     This parameter is deprecated and should not be used, it will be removed in the future.
                             */
                            target_device?: string;
                            /**
                             * @deprecated
                             * @description Detailed type of device the model is best used on.
                             *     This parameter is deprecated and should not be used, it will be removed in the future.
                             */
                            target_device_type?: string;
                            /** @description Name of the model */
                            name?: string;
                            /**
                             * @description Status of the model
                             * @enum {string}
                             */
                            model_status?:
                                | 'NOT_READY'
                                | 'WEIGHTS_INITIALIZED'
                                | 'SUCCESS'
                                | 'FAILED'
                                | 'NOT_IMPROVED';
                            /** @description Array of additional configuration parameters */
                            configurations?: {
                                /** @description name of the configuration parameter */
                                name?: string;
                                /** @description value of the configuration parameter */
                                value?: unknown;
                            }[];
                            /**
                             * @description The current support status of the model format. 'Active' models are fully supported and maintained.
                             *     'Obsolete' ones can be used for inference and deployment, but they can no longer be optimized.
                             *     In addition, training with an 'obsolete' happens from scratch rather than incrementally.
                             * @enum {string}
                             */
                            lifecycle_stage?: 'active' | 'obsolete';
                        }[];
                        /** @description Array of labels */
                        labels?: {
                            /** @description Label name, must be unique */
                            name: string;
                            /**
                             * @description Mongo ID of the object
                             * @example 60d31793d5f1fb7e6e3c1a4c
                             */
                            id: string;
                            /** @description Label color, picked at random if not specified */
                            color: string;
                            /** @description Name of label group */
                            group: string;
                            /** @description Name of parent label */
                            parent_id: string | null;
                            /** @description Indicates whether the label is an empty label */
                            is_empty: boolean;
                            /** @description Indicates whether the label is anomalous or not */
                            is_anomalous: boolean;
                            /** @description Indicates whether the label is deleted */
                            is_deleted?: boolean;
                            /** @description Key or combination of key to select this label. Can be empty (no key). */
                            hotkey: string;
                        }[];
                        training_dataset_info?: {
                            /**
                             * @description Mongo ID of the object
                             * @example 60d31793d5f1fb7e6e3c1a4c
                             */
                            dataset_storage_id?: string;
                            /**
                             * @description Mongo ID of the object
                             * @example 60d31793d5f1fb7e6e3c1a4c
                             */
                            dataset_revision_id?: string;
                            /**
                             * Format: int32
                             * @description The number of items in the training dataset. Note that for the second task in a task chain, this could be more than
                             *     `n_images + n_frames` because each bounding box of the first task corresponds to one dataset item of the second task.
                             */
                            n_samples?: number;
                            /**
                             * Format: int32
                             * @description The number of distinct images in the dataset
                             */
                            n_images?: number;
                            /**
                             * Format: int32
                             * @description The number of distinct video frames in the dataset
                             */
                            n_frames?: number;
                        };
                        /** @description Information about the framework used to train the model */
                        training_framework?: {
                            /**
                             * @description Type of the training framework
                             * @enum {string}
                             */
                            type?: 'otx' | 'third_party';
                            /** @description Version of the training framework */
                            version?: string;
                        };
                        /** @description Purging state of the model. A model is purged when all its binary files are removed from the server.
                         *     This is performed through the [purge model](#Models/ArchiveModel) endpoint. */
                        purge_info?: {
                            /** @description Boolean indicating if the model is purged. */
                            is_purged?: boolean;
                            /** @description The user ID who requested the cancellation. */
                            user_uid?: string | null;
                            /**
                             * Format: date-time
                             * @description The time when the model was purged.
                             */
                            purge_time?: string | null;
                        };
                        /**
                         * @description The learning approach from which the model is generated.
                         *
                         *     `fully_supervised` is for models that are trained through training job; while `one_shot` models are not. For example, `one_shot`
                         *     is used for visual prompt models.
                         * @enum {string}
                         */
                        learning_approach?: 'fully_supervised' | 'one_shot';
                        /**
                         * @description The current support status of the model format. 'Active' models are fully supported and maintained.
                         *     'Obsolete' ones can be used for inference and deployment, but they can no longer be optimized.
                         *     In addition, training with an 'obsolete' happens from scratch rather than incrementally.
                         * @enum {string}
                         */
                        lifecycle_stage?: 'active' | 'obsolete';
                    };
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    GetModelStatistics: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
                /** @description The ID of the model group of interest. This can be found as `model_groups[].id` in the response body of [model group listing](#Models/GetModelGroups) endpoint. */
                model_group_id: string;
                /** @description The ID of the model of interest. This can be found as `model_groups[].models[].id` from the response of [model group listing](#Models/GetModelGroups)
                 *     endpoint or `models[].id` from [model group detail](#Models/GetModelGroup) endpoint. */
                model_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Training statistics for a model */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        model_statistics?: {
                            /** @description Header describing the chart */
                            header?: string;
                            /** @description Unique key for the chart */
                            key?: string;
                            /**
                             * @description Type of chart. Current implementation allows 'line', 'text', 'bar', 'radial_bar' and 'matrix'.
                             * @enum {string}
                             */
                            type?: 'text' | 'line' | 'bar' | 'radial_bar' | 'matrix';
                            value?:
                                | (string | number)
                                | {
                                      /** @description Name of the bar */
                                      header?: string;
                                      /** @description Unique key for the bar */
                                      key?: string;
                                      /** @description Value for the bar */
                                      value?: number;
                                      /** @description Color of the bar in hex format */
                                      color?: string | null;
                                  }[]
                                | {
                                      /** @description Label of the x-axis for the line chart */
                                      x_axis_label: string;
                                      /** @description Label of the y-axis for the line chart */
                                      y_axis_label: string;
                                      /** @description Color of the bar in hex format */
                                      color?: string | null;
                                      /** @description Array of line data, each containing the information for one line. */
                                      line_data: {
                                          /** @description List of coordinates of the points in the line chart */
                                          points?: {
                                              /** @description X coordinate of the point */
                                              x?: number;
                                              /** @description Y coordinate of the point */
                                              y?: number;
                                          }[];
                                      }[];
                                  }
                                | {
                                      /** @description The header for all the rows in the matrix */
                                      row_header: string;
                                      /** @description The header for all the columns in the matrix */
                                      column_header: string;
                                      /** @description Array of matrices */
                                      matrix_data: {
                                          /** @description Array containing the names of the matrix rows */
                                          row_names?: string[];
                                          /** @description Array containing the names of the matrix columns */
                                          column_names?: string[];
                                          /** @description Array of matrix values */
                                          matrix_values?: number[][];
                                      }[];
                                  };
                        }[];
                    };
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    ExportModel: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
                /** @description The ID of the model group of interest. This can be found as `model_groups[].id` in the response body of [model group listing](#Models/GetModelGroups) endpoint. */
                model_group_id: string;
                /** @description The ID of the model of interest. This can be found as `model_groups[].models[].id` from the response of [model group listing](#Models/GetModelGroups)
                 *     endpoint or `models[].id` from [model group detail](#Models/GetModelGroup) endpoint. */
                model_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Export a full model */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'zip file': string;
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    ExportOptimizedModel: {
        parameters: {
            query?: {
                /** @description Only applicable to OpenVINO-optimized models. Set to `true` to only download the model binaries; set to `false` to also include
                 *     the code in the exported file.  */
                model_only?: boolean;
            };
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
                /** @description The ID of the model group of interest. This can be found as `model_groups[].id` in the response body of [model group listing](#Models/GetModelGroups) endpoint. */
                model_group_id: string;
                /** @description The ID of the model of interest. This can be found as `model_groups[].models[].id` from the response of [model group listing](#Models/GetModelGroups)
                 *     endpoint or `models[].id` from [model group detail](#Models/GetModelGroup) endpoint. */
                model_id: string;
                /** @description The ID of the optimized model */
                optimized_model_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Export an optimized model */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'zip file': string;
                };
            };
            /** @description Bad request. See the examples for details. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    OptimizeModel: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
                /** @description The ID of the model group of interest. This can be found as `model_groups[].id` in the response body of [model group listing](#Models/GetModelGroups) endpoint. */
                model_group_id: string;
                /** @description The ID of the model of interest. This can be found as `model_groups[].models[].id` from the response of [model group listing](#Models/GetModelGroups)
                 *     endpoint or `models[].id` from [model group detail](#Models/GetModelGroup) endpoint. */
                model_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /** @description This field is deprecated and ignored by the server. */
                    enable_nncf_optimization?: boolean;
                    /** @description This field is deprecated and ignored by the server. */
                    enable_pot_optimization?: boolean;
                    /** @description This field is deprecated and ignored by the server. */
                    optimization_parameters?: Record<string, never>;
                };
            };
        };
        responses: {
            /** @description Optimization job is submitted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /**
                         * @description Mongo ID of the object
                         * @example 60d31793d5f1fb7e6e3c1a4c
                         */
                        job_id?: string;
                    };
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    LegacyOptimizeModel: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
                /** @description The ID of the model group of interest. This can be found as `model_groups[].id` in the response body of [model group listing](#Models/GetModelGroups) endpoint. */
                model_group_id: string;
                /** @description The ID of the model of interest. This can be found as `model_groups[].models[].id` from the response of [model group listing](#Models/GetModelGroups)
                 *     endpoint or `models[].id` from [model group detail](#Models/GetModelGroup) endpoint. */
                model_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /** @description This field is deprecated and ignored by the server. */
                    enable_nncf_optimization?: boolean;
                    /** @description This field is deprecated and ignored by the server. */
                    enable_pot_optimization?: boolean;
                    /** @description This field is deprecated and ignored by the server. */
                    optimization_parameters?: Record<string, never>;
                };
            };
        };
        responses: {
            /** @description Optimization job is submitted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /**
                         * @description Mongo ID of the object
                         * @example 60d31793d5f1fb7e6e3c1a4c
                         */
                        job_id?: string;
                    };
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    ArchiveModel: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
                /** @description The ID of the model group of interest. This can be found as `model_groups[].id` in the response body of [model group listing](#Models/GetModelGroups) endpoint. */
                model_group_id: string;
                /** @description The ID of the model of interest. This can be found as `model_groups[].models[].id` from the response of [model group listing](#Models/GetModelGroups)
                 *     endpoint or `models[].id` from [model group detail](#Models/GetModelGroup) endpoint. */
                model_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Model archived successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
            /** @description Model can not be archived. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    GetSinglePrediction: {
        parameters: {
            query?: {
                /** @description The Region of Interest (ROI) of the image or video frame to use for inference.
                 *     The ROI is a rectangle defined by four zero-index pixel coordinates, separated by comma,
                 *     with the format: `left,top,width,height`. */
                roi?: string;
                /** @description Hyper parameters for the inference */
                hyper_parameters?: string;
                /** @description This parameter defines the origin of the predictions.
                 *
                 *     When `use_cache=always`, the predictions are pulled from the database cache. If no prediction with the desired configuration exists in the
                 *     cache, a 'not found' respones will be returned.
                 *
                 *     When `use_cache=never`, the predictions are generated on the fly based on the request. Note that, the predictions are generated using
                 *     the OpenVINO model with FP32 precision with XAI. This model can be found under the [model detail](#Models/GetModelDetail) endpoint.
                 *
                 *     When `use_cache=auto`, the system will first attempt to retrieve an existing prediction for the media item from the
                 *     cache. If no prediction with the desired configuration exists in the cache, a new prediction will be generated on the
                 *     fly. By default, `auto` is used. */
                use_cache?: 'always' | 'never' | 'auto';
            };
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
                /**
                 * @description Set this parameter to `active` request predictions generated using the currently active model(s) in the project.
                 *     For task chain, this parameter could be set to the task ID within the project to request for inference only for that task.
                 *     The task ID can be found in the [project detail](#Projects/GetProjectInfo) endpoint.
                 * @example active
                 */
                pipeline_id: string | 'active';
            };
            cookie?: never;
        };
        /** @description Either an image file, or an identifier for an image or single video frame for which a prediction should be returned. */
        requestBody: {
            content: {
                'multipart/form-data': {
                    /**
                     * Format: binary
                     * @description The image file to be uploaded for inference.
                     */
                    file: string;
                };
                'application/json':
                    | {
                          /**
                           * @description Mongo ID of the object
                           * @example 60d31793d5f1fb7e6e3c1a4c
                           */
                          dataset_id?: string;
                          /**
                           * @description Mongo ID of the object
                           * @example 60d31793d5f1fb7e6e3c1a4c
                           */
                          image_id?: string;
                      }
                    | {
                          /**
                           * @description Mongo ID of the object
                           * @example 60d31793d5f1fb7e6e3c1a4c
                           */
                          dataset_id?: string;
                          /**
                           * @description Mongo ID of the object
                           * @example 60d31793d5f1fb7e6e3c1a4c
                           */
                          video_id?: string;
                          /** @description This is a 0-based index, meaning to retrieve the first frame of the video, this parameter should be set to `0`.
                           *     The possible values for this parameter range from `0` to `frame_count-1`. The `frame_count` is the total number of frames contained in the video
                           *     and it can be retrieved from the response body of [video detail](#Media/GetVideoDetail) endpoint.  */
                          frame_index: number;
                      };
            };
        };
        responses: {
            /** @description Prediction successfully retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description List of predictions */
                        predictions?: {
                            shape?:
                                | {
                                      /**
                                       * @description Type of the shape.
                                       * @enum {string}
                                       */
                                      type: 'RECTANGLE';
                                      /** @description x-coordinate of the left side of the rectangle. Coordinates are pixel values. */
                                      x: number;
                                      /** @description y-coordinate of the top of the rectangle. Coordinates are pixel values. */
                                      y: number;
                                      /** @description Width of the rectangle. Coordinates are pixel values. */
                                      width: number;
                                      /** @description Height of the rectangle. Coordinates are pixel values. */
                                      height: number;
                                  }
                                | {
                                      /**
                                       * @description Type of the shape.
                                       * @enum {string}
                                       */
                                      type: 'POLYGON';
                                      /** @description Array of points that define the polygon. */
                                      points: {
                                          /** @description x-coordinate of the point. Coordinates are pixel values. */
                                          x: number;
                                          /** @description y-coordinate of the point. Coordinates are pixel values. */
                                          y: number;
                                      }[];
                                  }
                                | {
                                      /**
                                       * @description Type of the shape.
                                       * @enum {string}
                                       */
                                      type: 'ELLIPSE';
                                      /** @description Lowest x-coordinate of the ellipse. Coordinates are pixel values. */
                                      x: number;
                                      /** @description Lowest y-coordinate of the ellipse. Coordinates are pixel values. */
                                      y: number;
                                      /** @description Width of the ellipse. Coordinates are pixel values. */
                                      width: number;
                                      /** @description Height of the ellipse. Coordinates are pixel values. */
                                      height: number;
                                  }
                                | {
                                      /**
                                       * @description Type of the shape.
                                       * @enum {string}
                                       */
                                      type: 'ROTATED_RECTANGLE';
                                      /** @description Center x-coordinate of the rotated rectangle. Coordinates are pixel values. */
                                      x: number;
                                      /** @description Center y-coordinate of the rotated rectangle. Coordinates are pixel values. */
                                      y: number;
                                      /** @description Width of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values. */
                                      width: number;
                                      /** @description Height of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values. */
                                      height: number;
                                      /** @description Clockwise angle in degrees for the rectangle. */
                                      angle: number;
                                  }
                                | {
                                      /**
                                       * @description Type of the shape.
                                       * @enum {string}
                                       */
                                      type: 'KEYPOINT';
                                      /** @description X-coordinate of the keypoint. Coordinates are pixel values. */
                                      x: number;
                                      /** @description Y-coordinate of the keypoint. Coordinates are pixel values. */
                                      y: number;
                                      /** @description Indicates whether the feature the keypoint is describing is visible in the image. */
                                      is_visible: boolean;
                                  };
                            /** @description List of labels */
                            labels?: {
                                /**
                                 * @description Mongo ID of the object
                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                 */
                                id?: string;
                                /**
                                 * Probability
                                 * Format: float
                                 * @description Estimated probability of a prediction. For annotations, this is set to 1.
                                 */
                                probability?: number;
                            }[];
                        }[];
                        /** @description Creation date */
                        created?: string;
                        /** @description Optional identifier for the media item on which the prediction was made. Only included for persistent media. */
                        media_identifier?:
                            | {
                                  /** @enum {string} */
                                  type?: 'image';
                                  /**
                                   * @description Mongo ID of the object
                                   * @example 60d31793d5f1fb7e6e3c1a4c
                                   */
                                  image_id?: string;
                              }
                            | {
                                  /** @enum {string} */
                                  type?: 'video_frame';
                                  /**
                                   * @description Mongo ID of the object
                                   * @example 60d31793d5f1fb7e6e3c1a4c
                                   */
                                  video_id?: string;
                                  frame_index?: number;
                              };
                    };
                };
            };
            /** @description No prediction available for the requested media. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    GetSingleExplanation: {
        parameters: {
            query?: {
                /** @description The Region of Interest (ROI) of the image or video frame to use for inference.
                 *     The ROI is a rectangle defined by four zero-index pixel coordinates, separated by comma,
                 *     with the format: `left,top,width,height`. */
                roi?: string;
                /** @description Hyper parameters for the inference */
                hyper_parameters?: string;
            };
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
                /**
                 * @description Set this parameter to `active` request predictions generated using the currently active model(s) in the project.
                 *     For task chain, this parameter could be set to the task ID within the project to request for inference only for that task.
                 *     The task ID can be found in the [project detail](#Projects/GetProjectInfo) endpoint.
                 * @example active
                 */
                pipeline_id: string | 'active';
            };
            cookie?: never;
        };
        /** @description Either an image file, or an identifier for an image or single video frame for which explanations should be returned. */
        requestBody: {
            content: {
                'multipart/form-data': {
                    /**
                     * Format: binary
                     * @description The image file to be uploaded for inference.
                     */
                    file: string;
                };
                'application/json':
                    | {
                          /**
                           * @description Mongo ID of the object
                           * @example 60d31793d5f1fb7e6e3c1a4c
                           */
                          dataset_id?: string;
                          /**
                           * @description Mongo ID of the object
                           * @example 60d31793d5f1fb7e6e3c1a4c
                           */
                          image_id?: string;
                      }
                    | {
                          /**
                           * @description Mongo ID of the object
                           * @example 60d31793d5f1fb7e6e3c1a4c
                           */
                          dataset_id?: string;
                          /**
                           * @description Mongo ID of the object
                           * @example 60d31793d5f1fb7e6e3c1a4c
                           */
                          video_id?: string;
                          /** @description This is a 0-based index, meaning to retrieve the first frame of the video, this parameter should be set to `0`.
                           *     The possible values for this parameter range from `0` to `frame_count-1`. The `frame_count` is the total number of frames contained in the video
                           *     and it can be retrieved from the response body of [video detail](#Media/GetVideoDetail) endpoint.  */
                          frame_index: number;
                      };
            };
        };
        responses: {
            /** @description Explanations successfully retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description List of explanations (saliency maps) */
                        maps?: {
                            /** @description Binary representation of the saliency map */
                            data?: string;
                            /**
                             * @description Mongo ID of the object
                             * @example 60d31793d5f1fb7e6e3c1a4c
                             */
                            label_id?: string;
                        }[];
                        /** @description Creation date */
                        created?: string;
                        /** @description Optional identifier for the media item on which the prediction was made. Only included for persistent media. */
                        media_identifier?:
                            | {
                                  /** @enum {string} */
                                  type?: 'image';
                                  /**
                                   * @description Mongo ID of the object
                                   * @example 60d31793d5f1fb7e6e3c1a4c
                                   */
                                  image_id?: string;
                              }
                            | {
                                  /** @enum {string} */
                                  type?: 'video_frame';
                                  /**
                                   * @description Mongo ID of the object
                                   * @example 60d31793d5f1fb7e6e3c1a4c
                                   */
                                  video_id?: string;
                                  frame_index?: number;
                              };
                    };
                };
            };
            /** @description No explanation available for the requested media. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    GetBatchPrediction: {
        parameters: {
            query?: {
                /** @description The Region of Interest (ROI) of the image or video frame to use for inference.
                 *     The ROI is a rectangle defined by four zero-index pixel coordinates, separated by comma,
                 *     with the format: `left,top,width,height`. */
                roi?: string;
                /** @description Hyper parameters for the inference */
                hyper_parameters?: string;
            };
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
                /**
                 * @description Set this parameter to `active` request predictions generated using the currently active model(s) in the project.
                 *     For task chain, this parameter could be set to the task ID within the project to request for inference only for that task.
                 *     The task ID can be found in the [project detail](#Projects/GetProjectInfo) endpoint.
                 * @example active
                 */
                pipeline_id: string | 'active';
            };
            cookie?: never;
        };
        /** @description An identifier for a range of video frames on which to perform inference.
         *     The predictions are strating from the `start_frame` of the range, for every frame at `frame_skip` intervals, and all
         *     the way up to the `end_frame`.
         *
         *     The maximum number of frames to generate predictions for is 20. */
        requestBody: {
            content: {
                'application/json': {
                    /**
                     * @description Mongo ID of the object
                     * @example 60d31793d5f1fb7e6e3c1a4c
                     */
                    dataset_id?: string;
                    /**
                     * @description Mongo ID of the object
                     * @example 60d31793d5f1fb7e6e3c1a4c
                     */
                    video_id?: string;
                    /**
                     * @description Index of the first frame in the range.
                     * @default 0
                     */
                    start_frame?: number;
                    /** @description Index of the last frame in the range. */
                    end_frame: number;
                    /** @description Stride (step size), that is the interval between two consecutive frames in the range.
                     *     If `frame_skip` is 1, all frames are considered to be part of the range. */
                    frame_skip: number;
                };
            };
        };
        responses: {
            /** @description Predictions successfully retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description List of predictions. Each entry corresponds to the prediction for a single media item in the batch. */
                        batch_predictions?: {
                            /** @description List of predictions */
                            predictions?: {
                                shape?:
                                    | {
                                          /**
                                           * @description Type of the shape.
                                           * @enum {string}
                                           */
                                          type: 'RECTANGLE';
                                          /** @description x-coordinate of the left side of the rectangle. Coordinates are pixel values. */
                                          x: number;
                                          /** @description y-coordinate of the top of the rectangle. Coordinates are pixel values. */
                                          y: number;
                                          /** @description Width of the rectangle. Coordinates are pixel values. */
                                          width: number;
                                          /** @description Height of the rectangle. Coordinates are pixel values. */
                                          height: number;
                                      }
                                    | {
                                          /**
                                           * @description Type of the shape.
                                           * @enum {string}
                                           */
                                          type: 'POLYGON';
                                          /** @description Array of points that define the polygon. */
                                          points: {
                                              /** @description x-coordinate of the point. Coordinates are pixel values. */
                                              x: number;
                                              /** @description y-coordinate of the point. Coordinates are pixel values. */
                                              y: number;
                                          }[];
                                      }
                                    | {
                                          /**
                                           * @description Type of the shape.
                                           * @enum {string}
                                           */
                                          type: 'ELLIPSE';
                                          /** @description Lowest x-coordinate of the ellipse. Coordinates are pixel values. */
                                          x: number;
                                          /** @description Lowest y-coordinate of the ellipse. Coordinates are pixel values. */
                                          y: number;
                                          /** @description Width of the ellipse. Coordinates are pixel values. */
                                          width: number;
                                          /** @description Height of the ellipse. Coordinates are pixel values. */
                                          height: number;
                                      }
                                    | {
                                          /**
                                           * @description Type of the shape.
                                           * @enum {string}
                                           */
                                          type: 'ROTATED_RECTANGLE';
                                          /** @description Center x-coordinate of the rotated rectangle. Coordinates are pixel values. */
                                          x: number;
                                          /** @description Center y-coordinate of the rotated rectangle. Coordinates are pixel values. */
                                          y: number;
                                          /** @description Width of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values. */
                                          width: number;
                                          /** @description Height of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values. */
                                          height: number;
                                          /** @description Clockwise angle in degrees for the rectangle. */
                                          angle: number;
                                      }
                                    | {
                                          /**
                                           * @description Type of the shape.
                                           * @enum {string}
                                           */
                                          type: 'KEYPOINT';
                                          /** @description X-coordinate of the keypoint. Coordinates are pixel values. */
                                          x: number;
                                          /** @description Y-coordinate of the keypoint. Coordinates are pixel values. */
                                          y: number;
                                          /** @description Indicates whether the feature the keypoint is describing is visible in the image. */
                                          is_visible: boolean;
                                      };
                                /** @description List of labels */
                                labels?: {
                                    /**
                                     * @description Mongo ID of the object
                                     * @example 60d31793d5f1fb7e6e3c1a4c
                                     */
                                    id?: string;
                                    /**
                                     * Probability
                                     * Format: float
                                     * @description Estimated probability of a prediction. For annotations, this is set to 1.
                                     */
                                    probability?: number;
                                }[];
                            }[];
                            /** @description Creation date */
                            created?: string;
                            /** @description Optional identifier for the media item on which the prediction was made. Only included for persistent media. */
                            media_identifier?:
                                | {
                                      /** @enum {string} */
                                      type?: 'image';
                                      /**
                                       * @description Mongo ID of the object
                                       * @example 60d31793d5f1fb7e6e3c1a4c
                                       */
                                      image_id?: string;
                                  }
                                | {
                                      /** @enum {string} */
                                      type?: 'video_frame';
                                      /**
                                       * @description Mongo ID of the object
                                       * @example 60d31793d5f1fb7e6e3c1a4c
                                       */
                                      video_id?: string;
                                      frame_index?: number;
                                  };
                        }[];
                    };
                };
            };
            /** @description No prediction available for the requested media. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Too many predictions requested. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    GetBatchExplanation: {
        parameters: {
            query?: {
                /** @description The Region of Interest (ROI) of the image or video frame to use for inference.
                 *     The ROI is a rectangle defined by four zero-index pixel coordinates, separated by comma,
                 *     with the format: `left,top,width,height`. */
                roi?: string;
                /** @description Hyper parameters for the inference */
                hyper_parameters?: string;
            };
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
                /**
                 * @description Set this parameter to `active` request predictions generated using the currently active model(s) in the project.
                 *     For task chain, this parameter could be set to the task ID within the project to request for inference only for that task.
                 *     The task ID can be found in the [project detail](#Projects/GetProjectInfo) endpoint.
                 * @example active
                 */
                pipeline_id: string | 'active';
            };
            cookie?: never;
        };
        /** @description An identifier for a range of video frames from which the explanations are generated.
         *     The explanations are strating from the `start_frame` of the range, for every frame at `frame_skip` intervals, and all
         *     the way up to the `end_frame`.
         *
         *     The maximum number of frames to generate explanations for is 20. If the request exceeds this value, the response will contain error code
         *     `400`.  */
        requestBody: {
            content: {
                'application/json': {
                    /**
                     * @description Mongo ID of the object
                     * @example 60d31793d5f1fb7e6e3c1a4c
                     */
                    dataset_id?: string;
                    /**
                     * @description Mongo ID of the object
                     * @example 60d31793d5f1fb7e6e3c1a4c
                     */
                    video_id?: string;
                    /**
                     * @description Index of the first frame in the range.
                     * @default 0
                     */
                    start_frame?: number;
                    /** @description Index of the last frame in the range. */
                    end_frame: number;
                    /** @description Stride (step size), that is the interval between two consecutive frames in the range.
                     *     If `frame_skip` is 1, all frames are considered to be part of the range. */
                    frame_skip: number;
                };
            };
        };
        responses: {
            /** @description Explanations successfully retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description List of explanations. Each entry corresponds to the explanations for a single media item in the batch. */
                        explanations?: {
                            /** @description List of explanations (saliency maps) */
                            maps?: {
                                /** @description Binary representation of the saliency map */
                                data?: string;
                                /**
                                 * @description Mongo ID of the object
                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                 */
                                label_id?: string;
                            }[];
                            /** @description Creation date */
                            created?: string;
                            /** @description Optional identifier for the media item on which the prediction was made. Only included for persistent media. */
                            media_identifier?:
                                | {
                                      /** @enum {string} */
                                      type?: 'image';
                                      /**
                                       * @description Mongo ID of the object
                                       * @example 60d31793d5f1fb7e6e3c1a4c
                                       */
                                      image_id?: string;
                                  }
                                | {
                                      /** @enum {string} */
                                      type?: 'video_frame';
                                      /**
                                       * @description Mongo ID of the object
                                       * @example 60d31793d5f1fb7e6e3c1a4c
                                       */
                                      video_id?: string;
                                      frame_index?: number;
                                  };
                        }[];
                    };
                };
            };
            /** @description No explanations available for the requested media. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Too many predictions requested. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    GetPromptPrediction: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
                /** @description The ID of the task of interest. */
                task_id: string;
            };
            cookie?: never;
        };
        /** @description Either an image file, or an identifier for an image or single video frame for which a prediction should be returned. */
        requestBody: {
            content: {
                'multipart/form-data': {
                    /**
                     * Format: binary
                     * @description The image file to be uploaded for inference.
                     */
                    file: string;
                };
                'application/json':
                    | {
                          /**
                           * @description Mongo ID of the object
                           * @example 60d31793d5f1fb7e6e3c1a4c
                           */
                          dataset_id?: string;
                          /**
                           * @description Mongo ID of the object
                           * @example 60d31793d5f1fb7e6e3c1a4c
                           */
                          image_id?: string;
                      }
                    | {
                          /**
                           * @description Mongo ID of the object
                           * @example 60d31793d5f1fb7e6e3c1a4c
                           */
                          dataset_id?: string;
                          /**
                           * @description Mongo ID of the object
                           * @example 60d31793d5f1fb7e6e3c1a4c
                           */
                          video_id?: string;
                          /** @description This is a 0-based index, meaning to retrieve the first frame of the video, this parameter should be set to `0`.
                           *     The possible values for this parameter range from `0` to `frame_count-1`. The `frame_count` is the total number of frames contained in the video
                           *     and it can be retrieved from the response body of [video detail](#Media/GetVideoDetail) endpoint.  */
                          frame_index: number;
                      };
            };
        };
        responses: {
            /** @description Prediction successfully generated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description List of predictions */
                        predictions?: {
                            shape?:
                                | {
                                      /**
                                       * @description Type of the shape.
                                       * @enum {string}
                                       */
                                      type: 'RECTANGLE';
                                      /** @description x-coordinate of the left side of the rectangle. Coordinates are pixel values. */
                                      x: number;
                                      /** @description y-coordinate of the top of the rectangle. Coordinates are pixel values. */
                                      y: number;
                                      /** @description Width of the rectangle. Coordinates are pixel values. */
                                      width: number;
                                      /** @description Height of the rectangle. Coordinates are pixel values. */
                                      height: number;
                                  }
                                | {
                                      /**
                                       * @description Type of the shape.
                                       * @enum {string}
                                       */
                                      type: 'POLYGON';
                                      /** @description Array of points that define the polygon. */
                                      points: {
                                          /** @description x-coordinate of the point. Coordinates are pixel values. */
                                          x: number;
                                          /** @description y-coordinate of the point. Coordinates are pixel values. */
                                          y: number;
                                      }[];
                                  }
                                | {
                                      /**
                                       * @description Type of the shape.
                                       * @enum {string}
                                       */
                                      type: 'ELLIPSE';
                                      /** @description Lowest x-coordinate of the ellipse. Coordinates are pixel values. */
                                      x: number;
                                      /** @description Lowest y-coordinate of the ellipse. Coordinates are pixel values. */
                                      y: number;
                                      /** @description Width of the ellipse. Coordinates are pixel values. */
                                      width: number;
                                      /** @description Height of the ellipse. Coordinates are pixel values. */
                                      height: number;
                                  }
                                | {
                                      /**
                                       * @description Type of the shape.
                                       * @enum {string}
                                       */
                                      type: 'ROTATED_RECTANGLE';
                                      /** @description Center x-coordinate of the rotated rectangle. Coordinates are pixel values. */
                                      x: number;
                                      /** @description Center y-coordinate of the rotated rectangle. Coordinates are pixel values. */
                                      y: number;
                                      /** @description Width of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values. */
                                      width: number;
                                      /** @description Height of the rotated rectangle (not the encapsulating box of the rectangle). Coordinates are pixel values. */
                                      height: number;
                                      /** @description Clockwise angle in degrees for the rectangle. */
                                      angle: number;
                                  }
                                | {
                                      /**
                                       * @description Type of the shape.
                                       * @enum {string}
                                       */
                                      type: 'KEYPOINT';
                                      /** @description X-coordinate of the keypoint. Coordinates are pixel values. */
                                      x: number;
                                      /** @description Y-coordinate of the keypoint. Coordinates are pixel values. */
                                      y: number;
                                      /** @description Indicates whether the feature the keypoint is describing is visible in the image. */
                                      is_visible: boolean;
                                  };
                            /** @description List of labels */
                            labels?: {
                                /**
                                 * @description Mongo ID of the object
                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                 */
                                id?: string;
                                /**
                                 * Probability
                                 * Format: float
                                 * @description Estimated probability of a prediction. For annotations, this is set to 1.
                                 */
                                probability?: number;
                            }[];
                        }[];
                        /** @description Creation date */
                        created?: string;
                        /** @description Optional identifier for the media item on which the prediction was made. Only included for persistent media. */
                        media_identifier?:
                            | {
                                  /** @enum {string} */
                                  type?: 'image';
                                  /**
                                   * @description Mongo ID of the object
                                   * @example 60d31793d5f1fb7e6e3c1a4c
                                   */
                                  image_id?: string;
                              }
                            | {
                                  /** @enum {string} */
                                  type?: 'video_frame';
                                  /**
                                   * @description Mongo ID of the object
                                   * @example 60d31793d5f1fb7e6e3c1a4c
                                   */
                                  video_id?: string;
                                  frame_index?: number;
                              };
                    };
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
            /** @description Project does not support prompt-based models. */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
            /** @description One-shot learning is not possible due to missing annotations. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    GetTrainingRevisionStatistics: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
                /** @description The ID of the dataset in the project. */
                dataset_id: string;
                /** @description The ID of the dataset of interest */
                dataset_revision_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Statistics for the requested training revision */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /**
                         * Format: int32
                         * @description Number of images in the dataset
                         */
                        id?: number;
                        /** @description Creation time of the project */
                        creation_time?: string;
                        /** @description Number of items in each subset */
                        subset_info?: {
                            /**
                             * Format: int32
                             * @description Number of media in the training set
                             */
                            training?: number;
                            /**
                             * Format: int32
                             * @description Number of media in the testing set
                             */
                            testing?: number;
                            /**
                             * Format: int32
                             * @description Number of media in the validation set
                             */
                            validation?: number;
                        }[];
                        /** @description Amount per media type in the dataset */
                        dataset_info?: {
                            /**
                             * Format: int32
                             * @description Number of videos in the dataset
                             */
                            videos?: number;
                            /**
                             * Format: int32
                             * @description Number of frames in the dataset
                             */
                            frames?: number;
                            /**
                             * Format: int32
                             * @description Number of images in the dataset
                             */
                            images?: number;
                        }[];
                    };
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    GetMediaForDataset: {
        parameters: {
            query?: {
                /** @description Number of items returned in the response. Default is 10 and maximum is 100. */
                limit?: number;
                /** @description Number indicating how many items to skip from the first item that matches the query.
                 *     This field is used in combination with the limit field for the pagination feature. */
                skip?: string;
                /** @description Sorting order, could be `asc` (ascending) or `dsc` (descending).  */
                sort_direction?: 'asc' | 'dsc';
                /** @description Field to sort by.  */
                sort_by?:
                    | 'media_name'
                    | 'media_upload_date'
                    | 'media_width'
                    | 'media_height'
                    | 'media_size'
                    | 'annotation_creation_date';
            };
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
                /** @description The ID of the dataset in the project. */
                dataset_id: string;
                /** @description The ID of the dataset of interest */
                dataset_revision_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Media items in the training revision */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description List of media items */
                        media?: (
                            | {
                                  /**
                                   * @description Mongo ID of the object
                                   * @example 60d31793d5f1fb7e6e3c1a4c
                                   */
                                  id?: string;
                                  media_information?: {
                                      /** @description Display URL of the image or video frame */
                                      display_url?: string;
                                      /** @description Height of the image or video frame */
                                      height?: number;
                                      /** @description Width of the image or video frame */
                                      width?: number;
                                      /** @description Size of the image or video in bytes */
                                      size?: number;
                                      /** @description Extension of the image or video in lowercase with a dot (e.g. '.jpg') */
                                      extension?: string;
                                  };
                                  /** @description Name of the image */
                                  name?: string;
                                  /** @description List of per-task states obtained aggregating the annotation state with the revisit information */
                                  annotation_state_per_task?: {
                                      /**
                                       * @description Mongo ID of the object
                                       * @example 60d31793d5f1fb7e6e3c1a4c
                                       */
                                      task_id?: string;
                                      /**
                                       * @description Annotation state of the media for this task
                                       * @enum {string|null}
                                       */
                                      state?:
                                          | 'annotated'
                                          | 'partially_annotated'
                                          | 'none'
                                          | 'to_revisit'
                                          | null;
                                  }[];
                                  /** @description Relative URL to the image thumbnail */
                                  thumbnail?: string;
                                  /**
                                   * @description Type of media. 'image' for images, 'video' for video and 'video_frame' for video frames.
                                   * @enum {string}
                                   */
                                  type?: 'image';
                                  /** @description Upload time of the media file */
                                  upload_time?: string;
                                  /** @description Optional ID of the annotation scene  if filtering in a specific training revision */
                                  annotation_scene_id?: string;
                                  /** @description Optional ID of the roi id if filtering in a specific training revision */
                                  roi_id?: string;
                                  /** @description Optional ID of the user that last edited the annotation. */
                                  last_annotator_id?: string;
                              }
                            | {
                                  /**
                                   * @description Mongo ID of the object
                                   * @example 60d31793d5f1fb7e6e3c1a4c
                                   */
                                  id?: string;
                                  media_information?: {
                                      /** @description Display URL of the image or video */
                                      display_url?: string;
                                      /** @description Duration of the video */
                                      duration?: number;
                                      /** @description Number of frames in the video */
                                      frame_count?: number;
                                      /** @description Frame stride of the video */
                                      frame_stride?: number;
                                      /** @description Frame rate of the video */
                                      frame_rate?: number;
                                      /** @description Height of the video */
                                      height?: number;
                                      /** @description Width of the video */
                                      width?: number;
                                      /** @description Size of the video in bytes */
                                      size?: number;
                                  };
                                  /** @description Name of the image */
                                  name?: string;
                                  /** @description List of per-task states obtained aggregating the annotation state with the revisit information */
                                  annotation_state_per_task?: {
                                      /**
                                       * @description Mongo ID of the object
                                       * @example 60d31793d5f1fb7e6e3c1a4c
                                       */
                                      task_id?: string;
                                      /**
                                       * @description Annotation state of the media for this task
                                       * @enum {string|null}
                                       */
                                      state?:
                                          | 'annotated'
                                          | 'partially_annotated'
                                          | 'none'
                                          | 'to_revisit'
                                          | null;
                                  }[];
                                  /** @description Relative URL to the video thumbnail */
                                  thumbnail?: string;
                                  /**
                                   * @description Type of media. 'image' for images, 'video' for video and 'video_frame' for video frames.
                                   * @enum {string}
                                   */
                                  type?: 'video';
                                  /** @description Upload time of the media file */
                                  upload_time?: string;
                                  /** @description Number of frames in the video that match the filter. Only returned when filtering by annotation properties. */
                                  matched_frames?: number | null;
                              }
                            | {
                                  /**
                                   * Format: int32
                                   * @description The video frame index
                                   */
                                  id?: number;
                                  media_information?: {
                                      /** @description Display URL of the image or video */
                                      display_url?: string;
                                      /** @description Duration of the video */
                                      duration?: number;
                                      /** @description Number of frames in the video */
                                      frame_count?: number;
                                      /** @description Frame stride of the video */
                                      frame_stride?: number;
                                      /** @description Frame rate of the video */
                                      frame_rate?: number;
                                      /** @description Height of the video */
                                      height?: number;
                                      /** @description Width of the video */
                                      width?: number;
                                      /** @description Size of the video in bytes */
                                      size?: number;
                                  };
                                  /** @description Name of the image */
                                  name?: string;
                                  /** @description List of per-task states obtained aggregating the annotation state with the revisit information */
                                  annotation_state_per_task?: {
                                      /**
                                       * @description Mongo ID of the object
                                       * @example 60d31793d5f1fb7e6e3c1a4c
                                       */
                                      task_id?: string;
                                      /**
                                       * @description Annotation state of the media for this task
                                       * @enum {string|null}
                                       */
                                      state?:
                                          | 'annotated'
                                          | 'partially_annotated'
                                          | 'none'
                                          | 'to_revisit'
                                          | null;
                                  }[];
                                  /** @description Relative URL to the video frame thumbnail */
                                  thumbnail?: string;
                                  /**
                                   * @description Type of media. 'image' for images, 'video' for video and 'video_frame' for video frames.
                                   * @enum {string}
                                   */
                                  type?: 'video_frame';
                                  /** @description Upload time of the media file */
                                  upload_time?: string;
                                  /** @description Optional ID of the annotation scene if filtering in a specific training revision */
                                  annotation_scene_id?: string;
                                  /** @description Optional ID of the roi id if filtering in a specific training revision */
                                  roi_id?: string;
                                  /** @description Optional ID of the user that last edited the annotation. */
                                  last_annotator_id?: string;
                              }
                        )[];
                        /** @description URL to the next page of results, if the same parameters are used. */
                        next_page?: string;
                        /** @description Total images that match the query. */
                        total_matched_images?: number;
                        /** @description Total videos that match the query. */
                        total_matched_videos?: number;
                        /** @description Total video frames that match the query. */
                        total_matched_video_frames?: number;
                        /** @description Total images in the dataset. */
                        total_images?: number;
                        /** @description Total videos in the dataset. */
                        total_videos?: number;
                    };
                };
            };
            /** @description Bad request. See the examples for details. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    FilterMediaInTrainingRevision: {
        parameters: {
            query?: {
                /** @description Number of items returned in the response. Default is 10 and maximum is 100. */
                limit?: number;
                /** @description Number indicating how many items to skip from the first item that matches the query.
                 *     This field is used in combination with the limit field for the pagination feature. */
                skip?: string;
                /** @description Sorting order, could be `asc` (ascending) or `dsc` (descending).  */
                sort_direction?: 'asc' | 'dsc';
                /** @description Field to sort by.  */
                sort_by?:
                    | 'media_name'
                    | 'media_upload_date'
                    | 'media_width'
                    | 'media_height'
                    | 'media_size'
                    | 'annotation_creation_date';
            };
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
                /** @description The ID of the dataset in the project. */
                dataset_id: string;
                /** @description The ID of the dataset of interest */
                dataset_revision_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /**
                     * @description Condition to apply to group of rules.
                     * @enum {string}
                     */
                    condition?: 'and';
                    /** @description All the rules to filter a dataset with. */
                    rules: {
                        /**
                         * @description Field to filter on in the database. Can be one of 'media_upload_date', 'media_height', 'media_width' , 'media_name', 'label_id', 'annotation_creation_date', 'annotation_scene_state', 'shape_type', 'shape_size' or 'user_name'. Note that media related filters do not affect the outcome when using the filter video endpoint as each frame will have the same values.
                         * @enum {string}
                         */
                        field:
                            | 'media_upload_date'
                            | 'media_height'
                            | 'media_width'
                            | 'media_name'
                            | 'label_id'
                            | 'annotation_creation_date'
                            | 'annotation_scene_state'
                            | 'shape_type'
                            | 'shape_area_percentage'
                            | 'shape_area_pixel'
                            | 'user_name';
                        /**
                         * @description Operator to filter with. Can be one of 'greater', 'less', 'greater_or_equal' , 'less_or_equal', 'equal', 'not_equal', 'in', 'not_in', 'regex'
                         * @enum {string}
                         */
                        operator:
                            | 'greater'
                            | 'less'
                            | 'greater_or_equal'
                            | 'less_or_equal'
                            | 'equal'
                            | 'not_equal'
                            | 'in'
                            | 'not_in'
                            | 'regex';
                        /** @description Value that the field should match to in combination with the operator */
                        value: unknown[] | string | number;
                    }[];
                };
            };
        };
        responses: {
            /** @description Media items matching in the training revision that match the filter. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description List of media items */
                        media?: (
                            | {
                                  /**
                                   * @description Mongo ID of the object
                                   * @example 60d31793d5f1fb7e6e3c1a4c
                                   */
                                  id?: string;
                                  media_information?: {
                                      /** @description Display URL of the image or video frame */
                                      display_url?: string;
                                      /** @description Height of the image or video frame */
                                      height?: number;
                                      /** @description Width of the image or video frame */
                                      width?: number;
                                      /** @description Size of the image or video in bytes */
                                      size?: number;
                                      /** @description Extension of the image or video in lowercase with a dot (e.g. '.jpg') */
                                      extension?: string;
                                  };
                                  /** @description Name of the image */
                                  name?: string;
                                  /** @description List of per-task states obtained aggregating the annotation state with the revisit information */
                                  annotation_state_per_task?: {
                                      /**
                                       * @description Mongo ID of the object
                                       * @example 60d31793d5f1fb7e6e3c1a4c
                                       */
                                      task_id?: string;
                                      /**
                                       * @description Annotation state of the media for this task
                                       * @enum {string|null}
                                       */
                                      state?:
                                          | 'annotated'
                                          | 'partially_annotated'
                                          | 'none'
                                          | 'to_revisit'
                                          | null;
                                  }[];
                                  /** @description Relative URL to the image thumbnail */
                                  thumbnail?: string;
                                  /**
                                   * @description Type of media. 'image' for images, 'video' for video and 'video_frame' for video frames.
                                   * @enum {string}
                                   */
                                  type?: 'image';
                                  /** @description Upload time of the media file */
                                  upload_time?: string;
                                  /** @description Optional ID of the annotation scene  if filtering in a specific training revision */
                                  annotation_scene_id?: string;
                                  /** @description Optional ID of the roi id if filtering in a specific training revision */
                                  roi_id?: string;
                                  /** @description Optional ID of the user that last edited the annotation. */
                                  last_annotator_id?: string;
                              }
                            | {
                                  /**
                                   * @description Mongo ID of the object
                                   * @example 60d31793d5f1fb7e6e3c1a4c
                                   */
                                  id?: string;
                                  media_information?: {
                                      /** @description Display URL of the image or video */
                                      display_url?: string;
                                      /** @description Duration of the video */
                                      duration?: number;
                                      /** @description Number of frames in the video */
                                      frame_count?: number;
                                      /** @description Frame stride of the video */
                                      frame_stride?: number;
                                      /** @description Frame rate of the video */
                                      frame_rate?: number;
                                      /** @description Height of the video */
                                      height?: number;
                                      /** @description Width of the video */
                                      width?: number;
                                      /** @description Size of the video in bytes */
                                      size?: number;
                                  };
                                  /** @description Name of the image */
                                  name?: string;
                                  /** @description List of per-task states obtained aggregating the annotation state with the revisit information */
                                  annotation_state_per_task?: {
                                      /**
                                       * @description Mongo ID of the object
                                       * @example 60d31793d5f1fb7e6e3c1a4c
                                       */
                                      task_id?: string;
                                      /**
                                       * @description Annotation state of the media for this task
                                       * @enum {string|null}
                                       */
                                      state?:
                                          | 'annotated'
                                          | 'partially_annotated'
                                          | 'none'
                                          | 'to_revisit'
                                          | null;
                                  }[];
                                  /** @description Relative URL to the video thumbnail */
                                  thumbnail?: string;
                                  /**
                                   * @description Type of media. 'image' for images, 'video' for video and 'video_frame' for video frames.
                                   * @enum {string}
                                   */
                                  type?: 'video';
                                  /** @description Upload time of the media file */
                                  upload_time?: string;
                                  /** @description Number of frames in the video that match the filter. Only returned when filtering by annotation properties. */
                                  matched_frames?: number | null;
                              }
                            | {
                                  /**
                                   * Format: int32
                                   * @description The video frame index
                                   */
                                  id?: number;
                                  media_information?: {
                                      /** @description Display URL of the image or video */
                                      display_url?: string;
                                      /** @description Duration of the video */
                                      duration?: number;
                                      /** @description Number of frames in the video */
                                      frame_count?: number;
                                      /** @description Frame stride of the video */
                                      frame_stride?: number;
                                      /** @description Frame rate of the video */
                                      frame_rate?: number;
                                      /** @description Height of the video */
                                      height?: number;
                                      /** @description Width of the video */
                                      width?: number;
                                      /** @description Size of the video in bytes */
                                      size?: number;
                                  };
                                  /** @description Name of the image */
                                  name?: string;
                                  /** @description List of per-task states obtained aggregating the annotation state with the revisit information */
                                  annotation_state_per_task?: {
                                      /**
                                       * @description Mongo ID of the object
                                       * @example 60d31793d5f1fb7e6e3c1a4c
                                       */
                                      task_id?: string;
                                      /**
                                       * @description Annotation state of the media for this task
                                       * @enum {string|null}
                                       */
                                      state?:
                                          | 'annotated'
                                          | 'partially_annotated'
                                          | 'none'
                                          | 'to_revisit'
                                          | null;
                                  }[];
                                  /** @description Relative URL to the video frame thumbnail */
                                  thumbnail?: string;
                                  /**
                                   * @description Type of media. 'image' for images, 'video' for video and 'video_frame' for video frames.
                                   * @enum {string}
                                   */
                                  type?: 'video_frame';
                                  /** @description Upload time of the media file */
                                  upload_time?: string;
                                  /** @description Optional ID of the annotation scene if filtering in a specific training revision */
                                  annotation_scene_id?: string;
                                  /** @description Optional ID of the roi id if filtering in a specific training revision */
                                  roi_id?: string;
                                  /** @description Optional ID of the user that last edited the annotation. */
                                  last_annotator_id?: string;
                              }
                        )[];
                        /** @description URL to the next page of results, if the same parameters are used. */
                        next_page?: string;
                        /** @description Total images that match the query. */
                        total_matched_images?: number;
                        /** @description Total videos that match the query. */
                        total_matched_videos?: number;
                        /** @description Total video frames that match the query. */
                        total_matched_video_frames?: number;
                        /** @description Total images in the dataset. */
                        total_images?: number;
                        /** @description Total videos in the dataset. */
                        total_videos?: number;
                    };
                };
            };
            /** @description Bad request. See the examples for details. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    FilterVideoFramesInTrainingRevision: {
        parameters: {
            query?: {
                /** @description Number of items returned in the response. Default is 10 and maximum is 100. */
                limit?: number;
                /** @description Number indicating how many items to skip from the first item that matches the query.
                 *     This field is used in combination with the limit field for the pagination feature. */
                skip?: string;
                /** @description Sorting order, could be `asc` (ascending) or `dsc` (descending).  */
                sort_direction?: 'asc' | 'dsc';
                /** @description Field to sort by.  */
                sort_by?:
                    | 'media_name'
                    | 'media_upload_date'
                    | 'media_width'
                    | 'media_height'
                    | 'media_size'
                    | 'annotation_creation_date';
            };
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
                /** @description The ID of the dataset in the project. */
                dataset_id: string;
                /** @description The ID of the dataset of interest */
                dataset_revision_id: string;
                /** @description The ID of the video. */
                video_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /**
                     * @description Condition to apply to group of rules.
                     * @enum {string}
                     */
                    condition?: 'and';
                    /** @description All the rules to filter a dataset with. */
                    rules: {
                        /**
                         * @description Field to filter on in the database. Can be one of 'media_upload_date', 'media_height', 'media_width' , 'media_name', 'label_id', 'annotation_creation_date', 'annotation_scene_state', 'shape_type', 'shape_size' or 'user_name'. Note that media related filters do not affect the outcome when using the filter video endpoint as each frame will have the same values.
                         * @enum {string}
                         */
                        field:
                            | 'media_upload_date'
                            | 'media_height'
                            | 'media_width'
                            | 'media_name'
                            | 'label_id'
                            | 'annotation_creation_date'
                            | 'annotation_scene_state'
                            | 'shape_type'
                            | 'shape_area_percentage'
                            | 'shape_area_pixel'
                            | 'user_name';
                        /**
                         * @description Operator to filter with. Can be one of 'greater', 'less', 'greater_or_equal' , 'less_or_equal', 'equal', 'not_equal', 'in', 'not_in', 'regex'
                         * @enum {string}
                         */
                        operator:
                            | 'greater'
                            | 'less'
                            | 'greater_or_equal'
                            | 'less_or_equal'
                            | 'equal'
                            | 'not_equal'
                            | 'in'
                            | 'not_in'
                            | 'regex';
                        /** @description Value that the field should match to in combination with the operator */
                        value: unknown[] | string | number;
                    }[];
                };
            };
        };
        responses: {
            /** @description Frames matching the filter */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description List of media items */
                        media?: (
                            | {
                                  /**
                                   * @description Mongo ID of the object
                                   * @example 60d31793d5f1fb7e6e3c1a4c
                                   */
                                  id?: string;
                                  media_information?: {
                                      /** @description Display URL of the image or video frame */
                                      display_url?: string;
                                      /** @description Height of the image or video frame */
                                      height?: number;
                                      /** @description Width of the image or video frame */
                                      width?: number;
                                      /** @description Size of the image or video in bytes */
                                      size?: number;
                                      /** @description Extension of the image or video in lowercase with a dot (e.g. '.jpg') */
                                      extension?: string;
                                  };
                                  /** @description Name of the image */
                                  name?: string;
                                  /** @description List of per-task states obtained aggregating the annotation state with the revisit information */
                                  annotation_state_per_task?: {
                                      /**
                                       * @description Mongo ID of the object
                                       * @example 60d31793d5f1fb7e6e3c1a4c
                                       */
                                      task_id?: string;
                                      /**
                                       * @description Annotation state of the media for this task
                                       * @enum {string|null}
                                       */
                                      state?:
                                          | 'annotated'
                                          | 'partially_annotated'
                                          | 'none'
                                          | 'to_revisit'
                                          | null;
                                  }[];
                                  /** @description Relative URL to the image thumbnail */
                                  thumbnail?: string;
                                  /**
                                   * @description Type of media. 'image' for images, 'video' for video and 'video_frame' for video frames.
                                   * @enum {string}
                                   */
                                  type?: 'image';
                                  /** @description Upload time of the media file */
                                  upload_time?: string;
                                  /** @description Optional ID of the annotation scene  if filtering in a specific training revision */
                                  annotation_scene_id?: string;
                                  /** @description Optional ID of the roi id if filtering in a specific training revision */
                                  roi_id?: string;
                                  /** @description Optional ID of the user that last edited the annotation. */
                                  last_annotator_id?: string;
                              }
                            | {
                                  /**
                                   * @description Mongo ID of the object
                                   * @example 60d31793d5f1fb7e6e3c1a4c
                                   */
                                  id?: string;
                                  media_information?: {
                                      /** @description Display URL of the image or video */
                                      display_url?: string;
                                      /** @description Duration of the video */
                                      duration?: number;
                                      /** @description Number of frames in the video */
                                      frame_count?: number;
                                      /** @description Frame stride of the video */
                                      frame_stride?: number;
                                      /** @description Frame rate of the video */
                                      frame_rate?: number;
                                      /** @description Height of the video */
                                      height?: number;
                                      /** @description Width of the video */
                                      width?: number;
                                      /** @description Size of the video in bytes */
                                      size?: number;
                                  };
                                  /** @description Name of the image */
                                  name?: string;
                                  /** @description List of per-task states obtained aggregating the annotation state with the revisit information */
                                  annotation_state_per_task?: {
                                      /**
                                       * @description Mongo ID of the object
                                       * @example 60d31793d5f1fb7e6e3c1a4c
                                       */
                                      task_id?: string;
                                      /**
                                       * @description Annotation state of the media for this task
                                       * @enum {string|null}
                                       */
                                      state?:
                                          | 'annotated'
                                          | 'partially_annotated'
                                          | 'none'
                                          | 'to_revisit'
                                          | null;
                                  }[];
                                  /** @description Relative URL to the video thumbnail */
                                  thumbnail?: string;
                                  /**
                                   * @description Type of media. 'image' for images, 'video' for video and 'video_frame' for video frames.
                                   * @enum {string}
                                   */
                                  type?: 'video';
                                  /** @description Upload time of the media file */
                                  upload_time?: string;
                                  /** @description Number of frames in the video that match the filter. Only returned when filtering by annotation properties. */
                                  matched_frames?: number | null;
                              }
                            | {
                                  /**
                                   * Format: int32
                                   * @description The video frame index
                                   */
                                  id?: number;
                                  media_information?: {
                                      /** @description Display URL of the image or video */
                                      display_url?: string;
                                      /** @description Duration of the video */
                                      duration?: number;
                                      /** @description Number of frames in the video */
                                      frame_count?: number;
                                      /** @description Frame stride of the video */
                                      frame_stride?: number;
                                      /** @description Frame rate of the video */
                                      frame_rate?: number;
                                      /** @description Height of the video */
                                      height?: number;
                                      /** @description Width of the video */
                                      width?: number;
                                      /** @description Size of the video in bytes */
                                      size?: number;
                                  };
                                  /** @description Name of the image */
                                  name?: string;
                                  /** @description List of per-task states obtained aggregating the annotation state with the revisit information */
                                  annotation_state_per_task?: {
                                      /**
                                       * @description Mongo ID of the object
                                       * @example 60d31793d5f1fb7e6e3c1a4c
                                       */
                                      task_id?: string;
                                      /**
                                       * @description Annotation state of the media for this task
                                       * @enum {string|null}
                                       */
                                      state?:
                                          | 'annotated'
                                          | 'partially_annotated'
                                          | 'none'
                                          | 'to_revisit'
                                          | null;
                                  }[];
                                  /** @description Relative URL to the video frame thumbnail */
                                  thumbnail?: string;
                                  /**
                                   * @description Type of media. 'image' for images, 'video' for video and 'video_frame' for video frames.
                                   * @enum {string}
                                   */
                                  type?: 'video_frame';
                                  /** @description Upload time of the media file */
                                  upload_time?: string;
                                  /** @description Optional ID of the annotation scene if filtering in a specific training revision */
                                  annotation_scene_id?: string;
                                  /** @description Optional ID of the roi id if filtering in a specific training revision */
                                  roi_id?: string;
                                  /** @description Optional ID of the user that last edited the annotation. */
                                  last_annotator_id?: string;
                              }
                        )[];
                        /** @description URL to the next page of results, if the same parameters are used. */
                        next_page?: string;
                        /** @description Total images that match the query. */
                        total_matched_images?: number;
                        /** @description Total videos that match the query. */
                        total_matched_videos?: number;
                        /** @description Total video frames that match the query. */
                        total_matched_video_frames?: number;
                        /** @description Total images in the dataset. */
                        total_images?: number;
                        /** @description Total videos in the dataset. */
                        total_videos?: number;
                    };
                };
            };
            /** @description Bad request. See the examples for details. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    GetActiveDataset: {
        parameters: {
            query?: {
                /** @description Number of items returned in the response. Default is 10 and maximum is 100. */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The requested media entities */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description List of media items */
                        active_set?: (
                            | {
                                  /**
                                   * @description Mongo ID of the object
                                   * @example 60d31793d5f1fb7e6e3c1a4c
                                   */
                                  id?: string;
                                  media_information?: {
                                      /** @description Display URL of the image or video frame */
                                      display_url?: string;
                                      /** @description Height of the image or video frame */
                                      height?: number;
                                      /** @description Width of the image or video frame */
                                      width?: number;
                                      /** @description Size of the image or video in bytes */
                                      size?: number;
                                      /** @description Extension of the image or video in lowercase with a dot (e.g. '.jpg') */
                                      extension?: string;
                                  };
                                  /**
                                   * @description Mongo ID of the object
                                   * @example 60d31793d5f1fb7e6e3c1a4c
                                   */
                                  dataset_id?: string;
                                  /** @description Name of the image */
                                  name?: string;
                                  /** @description List of per-task states obtained aggregating the annotation state with the revisit information */
                                  annotation_state_per_task?: {
                                      /**
                                       * @description Mongo ID of the object
                                       * @example 60d31793d5f1fb7e6e3c1a4c
                                       */
                                      task_id?: string;
                                      /**
                                       * @description Annotation state of the media for this task
                                       * @enum {string|null}
                                       */
                                      state?:
                                          | 'annotated'
                                          | 'partially_annotated'
                                          | 'none'
                                          | 'to_revisit'
                                          | null;
                                  }[];
                                  /** @description Relative URL to the image thumbnail */
                                  thumbnail?: string;
                                  /**
                                   * @description Type of media. 'image' for images, 'video' for video.
                                   * @enum {string}
                                   */
                                  type?: 'image';
                                  /** @description Upload time of the media file */
                                  upload_time?: string;
                              }
                            | {
                                  /**
                                   * @description Mongo ID of the object
                                   * @example 60d31793d5f1fb7e6e3c1a4c
                                   */
                                  id?: string;
                                  media_information?: {
                                      /** @description Display URL of the image or video */
                                      display_url?: string;
                                      /** @description Duration of the video */
                                      duration?: number;
                                      /** @description Number of frames in the video */
                                      frame_count?: number;
                                      /** @description Frame stride of the video */
                                      frame_stride?: number;
                                      /** @description Frame rate of the video */
                                      frame_rate?: number;
                                      /** @description Height of the video */
                                      height?: number;
                                      /** @description Width of the video */
                                      width?: number;
                                      /** @description Size of the video in bytes */
                                      size?: number;
                                  };
                                  /** @description List of video frame indices */
                                  active_frames?: number[];
                                  /**
                                   * @description Mongo ID of the object
                                   * @example 60d31793d5f1fb7e6e3c1a4c
                                   */
                                  dataset_id?: string;
                                  /** @description Name of the image */
                                  name?: string;
                                  /** @description List of per-task states obtained aggregating the annotation state with the revisit information */
                                  annotation_state_per_task?: {
                                      /**
                                       * @description Mongo ID of the object
                                       * @example 60d31793d5f1fb7e6e3c1a4c
                                       */
                                      task_id?: string;
                                      /**
                                       * @description Annotation state of the media for this task
                                       * @enum {string|null}
                                       */
                                      state?:
                                          | 'annotated'
                                          | 'partially_annotated'
                                          | 'none'
                                          | 'to_revisit'
                                          | null;
                                  }[];
                                  /** @description Relative URL to the image thumbnail */
                                  thumbnail?: string;
                                  /**
                                   * @description Type of media. 'image' for images, 'video' for video.
                                   * @enum {string}
                                   */
                                  type?: 'video';
                                  /** @description Upload time of the media file */
                                  upload_time?: string;
                              }
                        )[];
                    };
                };
            };
            /** @description No active media found in dataset. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status: 200 | 201 | 202 | 203 | 204 | 205 | 206;
                        /** @description Message from server */
                        message: string;
                    };
                };
            };
            /** @description Invalid request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    GetAllTestsInAProject: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The requested tests info */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Array of tests */
                        test_results: {
                            /**
                             * @description Mongo ID of the object
                             * @example 60d31793d5f1fb7e6e3c1a4c
                             */
                            id: string;
                            /** @description Test name */
                            name: string;
                            /** @description Creation time of the test */
                            creation_time: string;
                            /** @description Info of job related to the model test result. This attribute is only present after job is created for the model test. */
                            job_info: {
                                /**
                                 * @description Mongo ID of the object
                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                 */
                                id?: string;
                                /** @description Status of the testing operation; should be one of: [ PENDING, CREATING_DATASET, INFERRING, EVALUATING, DONE ] */
                                status?: string;
                            };
                            /** @description Array of datasets */
                            datasets_info: {
                                /**
                                 * @description Mongo ID of the object
                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                 */
                                id?: string;
                                /** @description boolean showing whether the dataset is deleted */
                                is_deleted?: boolean;
                                /** @description Name of the dataset */
                                name?: string;
                                /**
                                 * Format: int32
                                 * @description Number of images in the dataset
                                 */
                                n_images?: number;
                                /**
                                 * Format: int32
                                 * @description Number of frames in the dataset
                                 */
                                n_frames?: number;
                                /**
                                 * Format: int32
                                 * @description Number of samples in the dataset
                                 */
                                n_samples?: number;
                            }[];
                            model_info: {
                                /**
                                 * @description Mongo ID of the object
                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                 */
                                group_id?: string;
                                /**
                                 * @description Mongo ID of the object
                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                 */
                                id?: string;
                                /**
                                 * Format: int32
                                 * @description Number of labels model was trained with
                                 */
                                n_labels?: number;
                                /** @description Task type; should be one of: [ classification, detection, segmentation, crop, dataset ] */
                                task_type?: string;
                                /** @description Name of the model template for the model */
                                template_id?: string;
                                /** @description Optimization type of the model, one of [ NONE, MO, POT, NNCF ] */
                                optimization_type?: string;
                                /**
                                 * Format: int32
                                 * @description Version of the model
                                 */
                                version?: number;
                            };
                            /** @description Array of scores */
                            scores: {
                                /** @description Name of the metric */
                                name?: string;
                                /**
                                 * Format: float
                                 * @description Value of the score
                                 */
                                value?: number;
                                /** @description ID of the label corresponding to the score. If  null, the score is for all labels */
                                label_id?: string | null;
                            }[];
                        }[];
                    };
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    TriggerModelTestJob: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /** @description Name of the test */
                    name: string;
                    /**
                     * @description Mongo ID of the object
                     * @example 60d31793d5f1fb7e6e3c1a4c
                     */
                    model_group_id: string;
                    /**
                     * @description Mongo ID of the object
                     * @example 60d31793d5f1fb7e6e3c1a4c
                     */
                    model_id: string;
                    /** @description Array of dataset ids */
                    dataset_ids: string[];
                    /**
                     * @description Pick global to compute the media-level performance (e.g., accuracy), and pick local to compute localized metrics \
                     *     (e.g., dice for segmentation and f-measure for detection). If no value is passed, we default to local metric.
                     *
                     * @enum {string}
                     */
                    metric?: 'global';
                };
            };
        };
        responses: {
            /** @description The requested tests info */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /**
                         * @description Mongo ID of the object
                         * @example 60d31793d5f1fb7e6e3c1a4c
                         */
                        job_id?: string;
                    };
                };
            };
            /** @description Bad request error. See the examples for details. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    GetTestInAProject: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
                /** @description The ID of the test of interest */
                test_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The requested test info */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /**
                         * @description Mongo ID of the object
                         * @example 60d31793d5f1fb7e6e3c1a4c
                         */
                        id: string;
                        /** @description Test name */
                        name: string;
                        /** @description Creation time of the test */
                        creation_time: string;
                        /** @description Info of job related to the model test result. This attribute is only present after job is created for the model test. */
                        job_info: {
                            /**
                             * @description Mongo ID of the object
                             * @example 60d31793d5f1fb7e6e3c1a4c
                             */
                            id?: string;
                            /** @description Status of the testing operation; should be one of: [ PENDING, CREATING_DATASET, INFERRING, EVALUATING, DONE ] */
                            status?: string;
                        };
                        /** @description Array of datasets */
                        datasets_info: {
                            /**
                             * @description Mongo ID of the object
                             * @example 60d31793d5f1fb7e6e3c1a4c
                             */
                            id?: string;
                            /** @description boolean showing whether the dataset is deleted */
                            is_deleted?: boolean;
                            /** @description Name of the dataset */
                            name?: string;
                            /**
                             * Format: int32
                             * @description Number of images in the dataset
                             */
                            n_images?: number;
                            /**
                             * Format: int32
                             * @description Number of frames in the dataset
                             */
                            n_frames?: number;
                            /**
                             * Format: int32
                             * @description Number of samples in the dataset
                             */
                            n_samples?: number;
                        }[];
                        model_info: {
                            /**
                             * @description Mongo ID of the object
                             * @example 60d31793d5f1fb7e6e3c1a4c
                             */
                            group_id?: string;
                            /**
                             * @description Mongo ID of the object
                             * @example 60d31793d5f1fb7e6e3c1a4c
                             */
                            id?: string;
                            /**
                             * Format: int32
                             * @description Number of labels model was trained with
                             */
                            n_labels?: number;
                            /** @description Task type; should be one of: [ classification, detection, segmentation, crop, dataset ] */
                            task_type?: string;
                            /** @description Name of the model template for the model */
                            template_id?: string;
                            /** @description Optimization type of the model, one of [ NONE, MO, POT, NNCF ] */
                            optimization_type?: string;
                            /**
                             * Format: int32
                             * @description Version of the model
                             */
                            version?: number;
                        };
                        /** @description Array of scores */
                        scores: {
                            /** @description Name of the metric */
                            name?: string;
                            /**
                             * Format: float
                             * @description Value of the score
                             */
                            value?: number;
                            /** @description ID of the label corresponding to the score. If  null, the score is for all labels */
                            label_id?: string | null;
                        }[];
                    };
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    DeleteTestInAProject: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
                /** @description The ID of the test of interest */
                test_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Test successfully deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status: 200 | 201 | 202 | 203 | 204 | 205 | 206;
                        /** @description Message from server */
                        message: string;
                    };
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    FilterDataset: {
        parameters: {
            query?: {
                /** @description Number of items returned in the response. Default is 10 and maximum is 100. */
                limit?: number;
                /** @description Number indicating how many items to skip from the first item that matches the query.
                 *     This field is used in combination with the limit field for the pagination feature. */
                skip?: string;
                /** @description Sorting order, could be `asc` (ascending) or `dsc` (descending).  */
                sort_direction?: 'asc' | 'dsc';
                /** @description Field to sort by, only 'score' available */
                sort_by?: 'score';
            };
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
                /** @description The ID of the test of interest */
                test_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /**
                     * @description Connection between the rules of the query
                     * @enum {string}
                     */
                    condition: 'and';
                    /** @description list of rules used to filter test media results */
                    rules: {
                        field: string;
                        operator: string;
                        value: string | number | null;
                    }[];
                };
            };
        };
        responses: {
            /** @description Media items matching the filter */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description List of media items */
                        media?: (
                            | {
                                  annotation_scene_id?: string | null;
                                  /** @description Annotation state per task of the image. */
                                  annotation_state_per_task?: {
                                      /**
                                       * @description Mongo ID of the object
                                       * @example 60d31793d5f1fb7e6e3c1a4c
                                       */
                                      task_id?: string;
                                      /**
                                       * @description Overall state obtained aggregating the annotation states with the 'revisit' information on a per-task basis. This only has meaning for an  image/frame/scene, as a video does not have an annotation scene. - Image/VideoFrame/AnnotationScene: - to_revisit: Some annotations need to be revisited by the user for this task - annotated: All the ROIs for this task are annotated (contain a label for the task) - partially_annotated: Some ROIs for this task do not contain labels, other ones do - none: No label is present for this task - Video: - all tasks are set to null
                                       * @enum {string|null}
                                       */
                                      state?:
                                          | 'to_revisit'
                                          | 'annotated'
                                          | 'partially_annotated'
                                          | 'none'
                                          | null;
                                  }[];
                                  last_annotator_id?: string | null;
                                  /**
                                   * @description Mongo ID of the object
                                   * @example 60d31793d5f1fb7e6e3c1a4c
                                   */
                                  id: string;
                                  media_information: {
                                      /** @description Display URL of the image or video frame */
                                      display_url?: string;
                                      /** @description Height of the image or video frame */
                                      height?: number;
                                      /** @description Width of the image or video frame */
                                      width?: number;
                                      /** @description Size of the image or video in bytes */
                                      size?: number;
                                      /** @description Extension of the image or video in lowercase with a dot (e.g. '.jpg') */
                                      extension?: string;
                                  };
                                  /**
                                   * @description Status of the preprocessing operation
                                   * @enum {string}
                                   */
                                  preprocessing:
                                      | 'SCHEDULED'
                                      | 'IN_PROGRESS'
                                      | 'FINISHED'
                                      | 'FAILED';
                                  /** @description Name of the image */
                                  name: string;
                                  roi_id?: string | null;
                                  /** @description The media's test info */
                                  test_result: {
                                      /**
                                       * @description Mongo ID of the object
                                       * @example 60d31793d5f1fb7e6e3c1a4c
                                       */
                                      annotation_id?: string;
                                      /**
                                       * @description Mongo ID of the object
                                       * @example 60d31793d5f1fb7e6e3c1a4c
                                       */
                                      prediction_id?: string;
                                      scores?: {
                                          /**
                                           * @description Mongo ID of the object
                                           * @example 60d31793d5f1fb7e6e3c1a4c
                                           */
                                          label_id?: string | null;
                                          /** @description The name of the metric of this score */
                                          name?: string;
                                          /** @description The score in percentage (0-100) */
                                          value?: number;
                                      }[];
                                  };
                                  /** @description Relative URL to the image thumbnail */
                                  thumbnail: string;
                                  /**
                                   * @description Type of media. 'image' for images, and 'video_frame' for video frames.
                                   * @enum {string}
                                   */
                                  type: 'image';
                                  /** @description Upload time of the media file */
                                  upload_time?: string;
                                  /** @description The ID of the user who uploaded the image */
                                  uploader_id?: string;
                              }
                            | {
                                  annotation_scene_id?: string | null;
                                  /** @description Annotation state per task of the image. */
                                  annotation_state_per_task?: {
                                      /**
                                       * @description Mongo ID of the object
                                       * @example 60d31793d5f1fb7e6e3c1a4c
                                       */
                                      task_id?: string;
                                      /**
                                       * @description Overall state obtained aggregating the annotation states with the 'revisit' information on a per-task basis. This only has meaning for an  image/frame/scene, as a video does not have an annotation scene. - Image/VideoFrame/AnnotationScene: - to_revisit: Some annotations need to be revisited by the user for this task - annotated: All the ROIs for this task are annotated (contain a label for the task) - partially_annotated: Some ROIs for this task do not contain labels, other ones do - none: No label is present for this task - Video: - all tasks are set to null
                                       * @enum {string|null}
                                       */
                                      state?:
                                          | 'to_revisit'
                                          | 'annotated'
                                          | 'partially_annotated'
                                          | 'none'
                                          | null;
                                  }[];
                                  last_annotator_id?: string | null;
                                  /** @description The index of the video frame (0-based) */
                                  frame_index: number;
                                  media_information: {
                                      /** @description Display URL of the image or video frame */
                                      display_url?: string;
                                      /** @description Height of the image or video frame */
                                      height?: number;
                                      /** @description Width of the image or video frame */
                                      width?: number;
                                      /** @description Size of the image or video in bytes */
                                      size?: number;
                                      /** @description Extension of the image or video in lowercase with a dot (e.g. '.jpg') */
                                      extension?: string;
                                  };
                                  /**
                                   * @description Status of the preprocessing operation
                                   * @enum {string}
                                   */
                                  preprocessing:
                                      | 'SCHEDULED'
                                      | 'IN_PROGRESS'
                                      | 'FINISHED'
                                      | 'FAILED';
                                  /** @description The title of the video frame */
                                  name: string;
                                  roi_id?: string | null;
                                  /** @description The media's test info */
                                  test_result: {
                                      /**
                                       * @description Mongo ID of the object
                                       * @example 60d31793d5f1fb7e6e3c1a4c
                                       */
                                      annotation_id?: string;
                                      /**
                                       * @description Mongo ID of the object
                                       * @example 60d31793d5f1fb7e6e3c1a4c
                                       */
                                      prediction_id?: string;
                                      scores?: {
                                          /**
                                           * @description Mongo ID of the object
                                           * @example 60d31793d5f1fb7e6e3c1a4c
                                           */
                                          label_id?: string | null;
                                          /** @description The name of the metric of this score */
                                          name?: string;
                                          /** @description The score in percentage (0-100) */
                                          value?: number;
                                      }[];
                                  };
                                  /** @description Relative URL to the video frame thumbnail */
                                  thumbnail: string;
                                  /**
                                   * @description Type of media. 'image' for images, 'video' for video and 'video_frame' for video frames.
                                   * @enum {string}
                                   */
                                  type: 'video_frame';
                                  /** @description Upload time of the media file */
                                  upload_time?: string;
                                  /** @description The ID of the user who uploaded the video */
                                  uploader_id?: string;
                                  /**
                                   * @description Mongo ID of the object
                                   * @example 60d31793d5f1fb7e6e3c1a4c
                                   */
                                  video_id: string;
                              }
                        )[];
                        /** @description URL to the next page of results, if the same parameters are used. */
                        next_page?: string;
                        /** @description Total images that match the query. */
                        total_matched_images?: number;
                        /** @description Total videos that match the query. */
                        total_matched_videos?: number;
                        /** @description Total video frames that match the query. */
                        total_matched_video_frames?: number;
                        /** @description Total images in the dataset. */
                        total_images?: number;
                        /** @description Total videos in the dataset. */
                        total_videos?: number;
                    };
                };
            };
            /** @description Bad request. See the examples for details. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    GetJobs: {
        parameters: {
            query?: {
                /** @description Select only items related to the given project. */
                project_id?: string;
                /** @description Select only jobs in the given state. */
                state?:
                    | 'idle'
                    | 'running'
                    | 'paused'
                    | 'finished'
                    | 'error'
                    | 'failed'
                    | 'cancelled';
                /** @description Select only jobs of the given type. */
                job_type?: ('train' | 'optimize_pot' | 'test')[];
                /** @description Select jobs with matching key. */
                job_key?: string;
                /** @description Filter jobs by the author's unique identifier */
                author_id?: string;
                /** @description Filter jobs which started after this time. If time is not specified (only date), it defaults to the beginning of the day. */
                start_time_from?: string;
                /** @description Filter jobs which started before this time. If time is not specified (only date), it defaults to the beginning of the day. */
                start_time_to?: string;
                /** @description Number indicating how many items to skip from the first item that matches the query.
                 *     This field is used in combination with the limit field for the pagination feature. */
                skip?: string;
                /** @description Number of items returned in the response. Default is 10 and maximum is 100. */
                limit?: number;
                /** @description Field to sort by, could be [job_name, start_time, end_time, creation_date, priority] */
                sort_by?: 'job_name' | 'start_time' | 'end_time' | 'creation_date' | 'priority';
                /** @description Sorting order, could be `asc` (ascending) or `dsc` (descending).  */
                sort_direction?: 'asc' | 'dsc';
            };
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Jobs successfully retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Array of jobs */
                        jobs?: (
                            | {
                                  /** @description Name of the job */
                                  name?: string;
                                  /** @description The time at which the job was created */
                                  creation_time?: string;
                                  /**
                                   * @description Mongo ID of the object
                                   * @example 60d31793d5f1fb7e6e3c1a4c
                                   */
                                  id?: string;
                                  /** @description Identifier of the user who submitted the job */
                                  author?: string;
                                  /** @description Information detailing the cancellation status of the job */
                                  cancellation_info?: {
                                      /** @description whether the job can be cancelled after startup */
                                      cancellable?: boolean | null;
                                      /** @description whether the job is cancelled */
                                      is_cancelled?: boolean | null;
                                      /** @description The user UID who requested the cancellation */
                                      user_uid?: string | null;
                                      /**
                                       * Format: date-time
                                       * @description The time of cancellation
                                       */
                                      cancel_time?: string | null;
                                  };
                                  /** @description Progress details for each step of the job */
                                  steps?: {
                                      /** @description Status message */
                                      message?: string | null;
                                      /** @description The index of the step within the job */
                                      index?: number;
                                      /**
                                       * Format: float
                                       * @description Step progress from 0 to 100
                                       */
                                      progress?: number;
                                      /** @description Step state */
                                      state?: string;
                                      /** @description Step name */
                                      step_name?: string;
                                      /**
                                       * Format: float
                                       * @description Step duration in seconds
                                       */
                                      duration?: number | null;
                                      /** @description Step warning message */
                                      warning?: string | null;
                                  }[];
                                  /**
                                   * Format: date-time
                                   * @description Start time of the job
                                   */
                                  start_time?: string | null;
                                  /**
                                   * Format: date-time
                                   * @description End time of the job
                                   */
                                  end_time?: string | null;
                                  /** @description The state of the job */
                                  state?: string;
                                  /**
                                   * @description Type of the job.
                                   * @enum {string}
                                   */
                                  type?: 'train';
                                  /**
                                   * Metadata of train job
                                   * @description Additional information associated with the train job
                                   */
                                  metadata?: {
                                      /** @description Information about the task associated with the job, if any */
                                      task?: {
                                          /** @description Name of the task */
                                          name?: string;
                                          /** @description Identifier of the model template used by the task */
                                          model_template_id?: string;
                                          /** @description Neural network architecture used for the model */
                                          model_architecture?: string;
                                          /**
                                           * @description Mongo ID of the object
                                           * @example 60d31793d5f1fb7e6e3c1a4c
                                           */
                                          dataset_storage_id?: string;
                                          /**
                                           * @description Mongo ID of the object
                                           * @example 60d31793d5f1fb7e6e3c1a4c
                                           */
                                          task_id?: string;
                                      };
                                      /** @description Information about the project associated with the job */
                                      project?: {
                                          /**
                                           * @description Mongo ID of the object
                                           * @example 60d31793d5f1fb7e6e3c1a4c
                                           */
                                          id?: string;
                                          /** @description Name of the project */
                                          name?: string;
                                      };
                                      /** @description Information about the trained model */
                                      trained_model?: {
                                          /**
                                           * @description Mongo ID of the object
                                           * @example 60d31793d5f1fb7e6e3c1a4c
                                           */
                                          model_storage_id?: string;
                                          /**
                                           * @description Mongo ID of the object
                                           * @example 60d31793d5f1fb7e6e3c1a4c
                                           */
                                          model_id?: string;
                                          /** @description Whether the model became the active one after training */
                                          model_activated?: boolean;
                                      };
                                  };
                              }
                            | {
                                  /** @description Name of the job */
                                  name?: string;
                                  /** @description The time at which the job was created */
                                  creation_time?: string;
                                  /**
                                   * @description Mongo ID of the object
                                   * @example 60d31793d5f1fb7e6e3c1a4c
                                   */
                                  id?: string;
                                  /** @description Identifier of the user who submitted the job */
                                  author?: string;
                                  /** @description Information detailing the cancellation status of the job */
                                  cancellation_info?: {
                                      /** @description whether the job can be cancelled after startup */
                                      cancellable?: boolean | null;
                                      /** @description whether the job is cancelled */
                                      is_cancelled?: boolean | null;
                                      /** @description The user UID who requested the cancellation */
                                      user_uid?: string | null;
                                      /**
                                       * Format: date-time
                                       * @description The time of cancellation
                                       */
                                      cancel_time?: string | null;
                                  };
                                  /** @description Progress details for each step of the job */
                                  steps?: {
                                      /** @description Status message */
                                      message?: string | null;
                                      /** @description The index of the step within the job */
                                      index?: number;
                                      /**
                                       * Format: float
                                       * @description Step progress from 0 to 100
                                       */
                                      progress?: number;
                                      /** @description Step state */
                                      state?: string;
                                      /** @description Step name */
                                      step_name?: string;
                                      /**
                                       * Format: float
                                       * @description Step duration in seconds
                                       */
                                      duration?: number | null;
                                      /** @description Step warning message */
                                      warning?: string | null;
                                  }[];
                                  /**
                                   * Format: date-time
                                   * @description Start time of the job
                                   */
                                  start_time?: string | null;
                                  /**
                                   * Format: date-time
                                   * @description End time of the job
                                   */
                                  end_time?: string | null;
                                  /** @description The state of the job */
                                  state?: string;
                                  /**
                                   * @description Type of the job.
                                   * @enum {string}
                                   */
                                  type?: 'test';
                                  /**
                                   * Metadata of train/optimize/test job
                                   * @description Additional information associated with the train/optimize/test job
                                   */
                                  metadata?: {
                                      /** @description Information about the task associated with the job, if any */
                                      task?: {
                                          /** @description Name of the task */
                                          name?: string;
                                          /** @description Identifier of the model template used by the task */
                                          model_template_id?: string;
                                          /** @description Neural network architecture used for the model */
                                          model_architecture?: string;
                                          /**
                                           * @description Mongo ID of the object
                                           * @example 60d31793d5f1fb7e6e3c1a4c
                                           */
                                          dataset_storage_id?: string;
                                          /**
                                           * @description Mongo ID of the object
                                           * @example 60d31793d5f1fb7e6e3c1a4c
                                           */
                                          task_id?: string;
                                      };
                                      /** @description Information about the test associated with the job, if any */
                                      test?: {
                                          /** @description Identifier of the model template used by the task */
                                          model_template_id?: string;
                                          /** @description Neural network architecture used for the model */
                                          model_architecture?: string;
                                          model?: unknown;
                                          /** @description Array of datasets */
                                          datasets?: {
                                              /**
                                               * @description Mongo ID of the object
                                               * @example 60d31793d5f1fb7e6e3c1a4c
                                               */
                                              id?: string;
                                              /** @description boolean showing whether the dataset is deleted */
                                              is_deleted?: boolean;
                                              /** @description Name of the dataset */
                                              name?: string;
                                              /**
                                               * Format: int32
                                               * @description Number of images in the dataset
                                               */
                                              n_images?: number;
                                              /**
                                               * Format: int32
                                               * @description Number of frames in the dataset
                                               */
                                              n_frames?: number;
                                              /**
                                               * Format: int32
                                               * @description Number of samples in the dataset
                                               */
                                              n_samples?: number;
                                          }[];
                                      };
                                      /** @description Information about the project associated with the job */
                                      project?: {
                                          /**
                                           * @description Mongo ID of the object
                                           * @example 60d31793d5f1fb7e6e3c1a4c
                                           */
                                          id?: string;
                                          /** @description Name of the project */
                                          name?: string;
                                      };
                                  };
                              }
                            | {
                                  /** @description Name of the job */
                                  name?: string;
                                  /** @description The time at which the job was created */
                                  creation_time?: string;
                                  /**
                                   * @description Mongo ID of the object
                                   * @example 60d31793d5f1fb7e6e3c1a4c
                                   */
                                  id?: string;
                                  /** @description Identifier of the user who submitted the job */
                                  author?: string;
                                  /** @description Information detailing the cancellation status of the job */
                                  cancellation_info?: {
                                      /** @description whether the job can be cancelled after startup */
                                      cancellable?: boolean | null;
                                      /** @description whether the job is cancelled */
                                      is_cancelled?: boolean | null;
                                      /** @description The user UID who requested the cancellation */
                                      user_uid?: string | null;
                                      /**
                                       * Format: date-time
                                       * @description The time of cancellation
                                       */
                                      cancel_time?: string | null;
                                  };
                                  /** @description Progress details for each step of the job */
                                  steps?: {
                                      /** @description Status message */
                                      message?: string | null;
                                      /** @description The index of the step within the job */
                                      index?: number;
                                      /**
                                       * Format: float
                                       * @description Step progress from 0 to 100
                                       */
                                      progress?: number;
                                      /** @description Step state */
                                      state?: string;
                                      /** @description Step name */
                                      step_name?: string;
                                      /**
                                       * Format: float
                                       * @description Step duration in seconds
                                       */
                                      duration?: number | null;
                                      /** @description Step warning message */
                                      warning?: string | null;
                                  }[];
                                  /**
                                   * Format: date-time
                                   * @description Start time of the job
                                   */
                                  start_time?: string | null;
                                  /**
                                   * Format: date-time
                                   * @description End time of the job
                                   */
                                  end_time?: string | null;
                                  /** @description The state of the job */
                                  state?: string;
                                  /**
                                   * @description Type of the job.
                                   * @enum {string}
                                   */
                                  type?: 'optimize_pot';
                                  /**
                                   * Metadata of optimize job
                                   * @description Additional information associated with the optimize job
                                   */
                                  metadata?: {
                                      /** @description Information about the task associated with the job, if any */
                                      task?: {
                                          /** @description Name of the task */
                                          name?: string;
                                          /** @description Identifier of the model template used by the task */
                                          model_template_id?: string;
                                          /** @description Neural network architecture used for the model */
                                          model_architecture?: string;
                                          /**
                                           * @description Mongo ID of the object
                                           * @example 60d31793d5f1fb7e6e3c1a4c
                                           */
                                          dataset_storage_id?: string;
                                          /**
                                           * @description Mongo ID of the object
                                           * @example 60d31793d5f1fb7e6e3c1a4c
                                           */
                                          task_id?: string;
                                      };
                                      /** @description Information about the project associated with the job */
                                      project?: {
                                          /**
                                           * @description Mongo ID of the object
                                           * @example 60d31793d5f1fb7e6e3c1a4c
                                           */
                                          id?: string;
                                          /** @description Name of the project */
                                          name?: string;
                                      };
                                      /**
                                       * @description Mongo ID of the object
                                       * @example 60d31793d5f1fb7e6e3c1a4c
                                       */
                                      model_storage_id?: string;
                                      /**
                                       * @description Type of optimization
                                       * @enum {string}
                                       */
                                      optimization_type?: 'POT';
                                      /**
                                       * @description Mongo ID of the object
                                       * @example 60d31793d5f1fb7e6e3c1a4c
                                       */
                                      base_model_id?: string;
                                      /**
                                       * @description Mongo ID of the object
                                       * @example 60d31793d5f1fb7e6e3c1a4c
                                       */
                                      optimized_model_id?: string;
                                  };
                              }
                            | {
                                  /** @description Name of the job */
                                  name?: string;
                                  /** @description The time at which the job was created */
                                  creation_time?: string;
                                  /**
                                   * @description Mongo ID of the object
                                   * @example 60d31793d5f1fb7e6e3c1a4c
                                   */
                                  id?: string;
                                  /** @description Identifier of the user who submitted the job */
                                  author?: string;
                                  /** @description Information detailing the cancellation status of the job */
                                  cancellation_info?: {
                                      /** @description whether the job can be cancelled after startup */
                                      cancellable?: boolean | null;
                                      /** @description whether the job is cancelled */
                                      is_cancelled?: boolean | null;
                                      /** @description The user UID who requested the cancellation */
                                      user_uid?: string | null;
                                      /**
                                       * Format: date-time
                                       * @description The time of cancellation
                                       */
                                      cancel_time?: string | null;
                                  };
                                  /** @description Progress details for each step of the job */
                                  steps?: {
                                      /** @description Status message */
                                      message?: string | null;
                                      /** @description The index of the step within the job */
                                      index?: number;
                                      /**
                                       * Format: float
                                       * @description Step progress from 0 to 100
                                       */
                                      progress?: number;
                                      /** @description Step state */
                                      state?: string;
                                      /** @description Step name */
                                      step_name?: string;
                                      /**
                                       * Format: float
                                       * @description Step duration in seconds
                                       */
                                      duration?: number | null;
                                      /** @description Step warning message */
                                      warning?: string | null;
                                  }[];
                                  /**
                                   * Format: date-time
                                   * @description Start time of the job
                                   */
                                  start_time?: string | null;
                                  /**
                                   * Format: date-time
                                   * @description End time of the job
                                   */
                                  end_time?: string | null;
                                  /** @description The state of the job */
                                  state?: string;
                                  /**
                                   * @description Type of the job.
                                   * @enum {string}
                                   */
                                  type?: 'prepare_import_to_new_project';
                                  /**
                                   * Metadata of `prepare_import_to_new_project` job
                                   * @description Supported project types and warnings
                                   */
                                  metadata?: {
                                      /** @description ID of the uploaded dataset file to be imported */
                                      file_id?: string;
                                      /** @description Warnings to import dataset to specific domain */
                                      warnings?: {
                                          /**
                                           * @description Type of the warning
                                           * @enum {string}
                                           */
                                          type: 'error' | 'warning';
                                          /**
                                           * @description Name of the warning
                                           * @example Missing expected annotation type for classification domain
                                           */
                                          name: string;
                                          /** @description Detailed description of the warning */
                                          description: string;
                                          /** @description How to handle the warning */
                                          resolve_strategy?: string;
                                          /**
                                           * Format: int32
                                           * @description Number of affected images
                                           */
                                          affected_images?: number;
                                      }[];
                                      /** @description Supported project types and corresponding labels */
                                      supported_project_types?: {
                                          /**
                                           * @description Project type name
                                           * @enum {string}
                                           */
                                          project_type:
                                              | 'classification'
                                              | 'classification_hierarchical'
                                              | 'detection'
                                              | 'segmentation'
                                              | 'instance_segmentation'
                                              | 'anomaly'
                                              | 'detection_oriented'
                                              | 'detection_classification'
                                              | 'detection_segmentation'
                                              | 'keypoint_detection';
                                          pipeline: {
                                              connections: {
                                                  /** @description Source task name */
                                                  from: string;
                                                  /** @description Target task name */
                                                  to: string;
                                              }[];
                                              tasks: {
                                                  /** @description Task name */
                                                  title: string;
                                                  /**
                                                   * @description OTX Task type name in lowercase
                                                   * @enum {string}
                                                   */
                                                  task_type:
                                                      | 'dataset'
                                                      | 'classification'
                                                      | 'segmentation'
                                                      | 'detection'
                                                      | 'crop'
                                                      | 'instance_segmentation'
                                                      | 'keypoint_detection'
                                                      | 'anomaly'
                                                      | 'rotated_detection';
                                                  labels: {
                                                      /** @description Label name */
                                                      name: string;
                                                      /** @description Label group name */
                                                      group?: string;
                                                      /** @description Label parent name */
                                                      parent?: string;
                                                  }[];
                                              }[];
                                          };
                                      }[];
                                  };
                              }
                            | {
                                  /** @description Name of the job */
                                  name?: string;
                                  /** @description The time at which the job was created */
                                  creation_time?: string;
                                  /**
                                   * @description Mongo ID of the object
                                   * @example 60d31793d5f1fb7e6e3c1a4c
                                   */
                                  id?: string;
                                  /** @description Identifier of the user who submitted the job */
                                  author?: string;
                                  /** @description Information detailing the cancellation status of the job */
                                  cancellation_info?: {
                                      /** @description whether the job can be cancelled after startup */
                                      cancellable?: boolean | null;
                                      /** @description whether the job is cancelled */
                                      is_cancelled?: boolean | null;
                                      /** @description The user UID who requested the cancellation */
                                      user_uid?: string | null;
                                      /**
                                       * Format: date-time
                                       * @description The time of cancellation
                                       */
                                      cancel_time?: string | null;
                                  };
                                  /** @description Progress details for each step of the job */
                                  steps?: {
                                      /** @description Status message */
                                      message?: string | null;
                                      /** @description The index of the step within the job */
                                      index?: number;
                                      /**
                                       * Format: float
                                       * @description Step progress from 0 to 100
                                       */
                                      progress?: number;
                                      /** @description Step state */
                                      state?: string;
                                      /** @description Step name */
                                      step_name?: string;
                                      /**
                                       * Format: float
                                       * @description Step duration in seconds
                                       */
                                      duration?: number | null;
                                      /** @description Step warning message */
                                      warning?: string | null;
                                  }[];
                                  /**
                                   * Format: date-time
                                   * @description Start time of the job
                                   */
                                  start_time?: string | null;
                                  /**
                                   * Format: date-time
                                   * @description End time of the job
                                   */
                                  end_time?: string | null;
                                  /** @description The state of the job */
                                  state?: string;
                                  /**
                                   * @description Type of the job.
                                   * @enum {string}
                                   */
                                  type?: 'perform_import_to_new_project';
                                  /**
                                   * Metadata of `perform_import_to_new_project` job
                                   * @description Created project ID
                                   */
                                  metadata?: {
                                      /** @description ID of the uploaded dataset file to be imported */
                                      file_id?: string;
                                      /** @description Information about the project to create */
                                      project?: {
                                          id?: string;
                                          name?: string;
                                      };
                                      /**
                                       * @description Mongo ID of the object
                                       * @example 60d31793d5f1fb7e6e3c1a4c
                                       */
                                      project_id?: string;
                                  };
                              }
                            | {
                                  /** @description Name of the job */
                                  name?: string;
                                  /** @description The time at which the job was created */
                                  creation_time?: string;
                                  /**
                                   * @description Mongo ID of the object
                                   * @example 60d31793d5f1fb7e6e3c1a4c
                                   */
                                  id?: string;
                                  /** @description Identifier of the user who submitted the job */
                                  author?: string;
                                  /** @description Information detailing the cancellation status of the job */
                                  cancellation_info?: {
                                      /** @description whether the job can be cancelled after startup */
                                      cancellable?: boolean | null;
                                      /** @description whether the job is cancelled */
                                      is_cancelled?: boolean | null;
                                      /** @description The user UID who requested the cancellation */
                                      user_uid?: string | null;
                                      /**
                                       * Format: date-time
                                       * @description The time of cancellation
                                       */
                                      cancel_time?: string | null;
                                  };
                                  /** @description Progress details for each step of the job */
                                  steps?: {
                                      /** @description Status message */
                                      message?: string | null;
                                      /** @description The index of the step within the job */
                                      index?: number;
                                      /**
                                       * Format: float
                                       * @description Step progress from 0 to 100
                                       */
                                      progress?: number;
                                      /** @description Step state */
                                      state?: string;
                                      /** @description Step name */
                                      step_name?: string;
                                      /**
                                       * Format: float
                                       * @description Step duration in seconds
                                       */
                                      duration?: number | null;
                                      /** @description Step warning message */
                                      warning?: string | null;
                                  }[];
                                  /**
                                   * Format: date-time
                                   * @description Start time of the job
                                   */
                                  start_time?: string | null;
                                  /**
                                   * Format: date-time
                                   * @description End time of the job
                                   */
                                  end_time?: string | null;
                                  /** @description The state of the job */
                                  state?: string;
                                  /**
                                   * @description Type of the job.
                                   * @enum {string}
                                   */
                                  type?: 'prepare_import_to_existing_project';
                                  /**
                                   * Metadata of `prepare_import_to_existing_project` job
                                   * @description Labels in the dataset and warnings
                                   */
                                  metadata?: {
                                      /** @description ID of the uploaded dataset file to be imported */
                                      file_id?: string;
                                      /** @description Information about the project where the dataset is imported */
                                      project?: {
                                          /** @description ID of the project */
                                          id?: string;
                                          /** @description Name of the project */
                                          name?: string;
                                          /**
                                           * @description Type name of the project
                                           * @enum {string}
                                           */
                                          type?:
                                              | 'classification'
                                              | 'classification_hierarchical'
                                              | 'detection'
                                              | 'segmentation'
                                              | 'instance_segmentation'
                                              | 'anomaly'
                                              | 'detection_oriented'
                                              | 'detection_classification'
                                              | 'detection_segmentation'
                                              | 'keypoint_detection';
                                      };
                                      /** @description Warnings to import dataset to specific domain */
                                      warnings?: {
                                          /**
                                           * @description Type of the warning
                                           * @enum {string}
                                           */
                                          type: 'error' | 'warning';
                                          /**
                                           * @description Name of the warning
                                           * @example Missing expected annotation type for classification domain
                                           */
                                          name: string;
                                          /** @description Detailed description of the warning */
                                          description: string;
                                          /** @description How to handle the warning */
                                          resolve_strategy?: string;
                                          /**
                                           * Format: int32
                                           * @description Number of affected images
                                           */
                                          affected_images?: number;
                                      }[];
                                      /** @description Label names in the dataset */
                                      labels?: string[];
                                  };
                              }
                            | {
                                  /** @description Name of the job */
                                  name?: string;
                                  /** @description The time at which the job was created */
                                  creation_time?: string;
                                  /**
                                   * @description Mongo ID of the object
                                   * @example 60d31793d5f1fb7e6e3c1a4c
                                   */
                                  id?: string;
                                  /** @description Identifier of the user who submitted the job */
                                  author?: string;
                                  /** @description Information detailing the cancellation status of the job */
                                  cancellation_info?: {
                                      /** @description whether the job can be cancelled after startup */
                                      cancellable?: boolean | null;
                                      /** @description whether the job is cancelled */
                                      is_cancelled?: boolean | null;
                                      /** @description The user UID who requested the cancellation */
                                      user_uid?: string | null;
                                      /**
                                       * Format: date-time
                                       * @description The time of cancellation
                                       */
                                      cancel_time?: string | null;
                                  };
                                  /** @description Progress details for each step of the job */
                                  steps?: {
                                      /** @description Status message */
                                      message?: string | null;
                                      /** @description The index of the step within the job */
                                      index?: number;
                                      /**
                                       * Format: float
                                       * @description Step progress from 0 to 100
                                       */
                                      progress?: number;
                                      /** @description Step state */
                                      state?: string;
                                      /** @description Step name */
                                      step_name?: string;
                                      /**
                                       * Format: float
                                       * @description Step duration in seconds
                                       */
                                      duration?: number | null;
                                      /** @description Step warning message */
                                      warning?: string | null;
                                  }[];
                                  /**
                                   * Format: date-time
                                   * @description Start time of the job
                                   */
                                  start_time?: string | null;
                                  /**
                                   * Format: date-time
                                   * @description End time of the job
                                   */
                                  end_time?: string | null;
                                  /** @description The state of the job */
                                  state?: string;
                                  /**
                                   * @description Type of the job.
                                   * @enum {string}
                                   */
                                  type?: 'perform_import_to_existing_project';
                                  /**
                                   * Metadata of `perform_import_to_existing_project` job
                                   * @description Imported dataset information
                                   */
                                  metadata?: {
                                      /** @description ID of the uploaded dataset file to be imported */
                                      file_id?: string;
                                      /** @description Information about the project where the dataset is imported */
                                      project?: {
                                          /** @description ID of the project */
                                          id?: string;
                                          /** @description Name of the project */
                                          name?: string;
                                          /**
                                           * @description Type name of the project
                                           * @enum {string}
                                           */
                                          type?:
                                              | 'classification'
                                              | 'classification_hierarchical'
                                              | 'detection'
                                              | 'segmentation'
                                              | 'instance_segmentation'
                                              | 'anomaly'
                                              | 'detection_oriented'
                                              | 'detection_classification'
                                              | 'detection_segmentation'
                                              | 'keypoint_detection';
                                      };
                                      /** @description The dataset information for importing the uploaded dataset file */
                                      dataset?: {
                                          /**
                                           * @description Mongo ID of the object
                                           * @example 60d31793d5f1fb7e6e3c1a4c
                                           */
                                          id?: string;
                                          /** @description Name of the dataset storage */
                                          name?: string;
                                          /** @description Whether the dataset will be used for training or not */
                                          use_for_training?: boolean;
                                          /**
                                           * @description The time at which the dataset was created
                                           * @example 2024-03-05T06:34:32.332000+00:00
                                           */
                                          creation_time?: string;
                                      };
                                  };
                              }
                            | {
                                  /** @description Name of the job */
                                  name?: string;
                                  /** @description The time at which the job was created */
                                  creation_time?: string;
                                  /**
                                   * @description Mongo ID of the object
                                   * @example 60d31793d5f1fb7e6e3c1a4c
                                   */
                                  id?: string;
                                  /** @description Identifier of the user who submitted the job */
                                  author?: string;
                                  /** @description Information detailing the cancellation status of the job */
                                  cancellation_info?: {
                                      /** @description whether the job can be cancelled after startup */
                                      cancellable?: boolean | null;
                                      /** @description whether the job is cancelled */
                                      is_cancelled?: boolean | null;
                                      /** @description The user UID who requested the cancellation */
                                      user_uid?: string | null;
                                      /**
                                       * Format: date-time
                                       * @description The time of cancellation
                                       */
                                      cancel_time?: string | null;
                                  };
                                  /** @description Progress details for each step of the job */
                                  steps?: {
                                      /** @description Status message */
                                      message?: string | null;
                                      /** @description The index of the step within the job */
                                      index?: number;
                                      /**
                                       * Format: float
                                       * @description Step progress from 0 to 100
                                       */
                                      progress?: number;
                                      /** @description Step state */
                                      state?: string;
                                      /** @description Step name */
                                      step_name?: string;
                                      /**
                                       * Format: float
                                       * @description Step duration in seconds
                                       */
                                      duration?: number | null;
                                      /** @description Step warning message */
                                      warning?: string | null;
                                  }[];
                                  /**
                                   * Format: date-time
                                   * @description Start time of the job
                                   */
                                  start_time?: string | null;
                                  /**
                                   * Format: date-time
                                   * @description End time of the job
                                   */
                                  end_time?: string | null;
                                  /** @description The state of the job */
                                  state?: string;
                                  /**
                                   * @description Type of the job.
                                   * @enum {string}
                                   */
                                  type?: 'export_dataset';
                                  /**
                                   * Metadata of `export_dataset` job
                                   * @description Information about the exported dataset
                                   */
                                  metadata?: {
                                      /** @description Information about the project to export */
                                      project?: {
                                          /** @description ID of the project */
                                          id?: string;
                                          /** @description Name of the project */
                                          name?: string;
                                          /**
                                           * @description Type name of the project
                                           * @enum {string}
                                           */
                                          type?:
                                              | 'classification'
                                              | 'classification_hierarchical'
                                              | 'detection'
                                              | 'segmentation'
                                              | 'instance_segmentation'
                                              | 'anomaly'
                                              | 'detection_oriented'
                                              | 'detection_classification'
                                              | 'detection_segmentation'
                                              | 'keypoint_detection';
                                      };
                                      /** @description Thd dataset information to be exported */
                                      dataset?: {
                                          /** @description ID of the dataset storage */
                                          id?: string;
                                          /** @description Name of the dataset storage */
                                          name?: string;
                                      };
                                      /**
                                       * @description Format of the dataset to be exported
                                       * @enum {string}
                                       */
                                      export_format?: 'voc' | 'coco' | 'yolo' | 'datumaro';
                                      /** @description URL to download the prepared dataset */
                                      download_url?: string;
                                  };
                              }
                        )[];
                        /** @description Jobs count information for each job state */
                        jobs_count?: {
                            /** @description Number of scheduled jobs */
                            n_scheduled_jobs?: number;
                            /** @description Number of running jobs */
                            n_running_jobs?: number;
                            /** @description Number of finished jobs */
                            n_finished_jobs?: number;
                            /** @description Number of failed jobs */
                            n_failed_jobs?: number;
                            /** @description Number of cancelled jobs */
                            n_cancelled_jobs?: number;
                        };
                        /** @description URL to the next jobs page */
                        next_page?: string;
                    };
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    GetJob: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the job of interest */
                job_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Information successfully retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json':
                        | {
                              /** @description Name of the job */
                              name?: string;
                              /** @description The time at which the job was created */
                              creation_time?: string;
                              /**
                               * @description Mongo ID of the object
                               * @example 60d31793d5f1fb7e6e3c1a4c
                               */
                              id?: string;
                              /** @description Identifier of the user who submitted the job */
                              author?: string;
                              /** @description Information detailing the cancellation status of the job */
                              cancellation_info?: {
                                  /** @description whether the job can be cancelled after startup */
                                  cancellable?: boolean | null;
                                  /** @description whether the job is cancelled */
                                  is_cancelled?: boolean | null;
                                  /** @description The user UID who requested the cancellation */
                                  user_uid?: string | null;
                                  /**
                                   * Format: date-time
                                   * @description The time of cancellation
                                   */
                                  cancel_time?: string | null;
                              };
                              /** @description Progress details for each step of the job */
                              steps?: {
                                  /** @description Status message */
                                  message?: string | null;
                                  /** @description The index of the step within the job */
                                  index?: number;
                                  /**
                                   * Format: float
                                   * @description Step progress from 0 to 100
                                   */
                                  progress?: number;
                                  /** @description Step state */
                                  state?: string;
                                  /** @description Step name */
                                  step_name?: string;
                                  /**
                                   * Format: float
                                   * @description Step duration in seconds
                                   */
                                  duration?: number | null;
                                  /** @description Step warning message */
                                  warning?: string | null;
                              }[];
                              /**
                               * Format: date-time
                               * @description Start time of the job
                               */
                              start_time?: string | null;
                              /**
                               * Format: date-time
                               * @description End time of the job
                               */
                              end_time?: string | null;
                              /** @description The state of the job */
                              state?: string;
                              /**
                               * @description Type of the job.
                               * @enum {string}
                               */
                              type?: 'train';
                              /**
                               * Metadata of train job
                               * @description Additional information associated with the train job
                               */
                              metadata?: {
                                  /** @description Information about the task associated with the job, if any */
                                  task?: {
                                      /** @description Name of the task */
                                      name?: string;
                                      /** @description Identifier of the model template used by the task */
                                      model_template_id?: string;
                                      /** @description Neural network architecture used for the model */
                                      model_architecture?: string;
                                      /**
                                       * @description Mongo ID of the object
                                       * @example 60d31793d5f1fb7e6e3c1a4c
                                       */
                                      dataset_storage_id?: string;
                                      /**
                                       * @description Mongo ID of the object
                                       * @example 60d31793d5f1fb7e6e3c1a4c
                                       */
                                      task_id?: string;
                                  };
                                  /** @description Information about the project associated with the job */
                                  project?: {
                                      /**
                                       * @description Mongo ID of the object
                                       * @example 60d31793d5f1fb7e6e3c1a4c
                                       */
                                      id?: string;
                                      /** @description Name of the project */
                                      name?: string;
                                  };
                                  /** @description Information about the trained model */
                                  trained_model?: {
                                      /**
                                       * @description Mongo ID of the object
                                       * @example 60d31793d5f1fb7e6e3c1a4c
                                       */
                                      model_storage_id?: string;
                                      /**
                                       * @description Mongo ID of the object
                                       * @example 60d31793d5f1fb7e6e3c1a4c
                                       */
                                      model_id?: string;
                                      /** @description Whether the model became the active one after training */
                                      model_activated?: boolean;
                                  };
                              };
                          }
                        | {
                              /** @description Name of the job */
                              name?: string;
                              /** @description The time at which the job was created */
                              creation_time?: string;
                              /**
                               * @description Mongo ID of the object
                               * @example 60d31793d5f1fb7e6e3c1a4c
                               */
                              id?: string;
                              /** @description Identifier of the user who submitted the job */
                              author?: string;
                              /** @description Information detailing the cancellation status of the job */
                              cancellation_info?: {
                                  /** @description whether the job can be cancelled after startup */
                                  cancellable?: boolean | null;
                                  /** @description whether the job is cancelled */
                                  is_cancelled?: boolean | null;
                                  /** @description The user UID who requested the cancellation */
                                  user_uid?: string | null;
                                  /**
                                   * Format: date-time
                                   * @description The time of cancellation
                                   */
                                  cancel_time?: string | null;
                              };
                              /** @description Progress details for each step of the job */
                              steps?: {
                                  /** @description Status message */
                                  message?: string | null;
                                  /** @description The index of the step within the job */
                                  index?: number;
                                  /**
                                   * Format: float
                                   * @description Step progress from 0 to 100
                                   */
                                  progress?: number;
                                  /** @description Step state */
                                  state?: string;
                                  /** @description Step name */
                                  step_name?: string;
                                  /**
                                   * Format: float
                                   * @description Step duration in seconds
                                   */
                                  duration?: number | null;
                                  /** @description Step warning message */
                                  warning?: string | null;
                              }[];
                              /**
                               * Format: date-time
                               * @description Start time of the job
                               */
                              start_time?: string | null;
                              /**
                               * Format: date-time
                               * @description End time of the job
                               */
                              end_time?: string | null;
                              /** @description The state of the job */
                              state?: string;
                              /**
                               * @description Type of the job.
                               * @enum {string}
                               */
                              type?: 'optimize_pot';
                              /**
                               * Metadata of optimize job
                               * @description Additional information associated with the optimize job
                               */
                              metadata?: {
                                  /** @description Information about the task associated with the job, if any */
                                  task?: {
                                      /** @description Name of the task */
                                      name?: string;
                                      /** @description Identifier of the model template used by the task */
                                      model_template_id?: string;
                                      /** @description Neural network architecture used for the model */
                                      model_architecture?: string;
                                      /**
                                       * @description Mongo ID of the object
                                       * @example 60d31793d5f1fb7e6e3c1a4c
                                       */
                                      dataset_storage_id?: string;
                                      /**
                                       * @description Mongo ID of the object
                                       * @example 60d31793d5f1fb7e6e3c1a4c
                                       */
                                      task_id?: string;
                                  };
                                  /** @description Information about the project associated with the job */
                                  project?: {
                                      /**
                                       * @description Mongo ID of the object
                                       * @example 60d31793d5f1fb7e6e3c1a4c
                                       */
                                      id?: string;
                                      /** @description Name of the project */
                                      name?: string;
                                  };
                                  /**
                                   * @description Mongo ID of the object
                                   * @example 60d31793d5f1fb7e6e3c1a4c
                                   */
                                  model_storage_id?: string;
                                  /**
                                   * @description Type of optimization
                                   * @enum {string}
                                   */
                                  optimization_type?: 'POT';
                                  /**
                                   * @description Mongo ID of the object
                                   * @example 60d31793d5f1fb7e6e3c1a4c
                                   */
                                  base_model_id?: string;
                                  /**
                                   * @description Mongo ID of the object
                                   * @example 60d31793d5f1fb7e6e3c1a4c
                                   */
                                  optimized_model_id?: string;
                              };
                          }
                        | {
                              /** @description Name of the job */
                              name?: string;
                              /** @description The time at which the job was created */
                              creation_time?: string;
                              /**
                               * @description Mongo ID of the object
                               * @example 60d31793d5f1fb7e6e3c1a4c
                               */
                              id?: string;
                              /** @description Identifier of the user who submitted the job */
                              author?: string;
                              /** @description Information detailing the cancellation status of the job */
                              cancellation_info?: {
                                  /** @description whether the job can be cancelled after startup */
                                  cancellable?: boolean | null;
                                  /** @description whether the job is cancelled */
                                  is_cancelled?: boolean | null;
                                  /** @description The user UID who requested the cancellation */
                                  user_uid?: string | null;
                                  /**
                                   * Format: date-time
                                   * @description The time of cancellation
                                   */
                                  cancel_time?: string | null;
                              };
                              /** @description Progress details for each step of the job */
                              steps?: {
                                  /** @description Status message */
                                  message?: string | null;
                                  /** @description The index of the step within the job */
                                  index?: number;
                                  /**
                                   * Format: float
                                   * @description Step progress from 0 to 100
                                   */
                                  progress?: number;
                                  /** @description Step state */
                                  state?: string;
                                  /** @description Step name */
                                  step_name?: string;
                                  /**
                                   * Format: float
                                   * @description Step duration in seconds
                                   */
                                  duration?: number | null;
                                  /** @description Step warning message */
                                  warning?: string | null;
                              }[];
                              /**
                               * Format: date-time
                               * @description Start time of the job
                               */
                              start_time?: string | null;
                              /**
                               * Format: date-time
                               * @description End time of the job
                               */
                              end_time?: string | null;
                              /** @description The state of the job */
                              state?: string;
                              /**
                               * @description Type of the job.
                               * @enum {string}
                               */
                              type?: 'test';
                              /**
                               * Metadata of train/optimize/test job
                               * @description Additional information associated with the train/optimize/test job
                               */
                              metadata?: {
                                  /** @description Information about the task associated with the job, if any */
                                  task?: {
                                      /** @description Name of the task */
                                      name?: string;
                                      /** @description Identifier of the model template used by the task */
                                      model_template_id?: string;
                                      /** @description Neural network architecture used for the model */
                                      model_architecture?: string;
                                      /**
                                       * @description Mongo ID of the object
                                       * @example 60d31793d5f1fb7e6e3c1a4c
                                       */
                                      dataset_storage_id?: string;
                                      /**
                                       * @description Mongo ID of the object
                                       * @example 60d31793d5f1fb7e6e3c1a4c
                                       */
                                      task_id?: string;
                                  };
                                  /** @description Information about the test associated with the job, if any */
                                  test?: {
                                      /** @description Identifier of the model template used by the task */
                                      model_template_id?: string;
                                      /** @description Neural network architecture used for the model */
                                      model_architecture?: string;
                                      model?: unknown;
                                      /** @description Array of datasets */
                                      datasets?: {
                                          /**
                                           * @description Mongo ID of the object
                                           * @example 60d31793d5f1fb7e6e3c1a4c
                                           */
                                          id?: string;
                                          /** @description boolean showing whether the dataset is deleted */
                                          is_deleted?: boolean;
                                          /** @description Name of the dataset */
                                          name?: string;
                                          /**
                                           * Format: int32
                                           * @description Number of images in the dataset
                                           */
                                          n_images?: number;
                                          /**
                                           * Format: int32
                                           * @description Number of frames in the dataset
                                           */
                                          n_frames?: number;
                                          /**
                                           * Format: int32
                                           * @description Number of samples in the dataset
                                           */
                                          n_samples?: number;
                                      }[];
                                  };
                                  /** @description Information about the project associated with the job */
                                  project?: {
                                      /**
                                       * @description Mongo ID of the object
                                       * @example 60d31793d5f1fb7e6e3c1a4c
                                       */
                                      id?: string;
                                      /** @description Name of the project */
                                      name?: string;
                                  };
                              };
                          }
                        | {
                              /** @description Name of the job */
                              name?: string;
                              /** @description The time at which the job was created */
                              creation_time?: string;
                              /**
                               * @description Mongo ID of the object
                               * @example 60d31793d5f1fb7e6e3c1a4c
                               */
                              id?: string;
                              /** @description Identifier of the user who submitted the job */
                              author?: string;
                              /** @description Information detailing the cancellation status of the job */
                              cancellation_info?: {
                                  /** @description whether the job can be cancelled after startup */
                                  cancellable?: boolean | null;
                                  /** @description whether the job is cancelled */
                                  is_cancelled?: boolean | null;
                                  /** @description The user UID who requested the cancellation */
                                  user_uid?: string | null;
                                  /**
                                   * Format: date-time
                                   * @description The time of cancellation
                                   */
                                  cancel_time?: string | null;
                              };
                              /** @description Progress details for each step of the job */
                              steps?: {
                                  /** @description Status message */
                                  message?: string | null;
                                  /** @description The index of the step within the job */
                                  index?: number;
                                  /**
                                   * Format: float
                                   * @description Step progress from 0 to 100
                                   */
                                  progress?: number;
                                  /** @description Step state */
                                  state?: string;
                                  /** @description Step name */
                                  step_name?: string;
                                  /**
                                   * Format: float
                                   * @description Step duration in seconds
                                   */
                                  duration?: number | null;
                                  /** @description Step warning message */
                                  warning?: string | null;
                              }[];
                              /**
                               * Format: date-time
                               * @description Start time of the job
                               */
                              start_time?: string | null;
                              /**
                               * Format: date-time
                               * @description End time of the job
                               */
                              end_time?: string | null;
                              /** @description The state of the job */
                              state?: string;
                              /**
                               * @description Type of the job.
                               * @enum {string}
                               */
                              type?: 'export_dataset';
                              /**
                               * Metadata of `export_dataset` job
                               * @description Information about the exported dataset
                               */
                              metadata?: {
                                  /** @description Information about the project to export */
                                  project?: {
                                      /** @description ID of the project */
                                      id?: string;
                                      /** @description Name of the project */
                                      name?: string;
                                      /**
                                       * @description Type name of the project
                                       * @enum {string}
                                       */
                                      type?:
                                          | 'classification'
                                          | 'classification_hierarchical'
                                          | 'detection'
                                          | 'segmentation'
                                          | 'instance_segmentation'
                                          | 'anomaly'
                                          | 'detection_oriented'
                                          | 'detection_classification'
                                          | 'detection_segmentation'
                                          | 'keypoint_detection';
                                  };
                                  /** @description Thd dataset information to be exported */
                                  dataset?: {
                                      /** @description ID of the dataset storage */
                                      id?: string;
                                      /** @description Name of the dataset storage */
                                      name?: string;
                                  };
                                  /**
                                   * @description Format of the dataset to be exported
                                   * @enum {string}
                                   */
                                  export_format?: 'voc' | 'coco' | 'yolo' | 'datumaro';
                                  /** @description URL to download the prepared dataset */
                                  download_url?: string;
                              };
                          }
                        | {
                              /** @description Name of the job */
                              name?: string;
                              /** @description The time at which the job was created */
                              creation_time?: string;
                              /**
                               * @description Mongo ID of the object
                               * @example 60d31793d5f1fb7e6e3c1a4c
                               */
                              id?: string;
                              /** @description Identifier of the user who submitted the job */
                              author?: string;
                              /** @description Information detailing the cancellation status of the job */
                              cancellation_info?: {
                                  /** @description whether the job can be cancelled after startup */
                                  cancellable?: boolean | null;
                                  /** @description whether the job is cancelled */
                                  is_cancelled?: boolean | null;
                                  /** @description The user UID who requested the cancellation */
                                  user_uid?: string | null;
                                  /**
                                   * Format: date-time
                                   * @description The time of cancellation
                                   */
                                  cancel_time?: string | null;
                              };
                              /** @description Progress details for each step of the job */
                              steps?: {
                                  /** @description Status message */
                                  message?: string | null;
                                  /** @description The index of the step within the job */
                                  index?: number;
                                  /**
                                   * Format: float
                                   * @description Step progress from 0 to 100
                                   */
                                  progress?: number;
                                  /** @description Step state */
                                  state?: string;
                                  /** @description Step name */
                                  step_name?: string;
                                  /**
                                   * Format: float
                                   * @description Step duration in seconds
                                   */
                                  duration?: number | null;
                                  /** @description Step warning message */
                                  warning?: string | null;
                              }[];
                              /**
                               * Format: date-time
                               * @description Start time of the job
                               */
                              start_time?: string | null;
                              /**
                               * Format: date-time
                               * @description End time of the job
                               */
                              end_time?: string | null;
                              /** @description The state of the job */
                              state?: string;
                              /**
                               * @description Type of the job.
                               * @enum {string}
                               */
                              type?: 'prepare_import_to_new_project';
                              /**
                               * Metadata of `prepare_import_to_new_project` job
                               * @description Supported project types and warnings
                               */
                              metadata?: {
                                  /** @description ID of the uploaded dataset file to be imported */
                                  file_id?: string;
                                  /** @description Warnings to import dataset to specific domain */
                                  warnings?: {
                                      /**
                                       * @description Type of the warning
                                       * @enum {string}
                                       */
                                      type: 'error' | 'warning';
                                      /**
                                       * @description Name of the warning
                                       * @example Missing expected annotation type for classification domain
                                       */
                                      name: string;
                                      /** @description Detailed description of the warning */
                                      description: string;
                                      /** @description How to handle the warning */
                                      resolve_strategy?: string;
                                      /**
                                       * Format: int32
                                       * @description Number of affected images
                                       */
                                      affected_images?: number;
                                  }[];
                                  /** @description Supported project types and corresponding labels */
                                  supported_project_types?: {
                                      /**
                                       * @description Project type name
                                       * @enum {string}
                                       */
                                      project_type:
                                          | 'classification'
                                          | 'classification_hierarchical'
                                          | 'detection'
                                          | 'segmentation'
                                          | 'instance_segmentation'
                                          | 'anomaly'
                                          | 'detection_oriented'
                                          | 'detection_classification'
                                          | 'detection_segmentation'
                                          | 'keypoint_detection';
                                      pipeline: {
                                          connections: {
                                              /** @description Source task name */
                                              from: string;
                                              /** @description Target task name */
                                              to: string;
                                          }[];
                                          tasks: {
                                              /** @description Task name */
                                              title: string;
                                              /**
                                               * @description OTX Task type name in lowercase
                                               * @enum {string}
                                               */
                                              task_type:
                                                  | 'dataset'
                                                  | 'classification'
                                                  | 'segmentation'
                                                  | 'detection'
                                                  | 'crop'
                                                  | 'instance_segmentation'
                                                  | 'keypoint_detection'
                                                  | 'anomaly'
                                                  | 'rotated_detection';
                                              labels: {
                                                  /** @description Label name */
                                                  name: string;
                                                  /** @description Label group name */
                                                  group?: string;
                                                  /** @description Label parent name */
                                                  parent?: string;
                                              }[];
                                          }[];
                                      };
                                  }[];
                              };
                          }
                        | {
                              /** @description Name of the job */
                              name?: string;
                              /** @description The time at which the job was created */
                              creation_time?: string;
                              /**
                               * @description Mongo ID of the object
                               * @example 60d31793d5f1fb7e6e3c1a4c
                               */
                              id?: string;
                              /** @description Identifier of the user who submitted the job */
                              author?: string;
                              /** @description Information detailing the cancellation status of the job */
                              cancellation_info?: {
                                  /** @description whether the job can be cancelled after startup */
                                  cancellable?: boolean | null;
                                  /** @description whether the job is cancelled */
                                  is_cancelled?: boolean | null;
                                  /** @description The user UID who requested the cancellation */
                                  user_uid?: string | null;
                                  /**
                                   * Format: date-time
                                   * @description The time of cancellation
                                   */
                                  cancel_time?: string | null;
                              };
                              /** @description Progress details for each step of the job */
                              steps?: {
                                  /** @description Status message */
                                  message?: string | null;
                                  /** @description The index of the step within the job */
                                  index?: number;
                                  /**
                                   * Format: float
                                   * @description Step progress from 0 to 100
                                   */
                                  progress?: number;
                                  /** @description Step state */
                                  state?: string;
                                  /** @description Step name */
                                  step_name?: string;
                                  /**
                                   * Format: float
                                   * @description Step duration in seconds
                                   */
                                  duration?: number | null;
                                  /** @description Step warning message */
                                  warning?: string | null;
                              }[];
                              /**
                               * Format: date-time
                               * @description Start time of the job
                               */
                              start_time?: string | null;
                              /**
                               * Format: date-time
                               * @description End time of the job
                               */
                              end_time?: string | null;
                              /** @description The state of the job */
                              state?: string;
                              /**
                               * @description Type of the job.
                               * @enum {string}
                               */
                              type?: 'perform_import_to_new_project';
                              /**
                               * Metadata of `perform_import_to_new_project` job
                               * @description Created project ID
                               */
                              metadata?: {
                                  /** @description ID of the uploaded dataset file to be imported */
                                  file_id?: string;
                                  /** @description Information about the project to create */
                                  project?: {
                                      id?: string;
                                      name?: string;
                                  };
                                  /**
                                   * @description Mongo ID of the object
                                   * @example 60d31793d5f1fb7e6e3c1a4c
                                   */
                                  project_id?: string;
                              };
                          }
                        | {
                              /** @description Name of the job */
                              name?: string;
                              /** @description The time at which the job was created */
                              creation_time?: string;
                              /**
                               * @description Mongo ID of the object
                               * @example 60d31793d5f1fb7e6e3c1a4c
                               */
                              id?: string;
                              /** @description Identifier of the user who submitted the job */
                              author?: string;
                              /** @description Information detailing the cancellation status of the job */
                              cancellation_info?: {
                                  /** @description whether the job can be cancelled after startup */
                                  cancellable?: boolean | null;
                                  /** @description whether the job is cancelled */
                                  is_cancelled?: boolean | null;
                                  /** @description The user UID who requested the cancellation */
                                  user_uid?: string | null;
                                  /**
                                   * Format: date-time
                                   * @description The time of cancellation
                                   */
                                  cancel_time?: string | null;
                              };
                              /** @description Progress details for each step of the job */
                              steps?: {
                                  /** @description Status message */
                                  message?: string | null;
                                  /** @description The index of the step within the job */
                                  index?: number;
                                  /**
                                   * Format: float
                                   * @description Step progress from 0 to 100
                                   */
                                  progress?: number;
                                  /** @description Step state */
                                  state?: string;
                                  /** @description Step name */
                                  step_name?: string;
                                  /**
                                   * Format: float
                                   * @description Step duration in seconds
                                   */
                                  duration?: number | null;
                                  /** @description Step warning message */
                                  warning?: string | null;
                              }[];
                              /**
                               * Format: date-time
                               * @description Start time of the job
                               */
                              start_time?: string | null;
                              /**
                               * Format: date-time
                               * @description End time of the job
                               */
                              end_time?: string | null;
                              /** @description The state of the job */
                              state?: string;
                              /**
                               * @description Type of the job.
                               * @enum {string}
                               */
                              type?: 'prepare_import_to_existing_project';
                              /**
                               * Metadata of `prepare_import_to_existing_project` job
                               * @description Labels in the dataset and warnings
                               */
                              metadata?: {
                                  /** @description ID of the uploaded dataset file to be imported */
                                  file_id?: string;
                                  /** @description Information about the project where the dataset is imported */
                                  project?: {
                                      /** @description ID of the project */
                                      id?: string;
                                      /** @description Name of the project */
                                      name?: string;
                                      /**
                                       * @description Type name of the project
                                       * @enum {string}
                                       */
                                      type?:
                                          | 'classification'
                                          | 'classification_hierarchical'
                                          | 'detection'
                                          | 'segmentation'
                                          | 'instance_segmentation'
                                          | 'anomaly'
                                          | 'detection_oriented'
                                          | 'detection_classification'
                                          | 'detection_segmentation'
                                          | 'keypoint_detection';
                                  };
                                  /** @description Warnings to import dataset to specific domain */
                                  warnings?: {
                                      /**
                                       * @description Type of the warning
                                       * @enum {string}
                                       */
                                      type: 'error' | 'warning';
                                      /**
                                       * @description Name of the warning
                                       * @example Missing expected annotation type for classification domain
                                       */
                                      name: string;
                                      /** @description Detailed description of the warning */
                                      description: string;
                                      /** @description How to handle the warning */
                                      resolve_strategy?: string;
                                      /**
                                       * Format: int32
                                       * @description Number of affected images
                                       */
                                      affected_images?: number;
                                  }[];
                                  /** @description Label names in the dataset */
                                  labels?: string[];
                              };
                          }
                        | {
                              /** @description Name of the job */
                              name?: string;
                              /** @description The time at which the job was created */
                              creation_time?: string;
                              /**
                               * @description Mongo ID of the object
                               * @example 60d31793d5f1fb7e6e3c1a4c
                               */
                              id?: string;
                              /** @description Identifier of the user who submitted the job */
                              author?: string;
                              /** @description Information detailing the cancellation status of the job */
                              cancellation_info?: {
                                  /** @description whether the job can be cancelled after startup */
                                  cancellable?: boolean | null;
                                  /** @description whether the job is cancelled */
                                  is_cancelled?: boolean | null;
                                  /** @description The user UID who requested the cancellation */
                                  user_uid?: string | null;
                                  /**
                                   * Format: date-time
                                   * @description The time of cancellation
                                   */
                                  cancel_time?: string | null;
                              };
                              /** @description Progress details for each step of the job */
                              steps?: {
                                  /** @description Status message */
                                  message?: string | null;
                                  /** @description The index of the step within the job */
                                  index?: number;
                                  /**
                                   * Format: float
                                   * @description Step progress from 0 to 100
                                   */
                                  progress?: number;
                                  /** @description Step state */
                                  state?: string;
                                  /** @description Step name */
                                  step_name?: string;
                                  /**
                                   * Format: float
                                   * @description Step duration in seconds
                                   */
                                  duration?: number | null;
                                  /** @description Step warning message */
                                  warning?: string | null;
                              }[];
                              /**
                               * Format: date-time
                               * @description Start time of the job
                               */
                              start_time?: string | null;
                              /**
                               * Format: date-time
                               * @description End time of the job
                               */
                              end_time?: string | null;
                              /** @description The state of the job */
                              state?: string;
                              /**
                               * @description Type of the job.
                               * @enum {string}
                               */
                              type?: 'perform_import_to_existing_project';
                              /**
                               * Metadata of `perform_import_to_existing_project` job
                               * @description Imported dataset information
                               */
                              metadata?: {
                                  /** @description ID of the uploaded dataset file to be imported */
                                  file_id?: string;
                                  /** @description Information about the project where the dataset is imported */
                                  project?: {
                                      /** @description ID of the project */
                                      id?: string;
                                      /** @description Name of the project */
                                      name?: string;
                                      /**
                                       * @description Type name of the project
                                       * @enum {string}
                                       */
                                      type?:
                                          | 'classification'
                                          | 'classification_hierarchical'
                                          | 'detection'
                                          | 'segmentation'
                                          | 'instance_segmentation'
                                          | 'anomaly'
                                          | 'detection_oriented'
                                          | 'detection_classification'
                                          | 'detection_segmentation'
                                          | 'keypoint_detection';
                                  };
                                  /** @description The dataset information for importing the uploaded dataset file */
                                  dataset?: {
                                      /**
                                       * @description Mongo ID of the object
                                       * @example 60d31793d5f1fb7e6e3c1a4c
                                       */
                                      id?: string;
                                      /** @description Name of the dataset storage */
                                      name?: string;
                                      /** @description Whether the dataset will be used for training or not */
                                      use_for_training?: boolean;
                                      /**
                                       * @description The time at which the dataset was created
                                       * @example 2024-03-05T06:34:32.332000+00:00
                                       */
                                      creation_time?: string;
                                  };
                              };
                          }
                        | {
                              /** @description Name of the job */
                              name?: string;
                              /** @description The time at which the job was created */
                              creation_time?: string;
                              /**
                               * @description Mongo ID of the object
                               * @example 60d31793d5f1fb7e6e3c1a4c
                               */
                              id?: string;
                              /** @description Identifier of the user who submitted the job */
                              author?: string;
                              /** @description Information detailing the cancellation status of the job */
                              cancellation_info?: {
                                  /** @description whether the job can be cancelled after startup */
                                  cancellable?: boolean | null;
                                  /** @description whether the job is cancelled */
                                  is_cancelled?: boolean | null;
                                  /** @description The user UID who requested the cancellation */
                                  user_uid?: string | null;
                                  /**
                                   * Format: date-time
                                   * @description The time of cancellation
                                   */
                                  cancel_time?: string | null;
                              };
                              /** @description Progress details for each step of the job */
                              steps?: {
                                  /** @description Status message */
                                  message?: string | null;
                                  /** @description The index of the step within the job */
                                  index?: number;
                                  /**
                                   * Format: float
                                   * @description Step progress from 0 to 100
                                   */
                                  progress?: number;
                                  /** @description Step state */
                                  state?: string;
                                  /** @description Step name */
                                  step_name?: string;
                                  /**
                                   * Format: float
                                   * @description Step duration in seconds
                                   */
                                  duration?: number | null;
                                  /** @description Step warning message */
                                  warning?: string | null;
                              }[];
                              /**
                               * Format: date-time
                               * @description Start time of the job
                               */
                              start_time?: string | null;
                              /**
                               * Format: date-time
                               * @description End time of the job
                               */
                              end_time?: string | null;
                              /** @description The state of the job */
                              state?: string;
                              /**
                               * @description Type of the job.
                               * @enum {string}
                               */
                              type?: 'export_project';
                              /**
                               * Metadata of `export_project` job
                               * @description Information about the project export operation
                               */
                              metadata?: {
                                  /** @description Information about the project being export */
                                  project?: {
                                      /** @description ID of the project */
                                      id?: string;
                                      /** @description Name of the project */
                                      name?: string;
                                  };
                                  /** @description URL to download the exported project archive */
                                  download_url?: string;
                              };
                          }
                        | {
                              /** @description Name of the job */
                              name?: string;
                              /** @description The time at which the job was created */
                              creation_time?: string;
                              /**
                               * @description Mongo ID of the object
                               * @example 60d31793d5f1fb7e6e3c1a4c
                               */
                              id?: string;
                              /** @description Identifier of the user who submitted the job */
                              author?: string;
                              /** @description Information detailing the cancellation status of the job */
                              cancellation_info?: {
                                  /** @description whether the job can be cancelled after startup */
                                  cancellable?: boolean | null;
                                  /** @description whether the job is cancelled */
                                  is_cancelled?: boolean | null;
                                  /** @description The user UID who requested the cancellation */
                                  user_uid?: string | null;
                                  /**
                                   * Format: date-time
                                   * @description The time of cancellation
                                   */
                                  cancel_time?: string | null;
                              };
                              /** @description Progress details for each step of the job */
                              steps?: {
                                  /** @description Status message */
                                  message?: string | null;
                                  /** @description The index of the step within the job */
                                  index?: number;
                                  /**
                                   * Format: float
                                   * @description Step progress from 0 to 100
                                   */
                                  progress?: number;
                                  /** @description Step state */
                                  state?: string;
                                  /** @description Step name */
                                  step_name?: string;
                                  /**
                                   * Format: float
                                   * @description Step duration in seconds
                                   */
                                  duration?: number | null;
                                  /** @description Step warning message */
                                  warning?: string | null;
                              }[];
                              /**
                               * Format: date-time
                               * @description Start time of the job
                               */
                              start_time?: string | null;
                              /**
                               * Format: date-time
                               * @description End time of the job
                               */
                              end_time?: string | null;
                              /** @description The state of the job */
                              state?: string;
                              /**
                               * @description Type of the job.
                               * @enum {string}
                               */
                              type?: 'import_project';
                              /**
                               * Metadata of `import_project` job
                               * @description Information about the project import operation
                               */
                              metadata?: {
                                  /** @description Information about the imported project */
                                  project?: {
                                      /** @description ID of the project */
                                      id?: string;
                                      /** @description Name of the project */
                                      name?: string;
                                  };
                                  /**
                                   * Import project parameters
                                   * @description Parameters of the import request
                                   */
                                  parameters?: {
                                      /** @description ID of the uploaded project zip archive */
                                      file_id?: string;
                                  };
                              };
                          };
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    DeleteJob: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the job of interest */
                job_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Job marked as cancelled with a deletion flag */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    CancelJob: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the job of interest */
                job_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Job marked as cancelled */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
            /** @description Job cannot be cancelled */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    GetFullConfiguration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get full configuration response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Array of configurable parameter objects for the different global (i.e. project-wide) components in the project */
                        global?: {
                            /**
                             * @description Mongo ID of the object
                             * @example 60d31793d5f1fb7e6e3c1a4c
                             */
                            id?: string;
                            /**
                             * @description Type of the configurable parameters. For component parameters the type is always 'CONFIGURABLE_PARAMETERS'.
                             * @enum {string}
                             */
                            type?: 'CONFIGURABLE_PARAMETERS' | 'PARAMETER_GROUP';
                            entity_identifier?:
                                | {
                                      workspace_id?: string;
                                      /**
                                       * @description Mongo ID of the object
                                       * @example 60d31793d5f1fb7e6e3c1a4c
                                       */
                                      project_id?: string;
                                      /**
                                       * @description Mongo ID of the object
                                       * @example 60d31793d5f1fb7e6e3c1a4c
                                       */
                                      task_id?: string;
                                      /** @description Describes the component to which the configurable parameters apply */
                                      component?: string;
                                      /**
                                       * @description Describes the type of the configuration. Set to COMPONENT_PARAMETERS for a configuration that relates to a component.
                                       * @enum {string}
                                       */
                                      type?: 'COMPONENT_PARAMETERS';
                                  }
                                | {
                                      workspace_id?: string;
                                      /**
                                       * @description Mongo ID of the object
                                       * @example 60d31793d5f1fb7e6e3c1a4c
                                       */
                                      model_storage_id?: string;
                                      /**
                                       * @description Describes the type of the configurable parameters. For hyper parameters, type is set to HYPER_PARAMETERS.
                                       * @enum {string}
                                       */
                                      type?: 'HYPER_PARAMETERS';
                                  }
                                | {
                                      workspace_id?: string;
                                      /**
                                       * @description Mongo ID of the object
                                       * @example 60d31793d5f1fb7e6e3c1a4c
                                       */
                                      model_storage_id?: string;
                                      /** @description Name of the hyper parameter group */
                                      group_name?: string;
                                      /**
                                       * @description Describes the type of the component. For hyper parameter groups, type is always set to HYPER_PARAMETER_GROUP
                                       * @enum {string}
                                       */
                                      type?: 'HYPER_PARAMETER_GROUP';
                                  };
                            /**
                             * @description Name of the configuration
                             * @example Subset splitting
                             */
                            header?: string;
                            /**
                             * @description Description of the configuration, indicating which part of the system it controls.
                             * @example These parameters control the splitting of the dataset into training, validation and test set.
                             */
                            description?: string;
                            groups?: {
                                /**
                                 * @description Defines the parameter group
                                 * @example Learning Parameters
                                 */
                                header?: string;
                                /**
                                 * @description Description of the parameter group
                                 * @example Configuration to control training behaviour
                                 */
                                description?: string;
                                /** @enum {string} */
                                type?: 'PARAMETER_GROUP';
                                /** @description Name of the parameter group */
                                name?: string;
                                parameters?: {
                                    /** @description User friendly title for the parameter. */
                                    header?: string;
                                    /** @description User friendly description for what the parameter does. */
                                    description?: string;
                                    /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                    warning?: unknown;
                                    /** @description Value that this parameter currently takes. */
                                    value?: string | number | boolean;
                                    /** @description Default value that should be set for this parameter. */
                                    default_value?: string | number | boolean;
                                    /** @description Name to identify the parameter by in the system. */
                                    name?: string;
                                    /**
                                     * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range.
                                     * @enum {string}
                                     */
                                    template_type?: 'selectable' | 'input';
                                    /**
                                     * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string.
                                     * @enum {string}
                                     */
                                    data_type?: 'float' | 'integer' | 'boolean' | 'string';
                                    /** @description List of values that this parameter can take. Only used for selectable string and selectable float parameters */
                                    options?: (number | string)[];
                                    /**
                                     * Format: float
                                     * @description Minimum value that can be set for this parameter. Only used for numeric parameters.
                                     */
                                    min_value?: number;
                                    /**
                                     * Format: float
                                     * @description Minimum value that can be set for this parameter. Only used for numeric parameters.
                                     */
                                    max_value?: number;
                                    /** @description Not implemented at this moment */
                                    ui_rules?: Record<string, never>;
                                    /** @description Not implemented at this moment. */
                                    editable?: boolean;
                                }[];
                            }[];
                            /** @description Array of configurable parameters */
                            parameters?: (
                                | {
                                      /** @description User friendly title for the configurable boolean. */
                                      header?: string;
                                      /** @description User friendly description for what the boolean does. */
                                      description?: string;
                                      /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                      warning?: unknown;
                                      /** @description Value that this boolean currently takes. */
                                      value?: boolean;
                                      /** @description Default value that should be set for this boolean. */
                                      default_value?: boolean;
                                      /** @description Name to identify the configurable boolean by in the system. */
                                      name?: string;
                                      /**
                                       * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable boolean.
                                       * @enum {string}
                                       */
                                      template_type?: 'input';
                                      /**
                                       * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'boolean' for a configurable boolean.
                                       * @enum {string}
                                       */
                                      data_type?: 'boolean';
                                      /** @description Not implemented at this moment */
                                      ui_rules?: Record<string, never>;
                                      /** @description Not implemented at this moment. */
                                      editable?: boolean;
                                  }
                                | {
                                      /** @description User friendly title for the float. */
                                      header?: string;
                                      /** @description User friendly description for what the float does. */
                                      description?: string;
                                      /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                      warning?: unknown;
                                      /**
                                       * Format: float
                                       * @description Value that this configurable float currently takes.
                                       */
                                      value?: number;
                                      /**
                                       * Format: float
                                       * @description Default value that should be set for this float.
                                       */
                                      default_value?: number;
                                      /** @description Name to identify the configurable float by in the system. */
                                      name?: string;
                                      /**
                                       * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable float.
                                       * @enum {string}
                                       */
                                      template_type?: 'input';
                                      /**
                                       * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a configurable float.
                                       * @enum {string}
                                       */
                                      data_type?: 'float';
                                      /**
                                       * Format: float
                                       * @description Minimum value that can be set for this parameter.
                                       */
                                      min_value?: number;
                                      /**
                                       * Format: float
                                       * @description Minimum value that can be set for this parameter.
                                       */
                                      max_value?: number;
                                      /** @description Not implemented at this moment */
                                      ui_rules?: Record<string, never>;
                                      /** @description Not implemented at this moment. */
                                      editable?: boolean;
                                  }
                                | {
                                      /** @description User friendly title for the integer. */
                                      header?: string;
                                      /** @description User friendly description for what the integer does. */
                                      description?: string;
                                      /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                      warning?: unknown;
                                      /** @description Value that this configurable integer currently takes. */
                                      value?: number;
                                      /** @description Default value that should be set for this integer. */
                                      default_value?: number;
                                      /** @description Name to identify the configurable integer by in the system. */
                                      name?: string;
                                      /**
                                       * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable integer.
                                       * @enum {string}
                                       */
                                      template_type?: 'input';
                                      /**
                                       * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'integer' for a configurable integer.
                                       * @enum {string}
                                       */
                                      data_type?: 'integer';
                                      /** @description Minimum value that can be set for this parameter. */
                                      min_value?: number;
                                      /** @description Minimum value that can be set for this parameter. */
                                      max_value?: number;
                                      /** @description Not implemented at this moment */
                                      ui_rules?: Record<string, never>;
                                      /** @description Not implemented at this moment. */
                                      editable?: boolean;
                                  }
                                | {
                                      /** @description User friendly title for the selectable string. */
                                      header?: string;
                                      /** @description User friendly description for what the selectable string parameter does. */
                                      description?: string;
                                      /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                      warning?: unknown;
                                      /** @description Value that this selectable string currently takes. */
                                      value?: string;
                                      /** @description Default value that should be set for this selectable string. */
                                      default_value?: string;
                                      /** @description Name to identify the selectable string parameter by in the system. */
                                      name?: string;
                                      /**
                                       * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable string parameter.
                                       * @enum {string}
                                       */
                                      template_type?: 'selectable';
                                      /**
                                       * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'string' for a selectable string parameter.
                                       * @enum {string}
                                       */
                                      data_type?: 'string';
                                      /** @description List of values that this selectable string can take. */
                                      options?: string[];
                                      /** @description Not implemented at this moment */
                                      ui_rules?: Record<string, never>;
                                      /** @description Not implemented at this moment. */
                                      editable?: boolean;
                                  }
                                | {
                                      /** @description User friendly title for the selectable. */
                                      header?: string;
                                      /** @description User friendly description for what the selectable parameter does. */
                                      description?: string;
                                      /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                      warning?: unknown;
                                      /** @description Value that this selectable currently takes. */
                                      value?: string;
                                      /** @description Default value that should be set for this selectable. */
                                      default_value?: string;
                                      /** @description Name to identify the selectable parameter by in the system. */
                                      name?: string;
                                      /**
                                       * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable parameter.
                                       * @enum {string}
                                       */
                                      template_type?: 'selectable';
                                      /**
                                       * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a selectable float.
                                       * @enum {string}
                                       */
                                      data_type?: 'float';
                                      /** @description List of values that this float selectable can take. */
                                      options?: number[];
                                      /** @description Not implemented at this moment */
                                      ui_rules?: Record<string, never>;
                                      /** @description Not implemented at this moment. */
                                      editable?: boolean;
                                  }
                            )[];
                        }[];
                        /** @description Array of task configurations */
                        task_chain?: {
                            /** @description Array of configurable parameter objects for the different components in the task, as well as the hyper parameters for the current algorithm in the task */
                            components?: (
                                | {
                                      /** @description Name of the hyper parameter group */
                                      name?: string;
                                      /**
                                       * @description ID of the hyper parameter group. The first 24 characters refer to the ID of the underlying HyperParameter object. This is followed by a dash ('-') and the group number (0 to 99) of this particular hyper parameter group.
                                       * @example 60d31793d5f1fb7e6e3c1a4c-1
                                       */
                                      id?: string;
                                      /**
                                       * @description Type of the configurable parameters. For a hyper parameter group the type is always 'PARAMETER_GROUP'.
                                       * @enum {string}
                                       */
                                      type?: 'CONFIGURABLE_PARAMETERS' | 'PARAMETER_GROUP';
                                      entity_identifier?:
                                          | {
                                                workspace_id?: string;
                                                /**
                                                 * @description Mongo ID of the object
                                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                                 */
                                                project_id?: string;
                                                /**
                                                 * @description Mongo ID of the object
                                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                                 */
                                                task_id?: string;
                                                /** @description Describes the component to which the configurable parameters apply */
                                                component?: string;
                                                /**
                                                 * @description Describes the type of the configuration. Set to COMPONENT_PARAMETERS for a configuration that relates to a component.
                                                 * @enum {string}
                                                 */
                                                type?: 'COMPONENT_PARAMETERS';
                                            }
                                          | {
                                                workspace_id?: string;
                                                /**
                                                 * @description Mongo ID of the object
                                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                                 */
                                                model_storage_id?: string;
                                                /**
                                                 * @description Describes the type of the configurable parameters. For hyper parameters, type is set to HYPER_PARAMETERS.
                                                 * @enum {string}
                                                 */
                                                type?: 'HYPER_PARAMETERS';
                                            }
                                          | {
                                                workspace_id?: string;
                                                /**
                                                 * @description Mongo ID of the object
                                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                                 */
                                                model_storage_id?: string;
                                                /** @description Name of the hyper parameter group */
                                                group_name?: string;
                                                /**
                                                 * @description Describes the type of the component. For hyper parameter groups, type is always set to HYPER_PARAMETER_GROUP
                                                 * @enum {string}
                                                 */
                                                type?: 'HYPER_PARAMETER_GROUP';
                                            };
                                      /**
                                       * @description The name of the hyper parameter group
                                       * @example Learning parameters
                                       */
                                      header?: string;
                                      /**
                                       * @description Description of the hyper parameter group.
                                       * @example A set of parameters that control the training process.
                                       */
                                      description?: string;
                                      groups?: {
                                          /**
                                           * @description Defines the parameter group
                                           * @example Learning Parameters
                                           */
                                          header?: string;
                                          /**
                                           * @description Description of the parameter group
                                           * @example Configuration to control training behaviour
                                           */
                                          description?: string;
                                          /** @enum {string} */
                                          type?: 'PARAMETER_GROUP';
                                          /** @description Name of the parameter group */
                                          name?: string;
                                          parameters?: {
                                              /** @description User friendly title for the parameter. */
                                              header?: string;
                                              /** @description User friendly description for what the parameter does. */
                                              description?: string;
                                              /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                              warning?: unknown;
                                              /** @description Value that this parameter currently takes. */
                                              value?: string | number | boolean;
                                              /** @description Default value that should be set for this parameter. */
                                              default_value?: string | number | boolean;
                                              /** @description Name to identify the parameter by in the system. */
                                              name?: string;
                                              /**
                                               * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range.
                                               * @enum {string}
                                               */
                                              template_type?: 'selectable' | 'input';
                                              /**
                                               * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string.
                                               * @enum {string}
                                               */
                                              data_type?:
                                                  | 'float'
                                                  | 'integer'
                                                  | 'boolean'
                                                  | 'string';
                                              /** @description List of values that this parameter can take. Only used for selectable string and selectable float parameters */
                                              options?: (number | string)[];
                                              /**
                                               * Format: float
                                               * @description Minimum value that can be set for this parameter. Only used for numeric parameters.
                                               */
                                              min_value?: number;
                                              /**
                                               * Format: float
                                               * @description Minimum value that can be set for this parameter. Only used for numeric parameters.
                                               */
                                              max_value?: number;
                                              /** @description Not implemented at this moment */
                                              ui_rules?: Record<string, never>;
                                              /** @description Not implemented at this moment. */
                                              editable?: boolean;
                                          }[];
                                      }[];
                                      /** @description Array of configurable parameters */
                                      parameters?: (
                                          | {
                                                /** @description User friendly title for the configurable boolean. */
                                                header?: string;
                                                /** @description User friendly description for what the boolean does. */
                                                description?: string;
                                                /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                                warning?: unknown;
                                                /** @description Value that this boolean currently takes. */
                                                value?: boolean;
                                                /** @description Default value that should be set for this boolean. */
                                                default_value?: boolean;
                                                /** @description Name to identify the configurable boolean by in the system. */
                                                name?: string;
                                                /**
                                                 * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable boolean.
                                                 * @enum {string}
                                                 */
                                                template_type?: 'input';
                                                /**
                                                 * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'boolean' for a configurable boolean.
                                                 * @enum {string}
                                                 */
                                                data_type?: 'boolean';
                                                /** @description Not implemented at this moment */
                                                ui_rules?: Record<string, never>;
                                                /** @description Not implemented at this moment. */
                                                editable?: boolean;
                                            }
                                          | {
                                                /** @description User friendly title for the float. */
                                                header?: string;
                                                /** @description User friendly description for what the float does. */
                                                description?: string;
                                                /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                                warning?: unknown;
                                                /**
                                                 * Format: float
                                                 * @description Value that this configurable float currently takes.
                                                 */
                                                value?: number;
                                                /**
                                                 * Format: float
                                                 * @description Default value that should be set for this float.
                                                 */
                                                default_value?: number;
                                                /** @description Name to identify the configurable float by in the system. */
                                                name?: string;
                                                /**
                                                 * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable float.
                                                 * @enum {string}
                                                 */
                                                template_type?: 'input';
                                                /**
                                                 * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a configurable float.
                                                 * @enum {string}
                                                 */
                                                data_type?: 'float';
                                                /**
                                                 * Format: float
                                                 * @description Minimum value that can be set for this parameter.
                                                 */
                                                min_value?: number;
                                                /**
                                                 * Format: float
                                                 * @description Minimum value that can be set for this parameter.
                                                 */
                                                max_value?: number;
                                                /** @description Not implemented at this moment */
                                                ui_rules?: Record<string, never>;
                                                /** @description Not implemented at this moment. */
                                                editable?: boolean;
                                            }
                                          | {
                                                /** @description User friendly title for the integer. */
                                                header?: string;
                                                /** @description User friendly description for what the integer does. */
                                                description?: string;
                                                /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                                warning?: unknown;
                                                /** @description Value that this configurable integer currently takes. */
                                                value?: number;
                                                /** @description Default value that should be set for this integer. */
                                                default_value?: number;
                                                /** @description Name to identify the configurable integer by in the system. */
                                                name?: string;
                                                /**
                                                 * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable integer.
                                                 * @enum {string}
                                                 */
                                                template_type?: 'input';
                                                /**
                                                 * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'integer' for a configurable integer.
                                                 * @enum {string}
                                                 */
                                                data_type?: 'integer';
                                                /** @description Minimum value that can be set for this parameter. */
                                                min_value?: number;
                                                /** @description Minimum value that can be set for this parameter. */
                                                max_value?: number;
                                                /** @description Not implemented at this moment */
                                                ui_rules?: Record<string, never>;
                                                /** @description Not implemented at this moment. */
                                                editable?: boolean;
                                            }
                                          | {
                                                /** @description User friendly title for the selectable string. */
                                                header?: string;
                                                /** @description User friendly description for what the selectable string parameter does. */
                                                description?: string;
                                                /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                                warning?: unknown;
                                                /** @description Value that this selectable string currently takes. */
                                                value?: string;
                                                /** @description Default value that should be set for this selectable string. */
                                                default_value?: string;
                                                /** @description Name to identify the selectable string parameter by in the system. */
                                                name?: string;
                                                /**
                                                 * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable string parameter.
                                                 * @enum {string}
                                                 */
                                                template_type?: 'selectable';
                                                /**
                                                 * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'string' for a selectable string parameter.
                                                 * @enum {string}
                                                 */
                                                data_type?: 'string';
                                                /** @description List of values that this selectable string can take. */
                                                options?: string[];
                                                /** @description Not implemented at this moment */
                                                ui_rules?: Record<string, never>;
                                                /** @description Not implemented at this moment. */
                                                editable?: boolean;
                                            }
                                          | {
                                                /** @description User friendly title for the selectable. */
                                                header?: string;
                                                /** @description User friendly description for what the selectable parameter does. */
                                                description?: string;
                                                /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                                warning?: unknown;
                                                /** @description Value that this selectable currently takes. */
                                                value?: string;
                                                /** @description Default value that should be set for this selectable. */
                                                default_value?: string;
                                                /** @description Name to identify the selectable parameter by in the system. */
                                                name?: string;
                                                /**
                                                 * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable parameter.
                                                 * @enum {string}
                                                 */
                                                template_type?: 'selectable';
                                                /**
                                                 * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a selectable float.
                                                 * @enum {string}
                                                 */
                                                data_type?: 'float';
                                                /** @description List of values that this float selectable can take. */
                                                options?: number[];
                                                /** @description Not implemented at this moment */
                                                ui_rules?: Record<string, never>;
                                                /** @description Not implemented at this moment. */
                                                editable?: boolean;
                                            }
                                      )[];
                                  }
                                | {
                                      /**
                                       * @description Mongo ID of the object
                                       * @example 60d31793d5f1fb7e6e3c1a4c
                                       */
                                      id?: string;
                                      /**
                                       * @description Type of the configurable parameters. For component parameters the type is always 'CONFIGURABLE_PARAMETERS'.
                                       * @enum {string}
                                       */
                                      type?: 'CONFIGURABLE_PARAMETERS' | 'PARAMETER_GROUP';
                                      entity_identifier?:
                                          | {
                                                workspace_id?: string;
                                                /**
                                                 * @description Mongo ID of the object
                                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                                 */
                                                project_id?: string;
                                                /**
                                                 * @description Mongo ID of the object
                                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                                 */
                                                task_id?: string;
                                                /** @description Describes the component to which the configurable parameters apply */
                                                component?: string;
                                                /**
                                                 * @description Describes the type of the configuration. Set to COMPONENT_PARAMETERS for a configuration that relates to a component.
                                                 * @enum {string}
                                                 */
                                                type?: 'COMPONENT_PARAMETERS';
                                            }
                                          | {
                                                workspace_id?: string;
                                                /**
                                                 * @description Mongo ID of the object
                                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                                 */
                                                model_storage_id?: string;
                                                /**
                                                 * @description Describes the type of the configurable parameters. For hyper parameters, type is set to HYPER_PARAMETERS.
                                                 * @enum {string}
                                                 */
                                                type?: 'HYPER_PARAMETERS';
                                            }
                                          | {
                                                workspace_id?: string;
                                                /**
                                                 * @description Mongo ID of the object
                                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                                 */
                                                model_storage_id?: string;
                                                /** @description Name of the hyper parameter group */
                                                group_name?: string;
                                                /**
                                                 * @description Describes the type of the component. For hyper parameter groups, type is always set to HYPER_PARAMETER_GROUP
                                                 * @enum {string}
                                                 */
                                                type?: 'HYPER_PARAMETER_GROUP';
                                            };
                                      /**
                                       * @description Name of the configuration
                                       * @example Subset splitting
                                       */
                                      header?: string;
                                      /**
                                       * @description Description of the configuration, indicating which part of the system it controls.
                                       * @example These parameters control the splitting of the dataset into training, validation and test set.
                                       */
                                      description?: string;
                                      groups?: {
                                          /**
                                           * @description Defines the parameter group
                                           * @example Learning Parameters
                                           */
                                          header?: string;
                                          /**
                                           * @description Description of the parameter group
                                           * @example Configuration to control training behaviour
                                           */
                                          description?: string;
                                          /** @enum {string} */
                                          type?: 'PARAMETER_GROUP';
                                          /** @description Name of the parameter group */
                                          name?: string;
                                          parameters?: {
                                              /** @description User friendly title for the parameter. */
                                              header?: string;
                                              /** @description User friendly description for what the parameter does. */
                                              description?: string;
                                              /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                              warning?: unknown;
                                              /** @description Value that this parameter currently takes. */
                                              value?: string | number | boolean;
                                              /** @description Default value that should be set for this parameter. */
                                              default_value?: string | number | boolean;
                                              /** @description Name to identify the parameter by in the system. */
                                              name?: string;
                                              /**
                                               * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range.
                                               * @enum {string}
                                               */
                                              template_type?: 'selectable' | 'input';
                                              /**
                                               * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string.
                                               * @enum {string}
                                               */
                                              data_type?:
                                                  | 'float'
                                                  | 'integer'
                                                  | 'boolean'
                                                  | 'string';
                                              /** @description List of values that this parameter can take. Only used for selectable string and selectable float parameters */
                                              options?: (number | string)[];
                                              /**
                                               * Format: float
                                               * @description Minimum value that can be set for this parameter. Only used for numeric parameters.
                                               */
                                              min_value?: number;
                                              /**
                                               * Format: float
                                               * @description Minimum value that can be set for this parameter. Only used for numeric parameters.
                                               */
                                              max_value?: number;
                                              /** @description Not implemented at this moment */
                                              ui_rules?: Record<string, never>;
                                              /** @description Not implemented at this moment. */
                                              editable?: boolean;
                                          }[];
                                      }[];
                                      /** @description Array of configurable parameters */
                                      parameters?: (
                                          | {
                                                /** @description User friendly title for the configurable boolean. */
                                                header?: string;
                                                /** @description User friendly description for what the boolean does. */
                                                description?: string;
                                                /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                                warning?: unknown;
                                                /** @description Value that this boolean currently takes. */
                                                value?: boolean;
                                                /** @description Default value that should be set for this boolean. */
                                                default_value?: boolean;
                                                /** @description Name to identify the configurable boolean by in the system. */
                                                name?: string;
                                                /**
                                                 * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable boolean.
                                                 * @enum {string}
                                                 */
                                                template_type?: 'input';
                                                /**
                                                 * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'boolean' for a configurable boolean.
                                                 * @enum {string}
                                                 */
                                                data_type?: 'boolean';
                                                /** @description Not implemented at this moment */
                                                ui_rules?: Record<string, never>;
                                                /** @description Not implemented at this moment. */
                                                editable?: boolean;
                                            }
                                          | {
                                                /** @description User friendly title for the float. */
                                                header?: string;
                                                /** @description User friendly description for what the float does. */
                                                description?: string;
                                                /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                                warning?: unknown;
                                                /**
                                                 * Format: float
                                                 * @description Value that this configurable float currently takes.
                                                 */
                                                value?: number;
                                                /**
                                                 * Format: float
                                                 * @description Default value that should be set for this float.
                                                 */
                                                default_value?: number;
                                                /** @description Name to identify the configurable float by in the system. */
                                                name?: string;
                                                /**
                                                 * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable float.
                                                 * @enum {string}
                                                 */
                                                template_type?: 'input';
                                                /**
                                                 * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a configurable float.
                                                 * @enum {string}
                                                 */
                                                data_type?: 'float';
                                                /**
                                                 * Format: float
                                                 * @description Minimum value that can be set for this parameter.
                                                 */
                                                min_value?: number;
                                                /**
                                                 * Format: float
                                                 * @description Minimum value that can be set for this parameter.
                                                 */
                                                max_value?: number;
                                                /** @description Not implemented at this moment */
                                                ui_rules?: Record<string, never>;
                                                /** @description Not implemented at this moment. */
                                                editable?: boolean;
                                            }
                                          | {
                                                /** @description User friendly title for the integer. */
                                                header?: string;
                                                /** @description User friendly description for what the integer does. */
                                                description?: string;
                                                /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                                warning?: unknown;
                                                /** @description Value that this configurable integer currently takes. */
                                                value?: number;
                                                /** @description Default value that should be set for this integer. */
                                                default_value?: number;
                                                /** @description Name to identify the configurable integer by in the system. */
                                                name?: string;
                                                /**
                                                 * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable integer.
                                                 * @enum {string}
                                                 */
                                                template_type?: 'input';
                                                /**
                                                 * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'integer' for a configurable integer.
                                                 * @enum {string}
                                                 */
                                                data_type?: 'integer';
                                                /** @description Minimum value that can be set for this parameter. */
                                                min_value?: number;
                                                /** @description Minimum value that can be set for this parameter. */
                                                max_value?: number;
                                                /** @description Not implemented at this moment */
                                                ui_rules?: Record<string, never>;
                                                /** @description Not implemented at this moment. */
                                                editable?: boolean;
                                            }
                                          | {
                                                /** @description User friendly title for the selectable string. */
                                                header?: string;
                                                /** @description User friendly description for what the selectable string parameter does. */
                                                description?: string;
                                                /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                                warning?: unknown;
                                                /** @description Value that this selectable string currently takes. */
                                                value?: string;
                                                /** @description Default value that should be set for this selectable string. */
                                                default_value?: string;
                                                /** @description Name to identify the selectable string parameter by in the system. */
                                                name?: string;
                                                /**
                                                 * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable string parameter.
                                                 * @enum {string}
                                                 */
                                                template_type?: 'selectable';
                                                /**
                                                 * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'string' for a selectable string parameter.
                                                 * @enum {string}
                                                 */
                                                data_type?: 'string';
                                                /** @description List of values that this selectable string can take. */
                                                options?: string[];
                                                /** @description Not implemented at this moment */
                                                ui_rules?: Record<string, never>;
                                                /** @description Not implemented at this moment. */
                                                editable?: boolean;
                                            }
                                          | {
                                                /** @description User friendly title for the selectable. */
                                                header?: string;
                                                /** @description User friendly description for what the selectable parameter does. */
                                                description?: string;
                                                /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                                warning?: unknown;
                                                /** @description Value that this selectable currently takes. */
                                                value?: string;
                                                /** @description Default value that should be set for this selectable. */
                                                default_value?: string;
                                                /** @description Name to identify the selectable parameter by in the system. */
                                                name?: string;
                                                /**
                                                 * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable parameter.
                                                 * @enum {string}
                                                 */
                                                template_type?: 'selectable';
                                                /**
                                                 * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a selectable float.
                                                 * @enum {string}
                                                 */
                                                data_type?: 'float';
                                                /** @description List of values that this float selectable can take. */
                                                options?: number[];
                                                /** @description Not implemented at this moment */
                                                ui_rules?: Record<string, never>;
                                                /** @description Not implemented at this moment. */
                                                editable?: boolean;
                                            }
                                      )[];
                                  }
                                | {
                                      /**
                                       * @description Mongo ID of the object
                                       * @example 60d31793d5f1fb7e6e3c1a4c
                                       */
                                      id?: string;
                                      entity_identifier?:
                                          | {
                                                workspace_id?: string;
                                                /**
                                                 * @description Mongo ID of the object
                                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                                 */
                                                project_id?: string;
                                                /**
                                                 * @description Mongo ID of the object
                                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                                 */
                                                task_id?: string;
                                                /** @description Describes the component to which the configurable parameters apply */
                                                component?: string;
                                                /**
                                                 * @description Describes the type of the configuration. Set to COMPONENT_PARAMETERS for a configuration that relates to a component.
                                                 * @enum {string}
                                                 */
                                                type?: 'COMPONENT_PARAMETERS';
                                            }
                                          | {
                                                workspace_id?: string;
                                                /**
                                                 * @description Mongo ID of the object
                                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                                 */
                                                model_storage_id?: string;
                                                /**
                                                 * @description Describes the type of the configurable parameters. For hyper parameters, type is set to HYPER_PARAMETERS.
                                                 * @enum {string}
                                                 */
                                                type?: 'HYPER_PARAMETERS';
                                            }
                                          | {
                                                workspace_id?: string;
                                                /**
                                                 * @description Mongo ID of the object
                                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                                 */
                                                model_storage_id?: string;
                                                /** @description Name of the hyper parameter group */
                                                group_name?: string;
                                                /**
                                                 * @description Describes the type of the component. For hyper parameter groups, type is always set to HYPER_PARAMETER_GROUP
                                                 * @enum {string}
                                                 */
                                                type?: 'HYPER_PARAMETER_GROUP';
                                            };
                                      /**
                                       * @description Type of the configurable parameters. For hyper parameters the type is always 'CONFIGURABLE_PARAMETERS'.
                                       * @enum {string}
                                       */
                                      type?: 'CONFIGURABLE_PARAMETERS' | 'PARAMETER_GROUP';
                                      /**
                                       * @description The name of the configuration
                                       * @example Hyper parameters for a segmentation task
                                       */
                                      header?: string;
                                      /**
                                       * @description Description of model to which this configuration belongs
                                       * @example Hyper parameters for a segmentation task
                                       */
                                      description?: string;
                                      groups?: {
                                          /**
                                           * @description Defines the parameter group
                                           * @example Learning Parameters
                                           */
                                          header?: string;
                                          /**
                                           * @description Description of the parameter group
                                           * @example Configuration to control training behaviour
                                           */
                                          description?: string;
                                          /** @enum {string} */
                                          type?: 'PARAMETER_GROUP';
                                          /** @description Name of the parameter group */
                                          name?: string;
                                          parameters?: {
                                              /** @description User friendly title for the parameter. */
                                              header?: string;
                                              /** @description User friendly description for what the parameter does. */
                                              description?: string;
                                              /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                              warning?: unknown;
                                              /** @description Value that this parameter currently takes. */
                                              value?: string | number | boolean;
                                              /** @description Default value that should be set for this parameter. */
                                              default_value?: string | number | boolean;
                                              /** @description Name to identify the parameter by in the system. */
                                              name?: string;
                                              /**
                                               * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range.
                                               * @enum {string}
                                               */
                                              template_type?: 'selectable' | 'input';
                                              /**
                                               * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string.
                                               * @enum {string}
                                               */
                                              data_type?:
                                                  | 'float'
                                                  | 'integer'
                                                  | 'boolean'
                                                  | 'string';
                                              /** @description List of values that this parameter can take. Only used for selectable string and selectable float parameters */
                                              options?: (number | string)[];
                                              /**
                                               * Format: float
                                               * @description Minimum value that can be set for this parameter. Only used for numeric parameters.
                                               */
                                              min_value?: number;
                                              /**
                                               * Format: float
                                               * @description Minimum value that can be set for this parameter. Only used for numeric parameters.
                                               */
                                              max_value?: number;
                                              /** @description Not implemented at this moment */
                                              ui_rules?: Record<string, never>;
                                              /** @description Not implemented at this moment. */
                                              editable?: boolean;
                                          }[];
                                      }[];
                                      /** @description Array of configurable parameters */
                                      parameters?: (
                                          | {
                                                /** @description User friendly title for the configurable boolean. */
                                                header?: string;
                                                /** @description User friendly description for what the boolean does. */
                                                description?: string;
                                                /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                                warning?: unknown;
                                                /** @description Value that this boolean currently takes. */
                                                value?: boolean;
                                                /** @description Default value that should be set for this boolean. */
                                                default_value?: boolean;
                                                /** @description Name to identify the configurable boolean by in the system. */
                                                name?: string;
                                                /**
                                                 * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable boolean.
                                                 * @enum {string}
                                                 */
                                                template_type?: 'input';
                                                /**
                                                 * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'boolean' for a configurable boolean.
                                                 * @enum {string}
                                                 */
                                                data_type?: 'boolean';
                                                /** @description Not implemented at this moment */
                                                ui_rules?: Record<string, never>;
                                                /** @description Not implemented at this moment. */
                                                editable?: boolean;
                                            }
                                          | {
                                                /** @description User friendly title for the float. */
                                                header?: string;
                                                /** @description User friendly description for what the float does. */
                                                description?: string;
                                                /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                                warning?: unknown;
                                                /**
                                                 * Format: float
                                                 * @description Value that this configurable float currently takes.
                                                 */
                                                value?: number;
                                                /**
                                                 * Format: float
                                                 * @description Default value that should be set for this float.
                                                 */
                                                default_value?: number;
                                                /** @description Name to identify the configurable float by in the system. */
                                                name?: string;
                                                /**
                                                 * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable float.
                                                 * @enum {string}
                                                 */
                                                template_type?: 'input';
                                                /**
                                                 * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a configurable float.
                                                 * @enum {string}
                                                 */
                                                data_type?: 'float';
                                                /**
                                                 * Format: float
                                                 * @description Minimum value that can be set for this parameter.
                                                 */
                                                min_value?: number;
                                                /**
                                                 * Format: float
                                                 * @description Minimum value that can be set for this parameter.
                                                 */
                                                max_value?: number;
                                                /** @description Not implemented at this moment */
                                                ui_rules?: Record<string, never>;
                                                /** @description Not implemented at this moment. */
                                                editable?: boolean;
                                            }
                                          | {
                                                /** @description User friendly title for the integer. */
                                                header?: string;
                                                /** @description User friendly description for what the integer does. */
                                                description?: string;
                                                /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                                warning?: unknown;
                                                /** @description Value that this configurable integer currently takes. */
                                                value?: number;
                                                /** @description Default value that should be set for this integer. */
                                                default_value?: number;
                                                /** @description Name to identify the configurable integer by in the system. */
                                                name?: string;
                                                /**
                                                 * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable integer.
                                                 * @enum {string}
                                                 */
                                                template_type?: 'input';
                                                /**
                                                 * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'integer' for a configurable integer.
                                                 * @enum {string}
                                                 */
                                                data_type?: 'integer';
                                                /** @description Minimum value that can be set for this parameter. */
                                                min_value?: number;
                                                /** @description Minimum value that can be set for this parameter. */
                                                max_value?: number;
                                                /** @description Not implemented at this moment */
                                                ui_rules?: Record<string, never>;
                                                /** @description Not implemented at this moment. */
                                                editable?: boolean;
                                            }
                                          | {
                                                /** @description User friendly title for the selectable string. */
                                                header?: string;
                                                /** @description User friendly description for what the selectable string parameter does. */
                                                description?: string;
                                                /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                                warning?: unknown;
                                                /** @description Value that this selectable string currently takes. */
                                                value?: string;
                                                /** @description Default value that should be set for this selectable string. */
                                                default_value?: string;
                                                /** @description Name to identify the selectable string parameter by in the system. */
                                                name?: string;
                                                /**
                                                 * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable string parameter.
                                                 * @enum {string}
                                                 */
                                                template_type?: 'selectable';
                                                /**
                                                 * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'string' for a selectable string parameter.
                                                 * @enum {string}
                                                 */
                                                data_type?: 'string';
                                                /** @description List of values that this selectable string can take. */
                                                options?: string[];
                                                /** @description Not implemented at this moment */
                                                ui_rules?: Record<string, never>;
                                                /** @description Not implemented at this moment. */
                                                editable?: boolean;
                                            }
                                          | {
                                                /** @description User friendly title for the selectable. */
                                                header?: string;
                                                /** @description User friendly description for what the selectable parameter does. */
                                                description?: string;
                                                /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                                warning?: unknown;
                                                /** @description Value that this selectable currently takes. */
                                                value?: string;
                                                /** @description Default value that should be set for this selectable. */
                                                default_value?: string;
                                                /** @description Name to identify the selectable parameter by in the system. */
                                                name?: string;
                                                /**
                                                 * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable parameter.
                                                 * @enum {string}
                                                 */
                                                template_type?: 'selectable';
                                                /**
                                                 * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a selectable float.
                                                 * @enum {string}
                                                 */
                                                data_type?: 'float';
                                                /** @description List of values that this float selectable can take. */
                                                options?: number[];
                                                /** @description Not implemented at this moment */
                                                ui_rules?: Record<string, never>;
                                                /** @description Not implemented at this moment. */
                                                editable?: boolean;
                                            }
                                      )[];
                                  }
                            )[];
                            /**
                             * @description Mongo ID of the object
                             * @example 60d31793d5f1fb7e6e3c1a4c
                             */
                            task_id?: string;
                            /** @description Title of the task the configuration is connected to */
                            task_title?: string;
                        }[];
                    };
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    SetFullConfiguration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @description Array of configurable parameter objects for the different global (i.e. project-wide) components in the project */
                    global: {
                        /** Component entity identifier */
                        entity_identifier: {
                            workspace_id?: string;
                            /**
                             * @description Mongo ID of the object
                             * @example 60d31793d5f1fb7e6e3c1a4c
                             */
                            project_id?: string;
                            /**
                             * @description Mongo ID of the task
                             * @example 60d31793d5f1fb7e6e3c1a4c
                             */
                            task_id?: string;
                            /**
                             * @description If the configuration is a component configuration, describes the component.
                             * @enum {string}
                             */
                            component:
                                | 'NULL_COMPONENT'
                                | 'SUBSET_MANAGER'
                                | 'DATASET_COUNTER'
                                | 'PROJECT_ACTIVE_LEARNING'
                                | 'TASK_ACTIVE_LEARNING'
                                | 'TASK_NODE'
                                | 'PIPELINE_DATASET_MANAGER';
                            /**
                             * @description Describes the type of the configuration. Set to COMPONENT_PARAMETERS for a configuration that relates to a component.
                             * @enum {string}
                             */
                            type: 'COMPONENT_PARAMETERS';
                        };
                        groups?: {
                            /** @description Name of the parameter group */
                            name: string;
                            /** @description Array of parameters */
                            parameters: {
                                /** @description Value to set the parameter to. */
                                value: string | number | boolean;
                                /** @description Name to identify the parameter by in the system. */
                                name: string;
                            }[];
                        }[];
                        parameters?: {
                            /** @description Value to set the parameter to. */
                            value: string | number | boolean;
                            /** @description Name to identify the parameter by in the system. */
                            name: string;
                        }[];
                    }[];
                    /** @description Array of task configurations */
                    task_chain: {
                        /** @description Array of configurable parameter objects for the different components in the task, as well as the hyper parameters for the current algorithm in the task */
                        components: {
                            entity_identifier:
                                | {
                                      workspace_id?: string;
                                      /**
                                       * @description Mongo ID of the object
                                       * @example 60d31793d5f1fb7e6e3c1a4c
                                       */
                                      project_id?: string;
                                      /**
                                       * @description Mongo ID of the task
                                       * @example 60d31793d5f1fb7e6e3c1a4c
                                       */
                                      task_id?: string;
                                      /**
                                       * @description If the configuration is a component configuration, describes the component.
                                       * @enum {string}
                                       */
                                      component:
                                          | 'NULL_COMPONENT'
                                          | 'SUBSET_MANAGER'
                                          | 'DATASET_COUNTER'
                                          | 'PROJECT_ACTIVE_LEARNING'
                                          | 'TASK_ACTIVE_LEARNING'
                                          | 'TASK_NODE'
                                          | 'PIPELINE_DATASET_MANAGER';
                                      /**
                                       * @description Describes the type of the configuration. Set to COMPONENT_PARAMETERS for a configuration that relates to a component.
                                       * @enum {string}
                                       */
                                      type: 'COMPONENT_PARAMETERS';
                                  }
                                | {
                                      workspace_id?: string;
                                      /**
                                       * @description Mongo ID of the object
                                       * @example 60d31793d5f1fb7e6e3c1a4c
                                       */
                                      model_storage_id: string;
                                      /**
                                       * @description Describes the type of the configurable parameters. For hyper parameters, type is set to HYPER_PARAMETERS.
                                       * @enum {string}
                                       */
                                      type: 'HYPER_PARAMETERS';
                                  }
                                | {
                                      workspace_id?: string;
                                      /**
                                       * @description Mongo ID of the object
                                       * @example 60d31793d5f1fb7e6e3c1a4c
                                       */
                                      model_storage_id: string;
                                      /** @description The name of the hyper parameter group */
                                      group_name: string;
                                      /**
                                       * @description Describes the type of the component. For hyper parameter groups, type is always set to HYPER_PARAMETER_GROUP
                                       * @enum {string}
                                       */
                                      type: 'HYPER_PARAMETER_GROUP';
                                  };
                            groups?: {
                                /** @description Name of the parameter group */
                                name: string;
                                /** @description Array of parameters */
                                parameters: {
                                    /** @description Value to set the parameter to. */
                                    value: string | number | boolean;
                                    /** @description Name to identify the parameter by in the system. */
                                    name: string;
                                }[];
                            }[];
                            parameters?: {
                                /** @description Value to set the parameter to. */
                                value: string | number | boolean;
                                /** @description Name to identify the parameter by in the system. */
                                name: string;
                            }[];
                        }[];
                    }[];
                };
            };
        };
        responses: {
            /** @description Configuration updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
            /** @description Configuration cannot be saved to the server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    GetGlobalConfiguration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get global configuration response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Array of configurable parameter objects for the different global (i.e. project-wide) components in the project */
                        global?: {
                            /**
                             * @description Mongo ID of the object
                             * @example 60d31793d5f1fb7e6e3c1a4c
                             */
                            id?: string;
                            /**
                             * @description Type of the configurable parameters. For component parameters the type is always 'CONFIGURABLE_PARAMETERS'.
                             * @enum {string}
                             */
                            type?: 'CONFIGURABLE_PARAMETERS' | 'PARAMETER_GROUP';
                            entity_identifier?:
                                | {
                                      workspace_id?: string;
                                      /**
                                       * @description Mongo ID of the object
                                       * @example 60d31793d5f1fb7e6e3c1a4c
                                       */
                                      project_id?: string;
                                      /**
                                       * @description Mongo ID of the object
                                       * @example 60d31793d5f1fb7e6e3c1a4c
                                       */
                                      task_id?: string;
                                      /** @description Describes the component to which the configurable parameters apply */
                                      component?: string;
                                      /**
                                       * @description Describes the type of the configuration. Set to COMPONENT_PARAMETERS for a configuration that relates to a component.
                                       * @enum {string}
                                       */
                                      type?: 'COMPONENT_PARAMETERS';
                                  }
                                | {
                                      workspace_id?: string;
                                      /**
                                       * @description Mongo ID of the object
                                       * @example 60d31793d5f1fb7e6e3c1a4c
                                       */
                                      model_storage_id?: string;
                                      /**
                                       * @description Describes the type of the configurable parameters. For hyper parameters, type is set to HYPER_PARAMETERS.
                                       * @enum {string}
                                       */
                                      type?: 'HYPER_PARAMETERS';
                                  }
                                | {
                                      workspace_id?: string;
                                      /**
                                       * @description Mongo ID of the object
                                       * @example 60d31793d5f1fb7e6e3c1a4c
                                       */
                                      model_storage_id?: string;
                                      /** @description Name of the hyper parameter group */
                                      group_name?: string;
                                      /**
                                       * @description Describes the type of the component. For hyper parameter groups, type is always set to HYPER_PARAMETER_GROUP
                                       * @enum {string}
                                       */
                                      type?: 'HYPER_PARAMETER_GROUP';
                                  };
                            /**
                             * @description Name of the configuration
                             * @example Subset splitting
                             */
                            header?: string;
                            /**
                             * @description Description of the configuration, indicating which part of the system it controls.
                             * @example These parameters control the splitting of the dataset into training, validation and test set.
                             */
                            description?: string;
                            groups?: {
                                /**
                                 * @description Defines the parameter group
                                 * @example Learning Parameters
                                 */
                                header?: string;
                                /**
                                 * @description Description of the parameter group
                                 * @example Configuration to control training behaviour
                                 */
                                description?: string;
                                /** @enum {string} */
                                type?: 'PARAMETER_GROUP';
                                /** @description Name of the parameter group */
                                name?: string;
                                parameters?: {
                                    /** @description User friendly title for the parameter. */
                                    header?: string;
                                    /** @description User friendly description for what the parameter does. */
                                    description?: string;
                                    /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                    warning?: unknown;
                                    /** @description Value that this parameter currently takes. */
                                    value?: string | number | boolean;
                                    /** @description Default value that should be set for this parameter. */
                                    default_value?: string | number | boolean;
                                    /** @description Name to identify the parameter by in the system. */
                                    name?: string;
                                    /**
                                     * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range.
                                     * @enum {string}
                                     */
                                    template_type?: 'selectable' | 'input';
                                    /**
                                     * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string.
                                     * @enum {string}
                                     */
                                    data_type?: 'float' | 'integer' | 'boolean' | 'string';
                                    /** @description List of values that this parameter can take. Only used for selectable string and selectable float parameters */
                                    options?: (number | string)[];
                                    /**
                                     * Format: float
                                     * @description Minimum value that can be set for this parameter. Only used for numeric parameters.
                                     */
                                    min_value?: number;
                                    /**
                                     * Format: float
                                     * @description Minimum value that can be set for this parameter. Only used for numeric parameters.
                                     */
                                    max_value?: number;
                                    /** @description Not implemented at this moment */
                                    ui_rules?: Record<string, never>;
                                    /** @description Not implemented at this moment. */
                                    editable?: boolean;
                                }[];
                            }[];
                            /** @description Array of configurable parameters */
                            parameters?: (
                                | {
                                      /** @description User friendly title for the configurable boolean. */
                                      header?: string;
                                      /** @description User friendly description for what the boolean does. */
                                      description?: string;
                                      /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                      warning?: unknown;
                                      /** @description Value that this boolean currently takes. */
                                      value?: boolean;
                                      /** @description Default value that should be set for this boolean. */
                                      default_value?: boolean;
                                      /** @description Name to identify the configurable boolean by in the system. */
                                      name?: string;
                                      /**
                                       * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable boolean.
                                       * @enum {string}
                                       */
                                      template_type?: 'input';
                                      /**
                                       * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'boolean' for a configurable boolean.
                                       * @enum {string}
                                       */
                                      data_type?: 'boolean';
                                      /** @description Not implemented at this moment */
                                      ui_rules?: Record<string, never>;
                                      /** @description Not implemented at this moment. */
                                      editable?: boolean;
                                  }
                                | {
                                      /** @description User friendly title for the float. */
                                      header?: string;
                                      /** @description User friendly description for what the float does. */
                                      description?: string;
                                      /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                      warning?: unknown;
                                      /**
                                       * Format: float
                                       * @description Value that this configurable float currently takes.
                                       */
                                      value?: number;
                                      /**
                                       * Format: float
                                       * @description Default value that should be set for this float.
                                       */
                                      default_value?: number;
                                      /** @description Name to identify the configurable float by in the system. */
                                      name?: string;
                                      /**
                                       * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable float.
                                       * @enum {string}
                                       */
                                      template_type?: 'input';
                                      /**
                                       * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a configurable float.
                                       * @enum {string}
                                       */
                                      data_type?: 'float';
                                      /**
                                       * Format: float
                                       * @description Minimum value that can be set for this parameter.
                                       */
                                      min_value?: number;
                                      /**
                                       * Format: float
                                       * @description Minimum value that can be set for this parameter.
                                       */
                                      max_value?: number;
                                      /** @description Not implemented at this moment */
                                      ui_rules?: Record<string, never>;
                                      /** @description Not implemented at this moment. */
                                      editable?: boolean;
                                  }
                                | {
                                      /** @description User friendly title for the integer. */
                                      header?: string;
                                      /** @description User friendly description for what the integer does. */
                                      description?: string;
                                      /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                      warning?: unknown;
                                      /** @description Value that this configurable integer currently takes. */
                                      value?: number;
                                      /** @description Default value that should be set for this integer. */
                                      default_value?: number;
                                      /** @description Name to identify the configurable integer by in the system. */
                                      name?: string;
                                      /**
                                       * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable integer.
                                       * @enum {string}
                                       */
                                      template_type?: 'input';
                                      /**
                                       * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'integer' for a configurable integer.
                                       * @enum {string}
                                       */
                                      data_type?: 'integer';
                                      /** @description Minimum value that can be set for this parameter. */
                                      min_value?: number;
                                      /** @description Minimum value that can be set for this parameter. */
                                      max_value?: number;
                                      /** @description Not implemented at this moment */
                                      ui_rules?: Record<string, never>;
                                      /** @description Not implemented at this moment. */
                                      editable?: boolean;
                                  }
                                | {
                                      /** @description User friendly title for the selectable string. */
                                      header?: string;
                                      /** @description User friendly description for what the selectable string parameter does. */
                                      description?: string;
                                      /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                      warning?: unknown;
                                      /** @description Value that this selectable string currently takes. */
                                      value?: string;
                                      /** @description Default value that should be set for this selectable string. */
                                      default_value?: string;
                                      /** @description Name to identify the selectable string parameter by in the system. */
                                      name?: string;
                                      /**
                                       * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable string parameter.
                                       * @enum {string}
                                       */
                                      template_type?: 'selectable';
                                      /**
                                       * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'string' for a selectable string parameter.
                                       * @enum {string}
                                       */
                                      data_type?: 'string';
                                      /** @description List of values that this selectable string can take. */
                                      options?: string[];
                                      /** @description Not implemented at this moment */
                                      ui_rules?: Record<string, never>;
                                      /** @description Not implemented at this moment. */
                                      editable?: boolean;
                                  }
                                | {
                                      /** @description User friendly title for the selectable. */
                                      header?: string;
                                      /** @description User friendly description for what the selectable parameter does. */
                                      description?: string;
                                      /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                      warning?: unknown;
                                      /** @description Value that this selectable currently takes. */
                                      value?: string;
                                      /** @description Default value that should be set for this selectable. */
                                      default_value?: string;
                                      /** @description Name to identify the selectable parameter by in the system. */
                                      name?: string;
                                      /**
                                       * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable parameter.
                                       * @enum {string}
                                       */
                                      template_type?: 'selectable';
                                      /**
                                       * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a selectable float.
                                       * @enum {string}
                                       */
                                      data_type?: 'float';
                                      /** @description List of values that this float selectable can take. */
                                      options?: number[];
                                      /** @description Not implemented at this moment */
                                      ui_rules?: Record<string, never>;
                                      /** @description Not implemented at this moment. */
                                      editable?: boolean;
                                  }
                            )[];
                        }[];
                    };
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    SetGlobalConfiguration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @description Array of configurable parameter objects for the different global (i.e. project-wide) components in the project */
                    global: {
                        /** Component entity identifier */
                        entity_identifier: {
                            workspace_id?: string;
                            /**
                             * @description Mongo ID of the object
                             * @example 60d31793d5f1fb7e6e3c1a4c
                             */
                            project_id?: string;
                            /**
                             * @description Mongo ID of the task
                             * @example 60d31793d5f1fb7e6e3c1a4c
                             */
                            task_id?: string;
                            /**
                             * @description If the configuration is a component configuration, describes the component.
                             * @enum {string}
                             */
                            component:
                                | 'NULL_COMPONENT'
                                | 'SUBSET_MANAGER'
                                | 'DATASET_COUNTER'
                                | 'PROJECT_ACTIVE_LEARNING'
                                | 'TASK_ACTIVE_LEARNING'
                                | 'TASK_NODE'
                                | 'PIPELINE_DATASET_MANAGER';
                            /**
                             * @description Describes the type of the configuration. Set to COMPONENT_PARAMETERS for a configuration that relates to a component.
                             * @enum {string}
                             */
                            type: 'COMPONENT_PARAMETERS';
                        };
                        groups?: {
                            /** @description Name of the parameter group */
                            name: string;
                            /** @description Array of parameters */
                            parameters: {
                                /** @description Value to set the parameter to. */
                                value: string | number | boolean;
                                /** @description Name to identify the parameter by in the system. */
                                name: string;
                            }[];
                        }[];
                        parameters?: {
                            /** @description Value to set the parameter to. */
                            value: string | number | boolean;
                            /** @description Name to identify the parameter by in the system. */
                            name: string;
                        }[];
                    }[];
                };
            };
        };
        responses: {
            /** @description Configuration updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
            /** @description Configuration cannot be saved to the server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    GetTaskChainConfiguration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get configuration response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Array of task configurations */
                        task_chain?: {
                            /** @description Array of configurable parameter objects for the different components in the task, as well as the hyper parameters for the current algorithm in the task */
                            components?: (
                                | {
                                      /** @description Name of the hyper parameter group */
                                      name?: string;
                                      /**
                                       * @description ID of the hyper parameter group. The first 24 characters refer to the ID of the underlying HyperParameter object. This is followed by a dash ('-') and the group number (0 to 99) of this particular hyper parameter group.
                                       * @example 60d31793d5f1fb7e6e3c1a4c-1
                                       */
                                      id?: string;
                                      /**
                                       * @description Type of the configurable parameters. For a hyper parameter group the type is always 'PARAMETER_GROUP'.
                                       * @enum {string}
                                       */
                                      type?: 'CONFIGURABLE_PARAMETERS' | 'PARAMETER_GROUP';
                                      entity_identifier?:
                                          | {
                                                workspace_id?: string;
                                                /**
                                                 * @description Mongo ID of the object
                                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                                 */
                                                project_id?: string;
                                                /**
                                                 * @description Mongo ID of the object
                                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                                 */
                                                task_id?: string;
                                                /** @description Describes the component to which the configurable parameters apply */
                                                component?: string;
                                                /**
                                                 * @description Describes the type of the configuration. Set to COMPONENT_PARAMETERS for a configuration that relates to a component.
                                                 * @enum {string}
                                                 */
                                                type?: 'COMPONENT_PARAMETERS';
                                            }
                                          | {
                                                workspace_id?: string;
                                                /**
                                                 * @description Mongo ID of the object
                                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                                 */
                                                model_storage_id?: string;
                                                /**
                                                 * @description Describes the type of the configurable parameters. For hyper parameters, type is set to HYPER_PARAMETERS.
                                                 * @enum {string}
                                                 */
                                                type?: 'HYPER_PARAMETERS';
                                            }
                                          | {
                                                workspace_id?: string;
                                                /**
                                                 * @description Mongo ID of the object
                                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                                 */
                                                model_storage_id?: string;
                                                /** @description Name of the hyper parameter group */
                                                group_name?: string;
                                                /**
                                                 * @description Describes the type of the component. For hyper parameter groups, type is always set to HYPER_PARAMETER_GROUP
                                                 * @enum {string}
                                                 */
                                                type?: 'HYPER_PARAMETER_GROUP';
                                            };
                                      /**
                                       * @description The name of the hyper parameter group
                                       * @example Learning parameters
                                       */
                                      header?: string;
                                      /**
                                       * @description Description of the hyper parameter group.
                                       * @example A set of parameters that control the training process.
                                       */
                                      description?: string;
                                      groups?: {
                                          /**
                                           * @description Defines the parameter group
                                           * @example Learning Parameters
                                           */
                                          header?: string;
                                          /**
                                           * @description Description of the parameter group
                                           * @example Configuration to control training behaviour
                                           */
                                          description?: string;
                                          /** @enum {string} */
                                          type?: 'PARAMETER_GROUP';
                                          /** @description Name of the parameter group */
                                          name?: string;
                                          parameters?: {
                                              /** @description User friendly title for the parameter. */
                                              header?: string;
                                              /** @description User friendly description for what the parameter does. */
                                              description?: string;
                                              /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                              warning?: unknown;
                                              /** @description Value that this parameter currently takes. */
                                              value?: string | number | boolean;
                                              /** @description Default value that should be set for this parameter. */
                                              default_value?: string | number | boolean;
                                              /** @description Name to identify the parameter by in the system. */
                                              name?: string;
                                              /**
                                               * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range.
                                               * @enum {string}
                                               */
                                              template_type?: 'selectable' | 'input';
                                              /**
                                               * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string.
                                               * @enum {string}
                                               */
                                              data_type?:
                                                  | 'float'
                                                  | 'integer'
                                                  | 'boolean'
                                                  | 'string';
                                              /** @description List of values that this parameter can take. Only used for selectable string and selectable float parameters */
                                              options?: (number | string)[];
                                              /**
                                               * Format: float
                                               * @description Minimum value that can be set for this parameter. Only used for numeric parameters.
                                               */
                                              min_value?: number;
                                              /**
                                               * Format: float
                                               * @description Minimum value that can be set for this parameter. Only used for numeric parameters.
                                               */
                                              max_value?: number;
                                              /** @description Not implemented at this moment */
                                              ui_rules?: Record<string, never>;
                                              /** @description Not implemented at this moment. */
                                              editable?: boolean;
                                          }[];
                                      }[];
                                      /** @description Array of configurable parameters */
                                      parameters?: (
                                          | {
                                                /** @description User friendly title for the configurable boolean. */
                                                header?: string;
                                                /** @description User friendly description for what the boolean does. */
                                                description?: string;
                                                /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                                warning?: unknown;
                                                /** @description Value that this boolean currently takes. */
                                                value?: boolean;
                                                /** @description Default value that should be set for this boolean. */
                                                default_value?: boolean;
                                                /** @description Name to identify the configurable boolean by in the system. */
                                                name?: string;
                                                /**
                                                 * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable boolean.
                                                 * @enum {string}
                                                 */
                                                template_type?: 'input';
                                                /**
                                                 * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'boolean' for a configurable boolean.
                                                 * @enum {string}
                                                 */
                                                data_type?: 'boolean';
                                                /** @description Not implemented at this moment */
                                                ui_rules?: Record<string, never>;
                                                /** @description Not implemented at this moment. */
                                                editable?: boolean;
                                            }
                                          | {
                                                /** @description User friendly title for the float. */
                                                header?: string;
                                                /** @description User friendly description for what the float does. */
                                                description?: string;
                                                /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                                warning?: unknown;
                                                /**
                                                 * Format: float
                                                 * @description Value that this configurable float currently takes.
                                                 */
                                                value?: number;
                                                /**
                                                 * Format: float
                                                 * @description Default value that should be set for this float.
                                                 */
                                                default_value?: number;
                                                /** @description Name to identify the configurable float by in the system. */
                                                name?: string;
                                                /**
                                                 * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable float.
                                                 * @enum {string}
                                                 */
                                                template_type?: 'input';
                                                /**
                                                 * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a configurable float.
                                                 * @enum {string}
                                                 */
                                                data_type?: 'float';
                                                /**
                                                 * Format: float
                                                 * @description Minimum value that can be set for this parameter.
                                                 */
                                                min_value?: number;
                                                /**
                                                 * Format: float
                                                 * @description Minimum value that can be set for this parameter.
                                                 */
                                                max_value?: number;
                                                /** @description Not implemented at this moment */
                                                ui_rules?: Record<string, never>;
                                                /** @description Not implemented at this moment. */
                                                editable?: boolean;
                                            }
                                          | {
                                                /** @description User friendly title for the integer. */
                                                header?: string;
                                                /** @description User friendly description for what the integer does. */
                                                description?: string;
                                                /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                                warning?: unknown;
                                                /** @description Value that this configurable integer currently takes. */
                                                value?: number;
                                                /** @description Default value that should be set for this integer. */
                                                default_value?: number;
                                                /** @description Name to identify the configurable integer by in the system. */
                                                name?: string;
                                                /**
                                                 * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable integer.
                                                 * @enum {string}
                                                 */
                                                template_type?: 'input';
                                                /**
                                                 * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'integer' for a configurable integer.
                                                 * @enum {string}
                                                 */
                                                data_type?: 'integer';
                                                /** @description Minimum value that can be set for this parameter. */
                                                min_value?: number;
                                                /** @description Minimum value that can be set for this parameter. */
                                                max_value?: number;
                                                /** @description Not implemented at this moment */
                                                ui_rules?: Record<string, never>;
                                                /** @description Not implemented at this moment. */
                                                editable?: boolean;
                                            }
                                          | {
                                                /** @description User friendly title for the selectable string. */
                                                header?: string;
                                                /** @description User friendly description for what the selectable string parameter does. */
                                                description?: string;
                                                /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                                warning?: unknown;
                                                /** @description Value that this selectable string currently takes. */
                                                value?: string;
                                                /** @description Default value that should be set for this selectable string. */
                                                default_value?: string;
                                                /** @description Name to identify the selectable string parameter by in the system. */
                                                name?: string;
                                                /**
                                                 * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable string parameter.
                                                 * @enum {string}
                                                 */
                                                template_type?: 'selectable';
                                                /**
                                                 * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'string' for a selectable string parameter.
                                                 * @enum {string}
                                                 */
                                                data_type?: 'string';
                                                /** @description List of values that this selectable string can take. */
                                                options?: string[];
                                                /** @description Not implemented at this moment */
                                                ui_rules?: Record<string, never>;
                                                /** @description Not implemented at this moment. */
                                                editable?: boolean;
                                            }
                                          | {
                                                /** @description User friendly title for the selectable. */
                                                header?: string;
                                                /** @description User friendly description for what the selectable parameter does. */
                                                description?: string;
                                                /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                                warning?: unknown;
                                                /** @description Value that this selectable currently takes. */
                                                value?: string;
                                                /** @description Default value that should be set for this selectable. */
                                                default_value?: string;
                                                /** @description Name to identify the selectable parameter by in the system. */
                                                name?: string;
                                                /**
                                                 * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable parameter.
                                                 * @enum {string}
                                                 */
                                                template_type?: 'selectable';
                                                /**
                                                 * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a selectable float.
                                                 * @enum {string}
                                                 */
                                                data_type?: 'float';
                                                /** @description List of values that this float selectable can take. */
                                                options?: number[];
                                                /** @description Not implemented at this moment */
                                                ui_rules?: Record<string, never>;
                                                /** @description Not implemented at this moment. */
                                                editable?: boolean;
                                            }
                                      )[];
                                  }
                                | {
                                      /**
                                       * @description Mongo ID of the object
                                       * @example 60d31793d5f1fb7e6e3c1a4c
                                       */
                                      id?: string;
                                      /**
                                       * @description Type of the configurable parameters. For component parameters the type is always 'CONFIGURABLE_PARAMETERS'.
                                       * @enum {string}
                                       */
                                      type?: 'CONFIGURABLE_PARAMETERS' | 'PARAMETER_GROUP';
                                      entity_identifier?:
                                          | {
                                                workspace_id?: string;
                                                /**
                                                 * @description Mongo ID of the object
                                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                                 */
                                                project_id?: string;
                                                /**
                                                 * @description Mongo ID of the object
                                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                                 */
                                                task_id?: string;
                                                /** @description Describes the component to which the configurable parameters apply */
                                                component?: string;
                                                /**
                                                 * @description Describes the type of the configuration. Set to COMPONENT_PARAMETERS for a configuration that relates to a component.
                                                 * @enum {string}
                                                 */
                                                type?: 'COMPONENT_PARAMETERS';
                                            }
                                          | {
                                                workspace_id?: string;
                                                /**
                                                 * @description Mongo ID of the object
                                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                                 */
                                                model_storage_id?: string;
                                                /**
                                                 * @description Describes the type of the configurable parameters. For hyper parameters, type is set to HYPER_PARAMETERS.
                                                 * @enum {string}
                                                 */
                                                type?: 'HYPER_PARAMETERS';
                                            }
                                          | {
                                                workspace_id?: string;
                                                /**
                                                 * @description Mongo ID of the object
                                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                                 */
                                                model_storage_id?: string;
                                                /** @description Name of the hyper parameter group */
                                                group_name?: string;
                                                /**
                                                 * @description Describes the type of the component. For hyper parameter groups, type is always set to HYPER_PARAMETER_GROUP
                                                 * @enum {string}
                                                 */
                                                type?: 'HYPER_PARAMETER_GROUP';
                                            };
                                      /**
                                       * @description Name of the configuration
                                       * @example Subset splitting
                                       */
                                      header?: string;
                                      /**
                                       * @description Description of the configuration, indicating which part of the system it controls.
                                       * @example These parameters control the splitting of the dataset into training, validation and test set.
                                       */
                                      description?: string;
                                      groups?: {
                                          /**
                                           * @description Defines the parameter group
                                           * @example Learning Parameters
                                           */
                                          header?: string;
                                          /**
                                           * @description Description of the parameter group
                                           * @example Configuration to control training behaviour
                                           */
                                          description?: string;
                                          /** @enum {string} */
                                          type?: 'PARAMETER_GROUP';
                                          /** @description Name of the parameter group */
                                          name?: string;
                                          parameters?: {
                                              /** @description User friendly title for the parameter. */
                                              header?: string;
                                              /** @description User friendly description for what the parameter does. */
                                              description?: string;
                                              /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                              warning?: unknown;
                                              /** @description Value that this parameter currently takes. */
                                              value?: string | number | boolean;
                                              /** @description Default value that should be set for this parameter. */
                                              default_value?: string | number | boolean;
                                              /** @description Name to identify the parameter by in the system. */
                                              name?: string;
                                              /**
                                               * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range.
                                               * @enum {string}
                                               */
                                              template_type?: 'selectable' | 'input';
                                              /**
                                               * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string.
                                               * @enum {string}
                                               */
                                              data_type?:
                                                  | 'float'
                                                  | 'integer'
                                                  | 'boolean'
                                                  | 'string';
                                              /** @description List of values that this parameter can take. Only used for selectable string and selectable float parameters */
                                              options?: (number | string)[];
                                              /**
                                               * Format: float
                                               * @description Minimum value that can be set for this parameter. Only used for numeric parameters.
                                               */
                                              min_value?: number;
                                              /**
                                               * Format: float
                                               * @description Minimum value that can be set for this parameter. Only used for numeric parameters.
                                               */
                                              max_value?: number;
                                              /** @description Not implemented at this moment */
                                              ui_rules?: Record<string, never>;
                                              /** @description Not implemented at this moment. */
                                              editable?: boolean;
                                          }[];
                                      }[];
                                      /** @description Array of configurable parameters */
                                      parameters?: (
                                          | {
                                                /** @description User friendly title for the configurable boolean. */
                                                header?: string;
                                                /** @description User friendly description for what the boolean does. */
                                                description?: string;
                                                /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                                warning?: unknown;
                                                /** @description Value that this boolean currently takes. */
                                                value?: boolean;
                                                /** @description Default value that should be set for this boolean. */
                                                default_value?: boolean;
                                                /** @description Name to identify the configurable boolean by in the system. */
                                                name?: string;
                                                /**
                                                 * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable boolean.
                                                 * @enum {string}
                                                 */
                                                template_type?: 'input';
                                                /**
                                                 * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'boolean' for a configurable boolean.
                                                 * @enum {string}
                                                 */
                                                data_type?: 'boolean';
                                                /** @description Not implemented at this moment */
                                                ui_rules?: Record<string, never>;
                                                /** @description Not implemented at this moment. */
                                                editable?: boolean;
                                            }
                                          | {
                                                /** @description User friendly title for the float. */
                                                header?: string;
                                                /** @description User friendly description for what the float does. */
                                                description?: string;
                                                /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                                warning?: unknown;
                                                /**
                                                 * Format: float
                                                 * @description Value that this configurable float currently takes.
                                                 */
                                                value?: number;
                                                /**
                                                 * Format: float
                                                 * @description Default value that should be set for this float.
                                                 */
                                                default_value?: number;
                                                /** @description Name to identify the configurable float by in the system. */
                                                name?: string;
                                                /**
                                                 * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable float.
                                                 * @enum {string}
                                                 */
                                                template_type?: 'input';
                                                /**
                                                 * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a configurable float.
                                                 * @enum {string}
                                                 */
                                                data_type?: 'float';
                                                /**
                                                 * Format: float
                                                 * @description Minimum value that can be set for this parameter.
                                                 */
                                                min_value?: number;
                                                /**
                                                 * Format: float
                                                 * @description Minimum value that can be set for this parameter.
                                                 */
                                                max_value?: number;
                                                /** @description Not implemented at this moment */
                                                ui_rules?: Record<string, never>;
                                                /** @description Not implemented at this moment. */
                                                editable?: boolean;
                                            }
                                          | {
                                                /** @description User friendly title for the integer. */
                                                header?: string;
                                                /** @description User friendly description for what the integer does. */
                                                description?: string;
                                                /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                                warning?: unknown;
                                                /** @description Value that this configurable integer currently takes. */
                                                value?: number;
                                                /** @description Default value that should be set for this integer. */
                                                default_value?: number;
                                                /** @description Name to identify the configurable integer by in the system. */
                                                name?: string;
                                                /**
                                                 * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable integer.
                                                 * @enum {string}
                                                 */
                                                template_type?: 'input';
                                                /**
                                                 * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'integer' for a configurable integer.
                                                 * @enum {string}
                                                 */
                                                data_type?: 'integer';
                                                /** @description Minimum value that can be set for this parameter. */
                                                min_value?: number;
                                                /** @description Minimum value that can be set for this parameter. */
                                                max_value?: number;
                                                /** @description Not implemented at this moment */
                                                ui_rules?: Record<string, never>;
                                                /** @description Not implemented at this moment. */
                                                editable?: boolean;
                                            }
                                          | {
                                                /** @description User friendly title for the selectable string. */
                                                header?: string;
                                                /** @description User friendly description for what the selectable string parameter does. */
                                                description?: string;
                                                /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                                warning?: unknown;
                                                /** @description Value that this selectable string currently takes. */
                                                value?: string;
                                                /** @description Default value that should be set for this selectable string. */
                                                default_value?: string;
                                                /** @description Name to identify the selectable string parameter by in the system. */
                                                name?: string;
                                                /**
                                                 * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable string parameter.
                                                 * @enum {string}
                                                 */
                                                template_type?: 'selectable';
                                                /**
                                                 * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'string' for a selectable string parameter.
                                                 * @enum {string}
                                                 */
                                                data_type?: 'string';
                                                /** @description List of values that this selectable string can take. */
                                                options?: string[];
                                                /** @description Not implemented at this moment */
                                                ui_rules?: Record<string, never>;
                                                /** @description Not implemented at this moment. */
                                                editable?: boolean;
                                            }
                                          | {
                                                /** @description User friendly title for the selectable. */
                                                header?: string;
                                                /** @description User friendly description for what the selectable parameter does. */
                                                description?: string;
                                                /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                                warning?: unknown;
                                                /** @description Value that this selectable currently takes. */
                                                value?: string;
                                                /** @description Default value that should be set for this selectable. */
                                                default_value?: string;
                                                /** @description Name to identify the selectable parameter by in the system. */
                                                name?: string;
                                                /**
                                                 * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable parameter.
                                                 * @enum {string}
                                                 */
                                                template_type?: 'selectable';
                                                /**
                                                 * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a selectable float.
                                                 * @enum {string}
                                                 */
                                                data_type?: 'float';
                                                /** @description List of values that this float selectable can take. */
                                                options?: number[];
                                                /** @description Not implemented at this moment */
                                                ui_rules?: Record<string, never>;
                                                /** @description Not implemented at this moment. */
                                                editable?: boolean;
                                            }
                                      )[];
                                  }
                                | {
                                      /**
                                       * @description Mongo ID of the object
                                       * @example 60d31793d5f1fb7e6e3c1a4c
                                       */
                                      id?: string;
                                      entity_identifier?:
                                          | {
                                                workspace_id?: string;
                                                /**
                                                 * @description Mongo ID of the object
                                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                                 */
                                                project_id?: string;
                                                /**
                                                 * @description Mongo ID of the object
                                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                                 */
                                                task_id?: string;
                                                /** @description Describes the component to which the configurable parameters apply */
                                                component?: string;
                                                /**
                                                 * @description Describes the type of the configuration. Set to COMPONENT_PARAMETERS for a configuration that relates to a component.
                                                 * @enum {string}
                                                 */
                                                type?: 'COMPONENT_PARAMETERS';
                                            }
                                          | {
                                                workspace_id?: string;
                                                /**
                                                 * @description Mongo ID of the object
                                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                                 */
                                                model_storage_id?: string;
                                                /**
                                                 * @description Describes the type of the configurable parameters. For hyper parameters, type is set to HYPER_PARAMETERS.
                                                 * @enum {string}
                                                 */
                                                type?: 'HYPER_PARAMETERS';
                                            }
                                          | {
                                                workspace_id?: string;
                                                /**
                                                 * @description Mongo ID of the object
                                                 * @example 60d31793d5f1fb7e6e3c1a4c
                                                 */
                                                model_storage_id?: string;
                                                /** @description Name of the hyper parameter group */
                                                group_name?: string;
                                                /**
                                                 * @description Describes the type of the component. For hyper parameter groups, type is always set to HYPER_PARAMETER_GROUP
                                                 * @enum {string}
                                                 */
                                                type?: 'HYPER_PARAMETER_GROUP';
                                            };
                                      /**
                                       * @description Type of the configurable parameters. For hyper parameters the type is always 'CONFIGURABLE_PARAMETERS'.
                                       * @enum {string}
                                       */
                                      type?: 'CONFIGURABLE_PARAMETERS' | 'PARAMETER_GROUP';
                                      /**
                                       * @description The name of the configuration
                                       * @example Hyper parameters for a segmentation task
                                       */
                                      header?: string;
                                      /**
                                       * @description Description of model to which this configuration belongs
                                       * @example Hyper parameters for a segmentation task
                                       */
                                      description?: string;
                                      groups?: {
                                          /**
                                           * @description Defines the parameter group
                                           * @example Learning Parameters
                                           */
                                          header?: string;
                                          /**
                                           * @description Description of the parameter group
                                           * @example Configuration to control training behaviour
                                           */
                                          description?: string;
                                          /** @enum {string} */
                                          type?: 'PARAMETER_GROUP';
                                          /** @description Name of the parameter group */
                                          name?: string;
                                          parameters?: {
                                              /** @description User friendly title for the parameter. */
                                              header?: string;
                                              /** @description User friendly description for what the parameter does. */
                                              description?: string;
                                              /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                              warning?: unknown;
                                              /** @description Value that this parameter currently takes. */
                                              value?: string | number | boolean;
                                              /** @description Default value that should be set for this parameter. */
                                              default_value?: string | number | boolean;
                                              /** @description Name to identify the parameter by in the system. */
                                              name?: string;
                                              /**
                                               * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range.
                                               * @enum {string}
                                               */
                                              template_type?: 'selectable' | 'input';
                                              /**
                                               * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string.
                                               * @enum {string}
                                               */
                                              data_type?:
                                                  | 'float'
                                                  | 'integer'
                                                  | 'boolean'
                                                  | 'string';
                                              /** @description List of values that this parameter can take. Only used for selectable string and selectable float parameters */
                                              options?: (number | string)[];
                                              /**
                                               * Format: float
                                               * @description Minimum value that can be set for this parameter. Only used for numeric parameters.
                                               */
                                              min_value?: number;
                                              /**
                                               * Format: float
                                               * @description Minimum value that can be set for this parameter. Only used for numeric parameters.
                                               */
                                              max_value?: number;
                                              /** @description Not implemented at this moment */
                                              ui_rules?: Record<string, never>;
                                              /** @description Not implemented at this moment. */
                                              editable?: boolean;
                                          }[];
                                      }[];
                                      /** @description Array of configurable parameters */
                                      parameters?: (
                                          | {
                                                /** @description User friendly title for the configurable boolean. */
                                                header?: string;
                                                /** @description User friendly description for what the boolean does. */
                                                description?: string;
                                                /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                                warning?: unknown;
                                                /** @description Value that this boolean currently takes. */
                                                value?: boolean;
                                                /** @description Default value that should be set for this boolean. */
                                                default_value?: boolean;
                                                /** @description Name to identify the configurable boolean by in the system. */
                                                name?: string;
                                                /**
                                                 * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable boolean.
                                                 * @enum {string}
                                                 */
                                                template_type?: 'input';
                                                /**
                                                 * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'boolean' for a configurable boolean.
                                                 * @enum {string}
                                                 */
                                                data_type?: 'boolean';
                                                /** @description Not implemented at this moment */
                                                ui_rules?: Record<string, never>;
                                                /** @description Not implemented at this moment. */
                                                editable?: boolean;
                                            }
                                          | {
                                                /** @description User friendly title for the float. */
                                                header?: string;
                                                /** @description User friendly description for what the float does. */
                                                description?: string;
                                                /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                                warning?: unknown;
                                                /**
                                                 * Format: float
                                                 * @description Value that this configurable float currently takes.
                                                 */
                                                value?: number;
                                                /**
                                                 * Format: float
                                                 * @description Default value that should be set for this float.
                                                 */
                                                default_value?: number;
                                                /** @description Name to identify the configurable float by in the system. */
                                                name?: string;
                                                /**
                                                 * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable float.
                                                 * @enum {string}
                                                 */
                                                template_type?: 'input';
                                                /**
                                                 * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a configurable float.
                                                 * @enum {string}
                                                 */
                                                data_type?: 'float';
                                                /**
                                                 * Format: float
                                                 * @description Minimum value that can be set for this parameter.
                                                 */
                                                min_value?: number;
                                                /**
                                                 * Format: float
                                                 * @description Minimum value that can be set for this parameter.
                                                 */
                                                max_value?: number;
                                                /** @description Not implemented at this moment */
                                                ui_rules?: Record<string, never>;
                                                /** @description Not implemented at this moment. */
                                                editable?: boolean;
                                            }
                                          | {
                                                /** @description User friendly title for the integer. */
                                                header?: string;
                                                /** @description User friendly description for what the integer does. */
                                                description?: string;
                                                /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                                warning?: unknown;
                                                /** @description Value that this configurable integer currently takes. */
                                                value?: number;
                                                /** @description Default value that should be set for this integer. */
                                                default_value?: number;
                                                /** @description Name to identify the configurable integer by in the system. */
                                                name?: string;
                                                /**
                                                 * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable integer.
                                                 * @enum {string}
                                                 */
                                                template_type?: 'input';
                                                /**
                                                 * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'integer' for a configurable integer.
                                                 * @enum {string}
                                                 */
                                                data_type?: 'integer';
                                                /** @description Minimum value that can be set for this parameter. */
                                                min_value?: number;
                                                /** @description Minimum value that can be set for this parameter. */
                                                max_value?: number;
                                                /** @description Not implemented at this moment */
                                                ui_rules?: Record<string, never>;
                                                /** @description Not implemented at this moment. */
                                                editable?: boolean;
                                            }
                                          | {
                                                /** @description User friendly title for the selectable string. */
                                                header?: string;
                                                /** @description User friendly description for what the selectable string parameter does. */
                                                description?: string;
                                                /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                                warning?: unknown;
                                                /** @description Value that this selectable string currently takes. */
                                                value?: string;
                                                /** @description Default value that should be set for this selectable string. */
                                                default_value?: string;
                                                /** @description Name to identify the selectable string parameter by in the system. */
                                                name?: string;
                                                /**
                                                 * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable string parameter.
                                                 * @enum {string}
                                                 */
                                                template_type?: 'selectable';
                                                /**
                                                 * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'string' for a selectable string parameter.
                                                 * @enum {string}
                                                 */
                                                data_type?: 'string';
                                                /** @description List of values that this selectable string can take. */
                                                options?: string[];
                                                /** @description Not implemented at this moment */
                                                ui_rules?: Record<string, never>;
                                                /** @description Not implemented at this moment. */
                                                editable?: boolean;
                                            }
                                          | {
                                                /** @description User friendly title for the selectable. */
                                                header?: string;
                                                /** @description User friendly description for what the selectable parameter does. */
                                                description?: string;
                                                /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                                warning?: unknown;
                                                /** @description Value that this selectable currently takes. */
                                                value?: string;
                                                /** @description Default value that should be set for this selectable. */
                                                default_value?: string;
                                                /** @description Name to identify the selectable parameter by in the system. */
                                                name?: string;
                                                /**
                                                 * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable parameter.
                                                 * @enum {string}
                                                 */
                                                template_type?: 'selectable';
                                                /**
                                                 * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a selectable float.
                                                 * @enum {string}
                                                 */
                                                data_type?: 'float';
                                                /** @description List of values that this float selectable can take. */
                                                options?: number[];
                                                /** @description Not implemented at this moment */
                                                ui_rules?: Record<string, never>;
                                                /** @description Not implemented at this moment. */
                                                editable?: boolean;
                                            }
                                      )[];
                                  }
                            )[];
                            /**
                             * @description Mongo ID of the object
                             * @example 60d31793d5f1fb7e6e3c1a4c
                             */
                            task_id?: string;
                            /** @description Title of the task the configuration is connected to */
                            task_title?: string;
                        }[];
                    };
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    SetTaskChainConfiguration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @description Array of task configurations */
                    task_chain: {
                        /** @description Array of configurable parameter objects for the different components in the task, as well as the hyper parameters for the current algorithm in the task */
                        components: {
                            entity_identifier:
                                | {
                                      workspace_id?: string;
                                      /**
                                       * @description Mongo ID of the object
                                       * @example 60d31793d5f1fb7e6e3c1a4c
                                       */
                                      project_id?: string;
                                      /**
                                       * @description Mongo ID of the task
                                       * @example 60d31793d5f1fb7e6e3c1a4c
                                       */
                                      task_id?: string;
                                      /**
                                       * @description If the configuration is a component configuration, describes the component.
                                       * @enum {string}
                                       */
                                      component:
                                          | 'NULL_COMPONENT'
                                          | 'SUBSET_MANAGER'
                                          | 'DATASET_COUNTER'
                                          | 'PROJECT_ACTIVE_LEARNING'
                                          | 'TASK_ACTIVE_LEARNING'
                                          | 'TASK_NODE'
                                          | 'PIPELINE_DATASET_MANAGER';
                                      /**
                                       * @description Describes the type of the configuration. Set to COMPONENT_PARAMETERS for a configuration that relates to a component.
                                       * @enum {string}
                                       */
                                      type: 'COMPONENT_PARAMETERS';
                                  }
                                | {
                                      workspace_id?: string;
                                      /**
                                       * @description Mongo ID of the object
                                       * @example 60d31793d5f1fb7e6e3c1a4c
                                       */
                                      model_storage_id: string;
                                      /**
                                       * @description Describes the type of the configurable parameters. For hyper parameters, type is set to HYPER_PARAMETERS.
                                       * @enum {string}
                                       */
                                      type: 'HYPER_PARAMETERS';
                                  }
                                | {
                                      workspace_id?: string;
                                      /**
                                       * @description Mongo ID of the object
                                       * @example 60d31793d5f1fb7e6e3c1a4c
                                       */
                                      model_storage_id: string;
                                      /** @description The name of the hyper parameter group */
                                      group_name: string;
                                      /**
                                       * @description Describes the type of the component. For hyper parameter groups, type is always set to HYPER_PARAMETER_GROUP
                                       * @enum {string}
                                       */
                                      type: 'HYPER_PARAMETER_GROUP';
                                  };
                            groups?: {
                                /** @description Name of the parameter group */
                                name: string;
                                /** @description Array of parameters */
                                parameters: {
                                    /** @description Value to set the parameter to. */
                                    value: string | number | boolean;
                                    /** @description Name to identify the parameter by in the system. */
                                    name: string;
                                }[];
                            }[];
                            parameters?: {
                                /** @description Value to set the parameter to. */
                                value: string | number | boolean;
                                /** @description Name to identify the parameter by in the system. */
                                name: string;
                            }[];
                        }[];
                    }[];
                };
            };
        };
        responses: {
            /** @description Configuration updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
            /** @description Configuration cannot be saved to the server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    GetTaskConfiguration: {
        parameters: {
            query?: {
                /** @description The ID of the model of interest */
                model_id?: string;
                /** @description The name of the algorithm for which we want to pull the configurable parameters */
                algorithm_name?: string;
            };
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
                /** @description The ID of the task of interest. */
                task_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get configuration response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Array of configurable parameter objects for the different components in the task, as well as the hyper parameters for the current algorithm in the task */
                        components?: (
                            | {
                                  /** @description Name of the hyper parameter group */
                                  name?: string;
                                  /**
                                   * @description ID of the hyper parameter group. The first 24 characters refer to the ID of the underlying HyperParameter object. This is followed by a dash ('-') and the group number (0 to 99) of this particular hyper parameter group.
                                   * @example 60d31793d5f1fb7e6e3c1a4c-1
                                   */
                                  id?: string;
                                  /**
                                   * @description Type of the configurable parameters. For a hyper parameter group the type is always 'PARAMETER_GROUP'.
                                   * @enum {string}
                                   */
                                  type?: 'CONFIGURABLE_PARAMETERS' | 'PARAMETER_GROUP';
                                  entity_identifier?:
                                      | {
                                            workspace_id?: string;
                                            /**
                                             * @description Mongo ID of the object
                                             * @example 60d31793d5f1fb7e6e3c1a4c
                                             */
                                            project_id?: string;
                                            /**
                                             * @description Mongo ID of the object
                                             * @example 60d31793d5f1fb7e6e3c1a4c
                                             */
                                            task_id?: string;
                                            /** @description Describes the component to which the configurable parameters apply */
                                            component?: string;
                                            /**
                                             * @description Describes the type of the configuration. Set to COMPONENT_PARAMETERS for a configuration that relates to a component.
                                             * @enum {string}
                                             */
                                            type?: 'COMPONENT_PARAMETERS';
                                        }
                                      | {
                                            workspace_id?: string;
                                            /**
                                             * @description Mongo ID of the object
                                             * @example 60d31793d5f1fb7e6e3c1a4c
                                             */
                                            model_storage_id?: string;
                                            /**
                                             * @description Describes the type of the configurable parameters. For hyper parameters, type is set to HYPER_PARAMETERS.
                                             * @enum {string}
                                             */
                                            type?: 'HYPER_PARAMETERS';
                                        }
                                      | {
                                            workspace_id?: string;
                                            /**
                                             * @description Mongo ID of the object
                                             * @example 60d31793d5f1fb7e6e3c1a4c
                                             */
                                            model_storage_id?: string;
                                            /** @description Name of the hyper parameter group */
                                            group_name?: string;
                                            /**
                                             * @description Describes the type of the component. For hyper parameter groups, type is always set to HYPER_PARAMETER_GROUP
                                             * @enum {string}
                                             */
                                            type?: 'HYPER_PARAMETER_GROUP';
                                        };
                                  /**
                                   * @description The name of the hyper parameter group
                                   * @example Learning parameters
                                   */
                                  header?: string;
                                  /**
                                   * @description Description of the hyper parameter group.
                                   * @example A set of parameters that control the training process.
                                   */
                                  description?: string;
                                  groups?: {
                                      /**
                                       * @description Defines the parameter group
                                       * @example Learning Parameters
                                       */
                                      header?: string;
                                      /**
                                       * @description Description of the parameter group
                                       * @example Configuration to control training behaviour
                                       */
                                      description?: string;
                                      /** @enum {string} */
                                      type?: 'PARAMETER_GROUP';
                                      /** @description Name of the parameter group */
                                      name?: string;
                                      parameters?: {
                                          /** @description User friendly title for the parameter. */
                                          header?: string;
                                          /** @description User friendly description for what the parameter does. */
                                          description?: string;
                                          /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                          warning?: unknown;
                                          /** @description Value that this parameter currently takes. */
                                          value?: string | number | boolean;
                                          /** @description Default value that should be set for this parameter. */
                                          default_value?: string | number | boolean;
                                          /** @description Name to identify the parameter by in the system. */
                                          name?: string;
                                          /**
                                           * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range.
                                           * @enum {string}
                                           */
                                          template_type?: 'selectable' | 'input';
                                          /**
                                           * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string.
                                           * @enum {string}
                                           */
                                          data_type?: 'float' | 'integer' | 'boolean' | 'string';
                                          /** @description List of values that this parameter can take. Only used for selectable string and selectable float parameters */
                                          options?: (number | string)[];
                                          /**
                                           * Format: float
                                           * @description Minimum value that can be set for this parameter. Only used for numeric parameters.
                                           */
                                          min_value?: number;
                                          /**
                                           * Format: float
                                           * @description Minimum value that can be set for this parameter. Only used for numeric parameters.
                                           */
                                          max_value?: number;
                                          /** @description Not implemented at this moment */
                                          ui_rules?: Record<string, never>;
                                          /** @description Not implemented at this moment. */
                                          editable?: boolean;
                                      }[];
                                  }[];
                                  /** @description Array of configurable parameters */
                                  parameters?: (
                                      | {
                                            /** @description User friendly title for the configurable boolean. */
                                            header?: string;
                                            /** @description User friendly description for what the boolean does. */
                                            description?: string;
                                            /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                            warning?: unknown;
                                            /** @description Value that this boolean currently takes. */
                                            value?: boolean;
                                            /** @description Default value that should be set for this boolean. */
                                            default_value?: boolean;
                                            /** @description Name to identify the configurable boolean by in the system. */
                                            name?: string;
                                            /**
                                             * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable boolean.
                                             * @enum {string}
                                             */
                                            template_type?: 'input';
                                            /**
                                             * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'boolean' for a configurable boolean.
                                             * @enum {string}
                                             */
                                            data_type?: 'boolean';
                                            /** @description Not implemented at this moment */
                                            ui_rules?: Record<string, never>;
                                            /** @description Not implemented at this moment. */
                                            editable?: boolean;
                                        }
                                      | {
                                            /** @description User friendly title for the float. */
                                            header?: string;
                                            /** @description User friendly description for what the float does. */
                                            description?: string;
                                            /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                            warning?: unknown;
                                            /**
                                             * Format: float
                                             * @description Value that this configurable float currently takes.
                                             */
                                            value?: number;
                                            /**
                                             * Format: float
                                             * @description Default value that should be set for this float.
                                             */
                                            default_value?: number;
                                            /** @description Name to identify the configurable float by in the system. */
                                            name?: string;
                                            /**
                                             * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable float.
                                             * @enum {string}
                                             */
                                            template_type?: 'input';
                                            /**
                                             * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a configurable float.
                                             * @enum {string}
                                             */
                                            data_type?: 'float';
                                            /**
                                             * Format: float
                                             * @description Minimum value that can be set for this parameter.
                                             */
                                            min_value?: number;
                                            /**
                                             * Format: float
                                             * @description Minimum value that can be set for this parameter.
                                             */
                                            max_value?: number;
                                            /** @description Not implemented at this moment */
                                            ui_rules?: Record<string, never>;
                                            /** @description Not implemented at this moment. */
                                            editable?: boolean;
                                        }
                                      | {
                                            /** @description User friendly title for the integer. */
                                            header?: string;
                                            /** @description User friendly description for what the integer does. */
                                            description?: string;
                                            /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                            warning?: unknown;
                                            /** @description Value that this configurable integer currently takes. */
                                            value?: number;
                                            /** @description Default value that should be set for this integer. */
                                            default_value?: number;
                                            /** @description Name to identify the configurable integer by in the system. */
                                            name?: string;
                                            /**
                                             * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable integer.
                                             * @enum {string}
                                             */
                                            template_type?: 'input';
                                            /**
                                             * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'integer' for a configurable integer.
                                             * @enum {string}
                                             */
                                            data_type?: 'integer';
                                            /** @description Minimum value that can be set for this parameter. */
                                            min_value?: number;
                                            /** @description Minimum value that can be set for this parameter. */
                                            max_value?: number;
                                            /** @description Not implemented at this moment */
                                            ui_rules?: Record<string, never>;
                                            /** @description Not implemented at this moment. */
                                            editable?: boolean;
                                        }
                                      | {
                                            /** @description User friendly title for the selectable string. */
                                            header?: string;
                                            /** @description User friendly description for what the selectable string parameter does. */
                                            description?: string;
                                            /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                            warning?: unknown;
                                            /** @description Value that this selectable string currently takes. */
                                            value?: string;
                                            /** @description Default value that should be set for this selectable string. */
                                            default_value?: string;
                                            /** @description Name to identify the selectable string parameter by in the system. */
                                            name?: string;
                                            /**
                                             * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable string parameter.
                                             * @enum {string}
                                             */
                                            template_type?: 'selectable';
                                            /**
                                             * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'string' for a selectable string parameter.
                                             * @enum {string}
                                             */
                                            data_type?: 'string';
                                            /** @description List of values that this selectable string can take. */
                                            options?: string[];
                                            /** @description Not implemented at this moment */
                                            ui_rules?: Record<string, never>;
                                            /** @description Not implemented at this moment. */
                                            editable?: boolean;
                                        }
                                      | {
                                            /** @description User friendly title for the selectable. */
                                            header?: string;
                                            /** @description User friendly description for what the selectable parameter does. */
                                            description?: string;
                                            /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                            warning?: unknown;
                                            /** @description Value that this selectable currently takes. */
                                            value?: string;
                                            /** @description Default value that should be set for this selectable. */
                                            default_value?: string;
                                            /** @description Name to identify the selectable parameter by in the system. */
                                            name?: string;
                                            /**
                                             * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable parameter.
                                             * @enum {string}
                                             */
                                            template_type?: 'selectable';
                                            /**
                                             * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a selectable float.
                                             * @enum {string}
                                             */
                                            data_type?: 'float';
                                            /** @description List of values that this float selectable can take. */
                                            options?: number[];
                                            /** @description Not implemented at this moment */
                                            ui_rules?: Record<string, never>;
                                            /** @description Not implemented at this moment. */
                                            editable?: boolean;
                                        }
                                  )[];
                              }
                            | {
                                  /**
                                   * @description Mongo ID of the object
                                   * @example 60d31793d5f1fb7e6e3c1a4c
                                   */
                                  id?: string;
                                  /**
                                   * @description Type of the configurable parameters. For component parameters the type is always 'CONFIGURABLE_PARAMETERS'.
                                   * @enum {string}
                                   */
                                  type?: 'CONFIGURABLE_PARAMETERS' | 'PARAMETER_GROUP';
                                  entity_identifier?:
                                      | {
                                            workspace_id?: string;
                                            /**
                                             * @description Mongo ID of the object
                                             * @example 60d31793d5f1fb7e6e3c1a4c
                                             */
                                            project_id?: string;
                                            /**
                                             * @description Mongo ID of the object
                                             * @example 60d31793d5f1fb7e6e3c1a4c
                                             */
                                            task_id?: string;
                                            /** @description Describes the component to which the configurable parameters apply */
                                            component?: string;
                                            /**
                                             * @description Describes the type of the configuration. Set to COMPONENT_PARAMETERS for a configuration that relates to a component.
                                             * @enum {string}
                                             */
                                            type?: 'COMPONENT_PARAMETERS';
                                        }
                                      | {
                                            workspace_id?: string;
                                            /**
                                             * @description Mongo ID of the object
                                             * @example 60d31793d5f1fb7e6e3c1a4c
                                             */
                                            model_storage_id?: string;
                                            /**
                                             * @description Describes the type of the configurable parameters. For hyper parameters, type is set to HYPER_PARAMETERS.
                                             * @enum {string}
                                             */
                                            type?: 'HYPER_PARAMETERS';
                                        }
                                      | {
                                            workspace_id?: string;
                                            /**
                                             * @description Mongo ID of the object
                                             * @example 60d31793d5f1fb7e6e3c1a4c
                                             */
                                            model_storage_id?: string;
                                            /** @description Name of the hyper parameter group */
                                            group_name?: string;
                                            /**
                                             * @description Describes the type of the component. For hyper parameter groups, type is always set to HYPER_PARAMETER_GROUP
                                             * @enum {string}
                                             */
                                            type?: 'HYPER_PARAMETER_GROUP';
                                        };
                                  /**
                                   * @description Name of the configuration
                                   * @example Subset splitting
                                   */
                                  header?: string;
                                  /**
                                   * @description Description of the configuration, indicating which part of the system it controls.
                                   * @example These parameters control the splitting of the dataset into training, validation and test set.
                                   */
                                  description?: string;
                                  groups?: {
                                      /**
                                       * @description Defines the parameter group
                                       * @example Learning Parameters
                                       */
                                      header?: string;
                                      /**
                                       * @description Description of the parameter group
                                       * @example Configuration to control training behaviour
                                       */
                                      description?: string;
                                      /** @enum {string} */
                                      type?: 'PARAMETER_GROUP';
                                      /** @description Name of the parameter group */
                                      name?: string;
                                      parameters?: {
                                          /** @description User friendly title for the parameter. */
                                          header?: string;
                                          /** @description User friendly description for what the parameter does. */
                                          description?: string;
                                          /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                          warning?: unknown;
                                          /** @description Value that this parameter currently takes. */
                                          value?: string | number | boolean;
                                          /** @description Default value that should be set for this parameter. */
                                          default_value?: string | number | boolean;
                                          /** @description Name to identify the parameter by in the system. */
                                          name?: string;
                                          /**
                                           * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range.
                                           * @enum {string}
                                           */
                                          template_type?: 'selectable' | 'input';
                                          /**
                                           * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string.
                                           * @enum {string}
                                           */
                                          data_type?: 'float' | 'integer' | 'boolean' | 'string';
                                          /** @description List of values that this parameter can take. Only used for selectable string and selectable float parameters */
                                          options?: (number | string)[];
                                          /**
                                           * Format: float
                                           * @description Minimum value that can be set for this parameter. Only used for numeric parameters.
                                           */
                                          min_value?: number;
                                          /**
                                           * Format: float
                                           * @description Minimum value that can be set for this parameter. Only used for numeric parameters.
                                           */
                                          max_value?: number;
                                          /** @description Not implemented at this moment */
                                          ui_rules?: Record<string, never>;
                                          /** @description Not implemented at this moment. */
                                          editable?: boolean;
                                      }[];
                                  }[];
                                  /** @description Array of configurable parameters */
                                  parameters?: (
                                      | {
                                            /** @description User friendly title for the configurable boolean. */
                                            header?: string;
                                            /** @description User friendly description for what the boolean does. */
                                            description?: string;
                                            /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                            warning?: unknown;
                                            /** @description Value that this boolean currently takes. */
                                            value?: boolean;
                                            /** @description Default value that should be set for this boolean. */
                                            default_value?: boolean;
                                            /** @description Name to identify the configurable boolean by in the system. */
                                            name?: string;
                                            /**
                                             * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable boolean.
                                             * @enum {string}
                                             */
                                            template_type?: 'input';
                                            /**
                                             * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'boolean' for a configurable boolean.
                                             * @enum {string}
                                             */
                                            data_type?: 'boolean';
                                            /** @description Not implemented at this moment */
                                            ui_rules?: Record<string, never>;
                                            /** @description Not implemented at this moment. */
                                            editable?: boolean;
                                        }
                                      | {
                                            /** @description User friendly title for the float. */
                                            header?: string;
                                            /** @description User friendly description for what the float does. */
                                            description?: string;
                                            /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                            warning?: unknown;
                                            /**
                                             * Format: float
                                             * @description Value that this configurable float currently takes.
                                             */
                                            value?: number;
                                            /**
                                             * Format: float
                                             * @description Default value that should be set for this float.
                                             */
                                            default_value?: number;
                                            /** @description Name to identify the configurable float by in the system. */
                                            name?: string;
                                            /**
                                             * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable float.
                                             * @enum {string}
                                             */
                                            template_type?: 'input';
                                            /**
                                             * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a configurable float.
                                             * @enum {string}
                                             */
                                            data_type?: 'float';
                                            /**
                                             * Format: float
                                             * @description Minimum value that can be set for this parameter.
                                             */
                                            min_value?: number;
                                            /**
                                             * Format: float
                                             * @description Minimum value that can be set for this parameter.
                                             */
                                            max_value?: number;
                                            /** @description Not implemented at this moment */
                                            ui_rules?: Record<string, never>;
                                            /** @description Not implemented at this moment. */
                                            editable?: boolean;
                                        }
                                      | {
                                            /** @description User friendly title for the integer. */
                                            header?: string;
                                            /** @description User friendly description for what the integer does. */
                                            description?: string;
                                            /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                            warning?: unknown;
                                            /** @description Value that this configurable integer currently takes. */
                                            value?: number;
                                            /** @description Default value that should be set for this integer. */
                                            default_value?: number;
                                            /** @description Name to identify the configurable integer by in the system. */
                                            name?: string;
                                            /**
                                             * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable integer.
                                             * @enum {string}
                                             */
                                            template_type?: 'input';
                                            /**
                                             * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'integer' for a configurable integer.
                                             * @enum {string}
                                             */
                                            data_type?: 'integer';
                                            /** @description Minimum value that can be set for this parameter. */
                                            min_value?: number;
                                            /** @description Minimum value that can be set for this parameter. */
                                            max_value?: number;
                                            /** @description Not implemented at this moment */
                                            ui_rules?: Record<string, never>;
                                            /** @description Not implemented at this moment. */
                                            editable?: boolean;
                                        }
                                      | {
                                            /** @description User friendly title for the selectable string. */
                                            header?: string;
                                            /** @description User friendly description for what the selectable string parameter does. */
                                            description?: string;
                                            /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                            warning?: unknown;
                                            /** @description Value that this selectable string currently takes. */
                                            value?: string;
                                            /** @description Default value that should be set for this selectable string. */
                                            default_value?: string;
                                            /** @description Name to identify the selectable string parameter by in the system. */
                                            name?: string;
                                            /**
                                             * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable string parameter.
                                             * @enum {string}
                                             */
                                            template_type?: 'selectable';
                                            /**
                                             * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'string' for a selectable string parameter.
                                             * @enum {string}
                                             */
                                            data_type?: 'string';
                                            /** @description List of values that this selectable string can take. */
                                            options?: string[];
                                            /** @description Not implemented at this moment */
                                            ui_rules?: Record<string, never>;
                                            /** @description Not implemented at this moment. */
                                            editable?: boolean;
                                        }
                                      | {
                                            /** @description User friendly title for the selectable. */
                                            header?: string;
                                            /** @description User friendly description for what the selectable parameter does. */
                                            description?: string;
                                            /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                            warning?: unknown;
                                            /** @description Value that this selectable currently takes. */
                                            value?: string;
                                            /** @description Default value that should be set for this selectable. */
                                            default_value?: string;
                                            /** @description Name to identify the selectable parameter by in the system. */
                                            name?: string;
                                            /**
                                             * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable parameter.
                                             * @enum {string}
                                             */
                                            template_type?: 'selectable';
                                            /**
                                             * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a selectable float.
                                             * @enum {string}
                                             */
                                            data_type?: 'float';
                                            /** @description List of values that this float selectable can take. */
                                            options?: number[];
                                            /** @description Not implemented at this moment */
                                            ui_rules?: Record<string, never>;
                                            /** @description Not implemented at this moment. */
                                            editable?: boolean;
                                        }
                                  )[];
                              }
                            | {
                                  /**
                                   * @description Mongo ID of the object
                                   * @example 60d31793d5f1fb7e6e3c1a4c
                                   */
                                  id?: string;
                                  entity_identifier?:
                                      | {
                                            workspace_id?: string;
                                            /**
                                             * @description Mongo ID of the object
                                             * @example 60d31793d5f1fb7e6e3c1a4c
                                             */
                                            project_id?: string;
                                            /**
                                             * @description Mongo ID of the object
                                             * @example 60d31793d5f1fb7e6e3c1a4c
                                             */
                                            task_id?: string;
                                            /** @description Describes the component to which the configurable parameters apply */
                                            component?: string;
                                            /**
                                             * @description Describes the type of the configuration. Set to COMPONENT_PARAMETERS for a configuration that relates to a component.
                                             * @enum {string}
                                             */
                                            type?: 'COMPONENT_PARAMETERS';
                                        }
                                      | {
                                            workspace_id?: string;
                                            /**
                                             * @description Mongo ID of the object
                                             * @example 60d31793d5f1fb7e6e3c1a4c
                                             */
                                            model_storage_id?: string;
                                            /**
                                             * @description Describes the type of the configurable parameters. For hyper parameters, type is set to HYPER_PARAMETERS.
                                             * @enum {string}
                                             */
                                            type?: 'HYPER_PARAMETERS';
                                        }
                                      | {
                                            workspace_id?: string;
                                            /**
                                             * @description Mongo ID of the object
                                             * @example 60d31793d5f1fb7e6e3c1a4c
                                             */
                                            model_storage_id?: string;
                                            /** @description Name of the hyper parameter group */
                                            group_name?: string;
                                            /**
                                             * @description Describes the type of the component. For hyper parameter groups, type is always set to HYPER_PARAMETER_GROUP
                                             * @enum {string}
                                             */
                                            type?: 'HYPER_PARAMETER_GROUP';
                                        };
                                  /**
                                   * @description Type of the configurable parameters. For hyper parameters the type is always 'CONFIGURABLE_PARAMETERS'.
                                   * @enum {string}
                                   */
                                  type?: 'CONFIGURABLE_PARAMETERS' | 'PARAMETER_GROUP';
                                  /**
                                   * @description The name of the configuration
                                   * @example Hyper parameters for a segmentation task
                                   */
                                  header?: string;
                                  /**
                                   * @description Description of model to which this configuration belongs
                                   * @example Hyper parameters for a segmentation task
                                   */
                                  description?: string;
                                  groups?: {
                                      /**
                                       * @description Defines the parameter group
                                       * @example Learning Parameters
                                       */
                                      header?: string;
                                      /**
                                       * @description Description of the parameter group
                                       * @example Configuration to control training behaviour
                                       */
                                      description?: string;
                                      /** @enum {string} */
                                      type?: 'PARAMETER_GROUP';
                                      /** @description Name of the parameter group */
                                      name?: string;
                                      parameters?: {
                                          /** @description User friendly title for the parameter. */
                                          header?: string;
                                          /** @description User friendly description for what the parameter does. */
                                          description?: string;
                                          /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                          warning?: unknown;
                                          /** @description Value that this parameter currently takes. */
                                          value?: string | number | boolean;
                                          /** @description Default value that should be set for this parameter. */
                                          default_value?: string | number | boolean;
                                          /** @description Name to identify the parameter by in the system. */
                                          name?: string;
                                          /**
                                           * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range.
                                           * @enum {string}
                                           */
                                          template_type?: 'selectable' | 'input';
                                          /**
                                           * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string.
                                           * @enum {string}
                                           */
                                          data_type?: 'float' | 'integer' | 'boolean' | 'string';
                                          /** @description List of values that this parameter can take. Only used for selectable string and selectable float parameters */
                                          options?: (number | string)[];
                                          /**
                                           * Format: float
                                           * @description Minimum value that can be set for this parameter. Only used for numeric parameters.
                                           */
                                          min_value?: number;
                                          /**
                                           * Format: float
                                           * @description Minimum value that can be set for this parameter. Only used for numeric parameters.
                                           */
                                          max_value?: number;
                                          /** @description Not implemented at this moment */
                                          ui_rules?: Record<string, never>;
                                          /** @description Not implemented at this moment. */
                                          editable?: boolean;
                                      }[];
                                  }[];
                                  /** @description Array of configurable parameters */
                                  parameters?: (
                                      | {
                                            /** @description User friendly title for the configurable boolean. */
                                            header?: string;
                                            /** @description User friendly description for what the boolean does. */
                                            description?: string;
                                            /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                            warning?: unknown;
                                            /** @description Value that this boolean currently takes. */
                                            value?: boolean;
                                            /** @description Default value that should be set for this boolean. */
                                            default_value?: boolean;
                                            /** @description Name to identify the configurable boolean by in the system. */
                                            name?: string;
                                            /**
                                             * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable boolean.
                                             * @enum {string}
                                             */
                                            template_type?: 'input';
                                            /**
                                             * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'boolean' for a configurable boolean.
                                             * @enum {string}
                                             */
                                            data_type?: 'boolean';
                                            /** @description Not implemented at this moment */
                                            ui_rules?: Record<string, never>;
                                            /** @description Not implemented at this moment. */
                                            editable?: boolean;
                                        }
                                      | {
                                            /** @description User friendly title for the float. */
                                            header?: string;
                                            /** @description User friendly description for what the float does. */
                                            description?: string;
                                            /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                            warning?: unknown;
                                            /**
                                             * Format: float
                                             * @description Value that this configurable float currently takes.
                                             */
                                            value?: number;
                                            /**
                                             * Format: float
                                             * @description Default value that should be set for this float.
                                             */
                                            default_value?: number;
                                            /** @description Name to identify the configurable float by in the system. */
                                            name?: string;
                                            /**
                                             * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable float.
                                             * @enum {string}
                                             */
                                            template_type?: 'input';
                                            /**
                                             * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a configurable float.
                                             * @enum {string}
                                             */
                                            data_type?: 'float';
                                            /**
                                             * Format: float
                                             * @description Minimum value that can be set for this parameter.
                                             */
                                            min_value?: number;
                                            /**
                                             * Format: float
                                             * @description Minimum value that can be set for this parameter.
                                             */
                                            max_value?: number;
                                            /** @description Not implemented at this moment */
                                            ui_rules?: Record<string, never>;
                                            /** @description Not implemented at this moment. */
                                            editable?: boolean;
                                        }
                                      | {
                                            /** @description User friendly title for the integer. */
                                            header?: string;
                                            /** @description User friendly description for what the integer does. */
                                            description?: string;
                                            /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                            warning?: unknown;
                                            /** @description Value that this configurable integer currently takes. */
                                            value?: number;
                                            /** @description Default value that should be set for this integer. */
                                            default_value?: number;
                                            /** @description Name to identify the configurable integer by in the system. */
                                            name?: string;
                                            /**
                                             * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'input' for a configurable integer.
                                             * @enum {string}
                                             */
                                            template_type?: 'input';
                                            /**
                                             * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'integer' for a configurable integer.
                                             * @enum {string}
                                             */
                                            data_type?: 'integer';
                                            /** @description Minimum value that can be set for this parameter. */
                                            min_value?: number;
                                            /** @description Minimum value that can be set for this parameter. */
                                            max_value?: number;
                                            /** @description Not implemented at this moment */
                                            ui_rules?: Record<string, never>;
                                            /** @description Not implemented at this moment. */
                                            editable?: boolean;
                                        }
                                      | {
                                            /** @description User friendly title for the selectable string. */
                                            header?: string;
                                            /** @description User friendly description for what the selectable string parameter does. */
                                            description?: string;
                                            /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                            warning?: unknown;
                                            /** @description Value that this selectable string currently takes. */
                                            value?: string;
                                            /** @description Default value that should be set for this selectable string. */
                                            default_value?: string;
                                            /** @description Name to identify the selectable string parameter by in the system. */
                                            name?: string;
                                            /**
                                             * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable string parameter.
                                             * @enum {string}
                                             */
                                            template_type?: 'selectable';
                                            /**
                                             * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'string' for a selectable string parameter.
                                             * @enum {string}
                                             */
                                            data_type?: 'string';
                                            /** @description List of values that this selectable string can take. */
                                            options?: string[];
                                            /** @description Not implemented at this moment */
                                            ui_rules?: Record<string, never>;
                                            /** @description Not implemented at this moment. */
                                            editable?: boolean;
                                        }
                                      | {
                                            /** @description User friendly title for the selectable. */
                                            header?: string;
                                            /** @description User friendly description for what the selectable parameter does. */
                                            description?: string;
                                            /** @description Warning message (if any) that explains the user to use caution when changing this parameter, and why. */
                                            warning?: unknown;
                                            /** @description Value that this selectable currently takes. */
                                            value?: string;
                                            /** @description Default value that should be set for this selectable. */
                                            default_value?: string;
                                            /** @description Name to identify the selectable parameter by in the system. */
                                            name?: string;
                                            /**
                                             * @description Describes the template type of the parameter. 'selectable' is used for parameters with a fixed set of possible values. 'input' is used for parameters that allow free input, possibly restricted to a certain range. Template_type is always 'selectable' for a selectable parameter.
                                             * @enum {string}
                                             */
                                            template_type?: 'selectable';
                                            /**
                                             * @description Describes the type of parameter. Parameters can be integers, floats, boolean or string. Data_type is always 'float' for a selectable float.
                                             * @enum {string}
                                             */
                                            data_type?: 'float';
                                            /** @description List of values that this float selectable can take. */
                                            options?: number[];
                                            /** @description Not implemented at this moment */
                                            ui_rules?: Record<string, never>;
                                            /** @description Not implemented at this moment. */
                                            editable?: boolean;
                                        }
                                  )[];
                              }
                        )[];
                        /**
                         * @description Mongo ID of the object
                         * @example 60d31793d5f1fb7e6e3c1a4c
                         */
                        task_id?: string;
                        /** @description Title of the task the configuration is connected to */
                        task_title?: string;
                    };
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    SetTaskConfiguration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
                /** @description The ID of the task of interest. */
                task_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @description Array of configurable parameter objects for the different components in the task, as well as the hyper parameters for the current algorithm in the task */
                    components: {
                        entity_identifier:
                            | {
                                  workspace_id?: string;
                                  /**
                                   * @description Mongo ID of the object
                                   * @example 60d31793d5f1fb7e6e3c1a4c
                                   */
                                  project_id?: string;
                                  /**
                                   * @description Mongo ID of the task
                                   * @example 60d31793d5f1fb7e6e3c1a4c
                                   */
                                  task_id?: string;
                                  /**
                                   * @description If the configuration is a component configuration, describes the component.
                                   * @enum {string}
                                   */
                                  component:
                                      | 'NULL_COMPONENT'
                                      | 'SUBSET_MANAGER'
                                      | 'DATASET_COUNTER'
                                      | 'PROJECT_ACTIVE_LEARNING'
                                      | 'TASK_ACTIVE_LEARNING'
                                      | 'TASK_NODE'
                                      | 'PIPELINE_DATASET_MANAGER';
                                  /**
                                   * @description Describes the type of the configuration. Set to COMPONENT_PARAMETERS for a configuration that relates to a component.
                                   * @enum {string}
                                   */
                                  type: 'COMPONENT_PARAMETERS';
                              }
                            | {
                                  workspace_id?: string;
                                  /**
                                   * @description Mongo ID of the object
                                   * @example 60d31793d5f1fb7e6e3c1a4c
                                   */
                                  model_storage_id: string;
                                  /**
                                   * @description Describes the type of the configurable parameters. For hyper parameters, type is set to HYPER_PARAMETERS.
                                   * @enum {string}
                                   */
                                  type: 'HYPER_PARAMETERS';
                              }
                            | {
                                  workspace_id?: string;
                                  /**
                                   * @description Mongo ID of the object
                                   * @example 60d31793d5f1fb7e6e3c1a4c
                                   */
                                  model_storage_id: string;
                                  /** @description The name of the hyper parameter group */
                                  group_name: string;
                                  /**
                                   * @description Describes the type of the component. For hyper parameter groups, type is always set to HYPER_PARAMETER_GROUP
                                   * @enum {string}
                                   */
                                  type: 'HYPER_PARAMETER_GROUP';
                              };
                        groups?: {
                            /** @description Name of the parameter group */
                            name: string;
                            /** @description Array of parameters */
                            parameters: {
                                /** @description Value to set the parameter to. */
                                value: string | number | boolean;
                                /** @description Name to identify the parameter by in the system. */
                                name: string;
                            }[];
                        }[];
                        parameters?: {
                            /** @description Value to set the parameter to. */
                            value: string | number | boolean;
                            /** @description Name to identify the parameter by in the system. */
                            name: string;
                        }[];
                    }[];
                };
            };
        };
        responses: {
            /** @description Configuration updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
            /** @description Configuration cannot be saved to the server */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    GetProductInfo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Product Information */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "product-version": "1.0.0"
                     *     } */
                    'application/json': {
                        /** @description Version number of installed product. */
                        'product-version'?: string;
                    };
                };
            };
        };
    };
    DatasetImportUploadFile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'multipart/form-data': {
                    /**
                     * File
                     * Format: binary
                     * @description The dataset file to be uploaded.
                     */
                    file?: string;
                };
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Request Entity Too Large */
            413: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
        };
    };
    CreateTusDatasetUpload: {
        parameters: {
            query?: never;
            header?: {
                /** @description version of TUS used by the client */
                'tus-resumable'?: string;
                /** @description size in bytes of the file to be created */
                'upload-length'?: number;
            };
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully created TUS upload */
            201: {
                headers: {
                    /** @description URL for data upload */
                    location?: string;
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Object not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
            /** @description Unsupported TUS version */
            412: {
                headers: {
                    /** @description list of supported TUS versions */
                    'tus-version'?: string;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
            /** @description Request Entity Too Large */
            413: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
        };
    };
    TusDatasetUploadOptions: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            204: {
                headers: {
                    /** @description version of TUS used by the server */
                    'tus-resumable'?: string;
                    /** @description list of supported TUS versions */
                    'tus-version'?: string;
                    /** @description list of supported TUS extensions */
                    'tus-extension'?: string;
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Object not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    TusDatasetUploadDelete: {
        parameters: {
            query?: never;
            header?: {
                /** @description version of TUS used by the client */
                'tus-resumable'?: string;
            };
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the file uploaded using the TUS protocol.
                 *     This can be found in the `Location` response header of [TUS upload initialization](#Project%20Import%2FExport/CreateTUSUpload). */
                file_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description File not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    TusDatasetUploadHead: {
        parameters: {
            query?: never;
            header?: {
                /** @description version of TUS used by the client */
                'tus-resumable'?: string;
            };
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the file uploaded using the TUS protocol.
                 *     This can be found in the `Location` response header of [TUS upload initialization](#Project%20Import%2FExport/CreateTUSUpload). */
                file_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    /** @description total size in bytes of the file */
                    'upload-length'?: number;
                    /** @description size in bytes of data uploaded so far */
                    'upload-offset'?: number;
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request. File ID is in wrong format. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description File not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
            /** @description Unsupported TUS version */
            412: {
                headers: {
                    /** @description list of supported TUS versions */
                    'tus-version'?: string;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    TusDatasetUploadPatch: {
        parameters: {
            query?: never;
            header?: {
                /** @description version of TUS used by the client */
                'tus-resumable'?: string;
                'content-type'?: string;
                /** @description size in bytes of data uploaded so far */
                'upload-offset'?: number;
            };
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the file uploaded using the TUS protocol.
                 *     This can be found in the `Location` response header of [TUS upload initialization](#Project%20Import%2FExport/CreateTUSUpload). */
                file_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/offset+octet-stream': string;
            };
        };
        responses: {
            /** @description Success */
            204: {
                headers: {
                    /** @description size in bytes of data uploaded so far */
                    'upload-offset'?: number;
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description File not found response */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
            /** @description Unsupported TUS version */
            412: {
                headers: {
                    /** @description list of supported TUS versions */
                    'tus-version'?: string;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
            /** @description Unsupported Media Type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PrepareDatasetForImport: {
        parameters: {
            query: {
                /** @description The ID of the uploaded file */
                file_id: string;
            };
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /**
                         * @description Mongo ID of the object
                         * @example 60d31793d5f1fb7e6e3c1a4c
                         */
                        job_id?: string;
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description File not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Precondition failed */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
        };
    };
    ImportProjectFromDataset: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /**
                     * File Id
                     * @example 60d31793d5f1fb7e6e3c1a4c
                     */
                    file_id: string;
                    /**
                     * Project Name
                     * @example Pet Classification
                     */
                    project_name: string;
                    /**
                     * Task Type
                     * @enum {string}
                     */
                    task_type:
                        | 'classification'
                        | 'classification_hierarchical'
                        | 'detection'
                        | 'segmentation'
                        | 'instance_segmentation'
                        | 'anomaly'
                        | 'detection_oriented'
                        | 'detection_classification'
                        | 'detection_segmentation'
                        | 'keypoint_detection';
                    /** @example [
                     *       {
                     *         "name": "cat",
                     *         "color": "#0014ffff"
                     *       },
                     *       {
                     *         "name": "dog",
                     *         "color": "#0015ffff"
                     *       }
                     *     ] */
                    labels: {
                        name?: string;
                        color?: string;
                    }[];
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /**
                         * @description Mongo ID of the object
                         * @example 60d31793d5f1fb7e6e3c1a4c
                         */
                        job_id?: string;
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description File not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Precondition failed */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
        };
    };
    PrepareDatasetForImportToProject: {
        parameters: {
            query: {
                /** @description The ID of the uploaded file */
                file_id: string;
            };
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /**
                         * @description Mongo ID of the object
                         * @example 60d31793d5f1fb7e6e3c1a4c
                         */
                        job_id?: string;
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description File not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Precondition failed */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
        };
    };
    ImportDatasetToProject: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json':
                    | {
                          /**
                           * File Id
                           * @example 60d31793d5f1fb7e6e3c1a4c
                           */
                          file_id: string;
                          /**
                           * Dataset Id
                           * @example 60d31793d5f1fb7e6e3c1a4d
                           */
                          dataset_id: string;
                          /**
                           * Dataset name
                           * @example
                           * @enum {string}
                           */
                          dataset_name: '';
                          /**
                           * Map of dataset label names to project label ids
                           * @example {
                           *       "person": "627d0c97bc34fab51b383f23",
                           *       "bicycle": "627d0c97bc34fab51b383f23",
                           *       "car": "627d0c97bc34fab51b383f22"
                           *     }
                           */
                          labels_map: Record<string, never>;
                      }
                    | {
                          /**
                           * File Id
                           * @example 60d31793d5f1fb7e6e3c1a4c
                           */
                          file_id: string;
                          /**
                           * Dataset Id
                           * @example
                           * @enum {string}
                           */
                          dataset_id: '';
                          /**
                           * Dataset name
                           * @example New dataset name
                           */
                          dataset_name: string;
                          /**
                           * Map of dataset label names to project label ids
                           * @example {
                           *       "person": "627d0c97bc34fab51b383f23",
                           *       "bicycle": "627d0c97bc34fab51b383f23",
                           *       "car": "627d0c97bc34fab51b383f22"
                           *     }
                           */
                          labels_map: Record<string, never>;
                      };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /**
                         * @description Mongo ID of the object
                         * @example 60d31793d5f1fb7e6e3c1a4c
                         */
                        job_id?: string;
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description File not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Precondition failed */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
        };
    };
    TriggerDatasetExport: {
        parameters: {
            query: {
                /** @description The format to which to export the dataset */
                export_format: 'coco' | 'yolo' | 'voc' | 'datumaro';
                /** @description Boolean that indicates if unannotated media should be included in the export dataset. */
                include_unannotated_media?: boolean;
                /** @description If true, videos will be exported as a set of images, one for each annotated frame. If the specified dataset format cannot natively represent videos (e.g., VOC, COCO, ...), this parameter is overridden to true by the server. Conversely, if the format is Datumaro and this option is false, videos will be exported fully. */
                save_video_as_images?: boolean;
            };
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
                /** @description The ID of the dataset in the project. */
                dataset_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /**
                         * @description Mongo ID of the object
                         * @example 60d31793d5f1fb7e6e3c1a4c
                         */
                        job_id?: string;
                    };
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description File not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
        };
    };
    DownloadExportedDataset: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
                /** @description The ID of the dataset in the project. */
                dataset_id: string;
                /** @description The ID of the export dataset of interest */
                export_dataset_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Redirect to the pre-signed URL for downloading the exported dataset archive */
            307: {
                headers: {
                    /** @description The MIME type of the returned content */
                    'Content-Type'?: string;
                    /** @description Indicates that the server supports range requests */
                    'Accept-Ranges'?: string;
                    /** @description The URL to which the client is redirected */
                    Location?: string;
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description File not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
        };
    };
    CreateTusProjectUpload: {
        parameters: {
            query?: never;
            header?: {
                /** @description version of TUS used by the client */
                'tus-resumable'?: string;
                /** @description size in bytes of the file to upload */
                'upload-length'?: number;
            };
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully created TUS upload */
            201: {
                headers: {
                    /** @description URL for data upload */
                    location?: string;
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Object not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
            /** @description Unsupported TUS version */
            412: {
                headers: {
                    /** @description list of supported TUS versions */
                    'tus-version'?: string;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
            /** @description Request Entity Too Large */
            413: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
        };
    };
    TusProjectUploadOptions: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            204: {
                headers: {
                    /** @description version of TUS used by the server */
                    'tus-resumable'?: string;
                    /** @description list of supported TUS versions */
                    'tus-version'?: string;
                    /** @description list of supported TUS extensions */
                    'tus-extension'?: string;
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Object not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    TusProjectUploadHead: {
        parameters: {
            query?: never;
            header?: {
                /** @description version of TUS used by the client */
                'tus-resumable'?: string;
            };
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the file uploaded using the TUS protocol.
                 *     This can be found in the `Location` response header of [TUS upload initialization](#Project%20Import%2FExport/CreateTUSUpload). */
                file_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    /** @description total size in bytes of the file */
                    'upload-length'?: number;
                    /** @description size in bytes of data uploaded so far */
                    'upload-offset'?: number;
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Object not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
            /** @description Unsupported TUS version */
            412: {
                headers: {
                    /** @description list of supported TUS versions */
                    'tus-version'?: string;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    TusProjectUploadPatch: {
        parameters: {
            query?: never;
            header?: {
                /** @description version of TUS used by the client */
                'tus-resumable'?: string;
                'content-type'?: string;
                /** @description size in bytes of data uploaded so far */
                'upload-offset'?: number;
            };
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the file uploaded using the TUS protocol.
                 *     This can be found in the `Location` response header of [TUS upload initialization](#Project%20Import%2FExport/CreateTUSUpload). */
                file_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/offset+octet-stream': string;
            };
        };
        responses: {
            /** @description Success */
            204: {
                headers: {
                    /** @description size in bytes of data uploaded so far */
                    'upload-offset'?: number;
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Object not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
            /** @description Unsupported TUS version */
            412: {
                headers: {
                    /** @description list of supported TUS versions */
                    'tus-version'?: string;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    TriggerProjectExport: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Object not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    ImportProject: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /**
                     * @description The ID of the uploaded project archive zip file
                     * @example 60d31793d5f1fb7e6e3c1a4c
                     */
                    file_id: string;
                    /** @description The name to assign to the imported project */
                    project_name?: unknown;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /**
                         * @description Mongo ID of the object
                         * @example 60d31793d5f1fb7e6e3c1a4c
                         */
                        job_id?: string;
                    };
                };
            };
            /** @description Object not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
            /** @description Too many projects */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
        };
    };
    PrepareCodeDeployment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @description Array of model identifiers */
                    models: {
                        /**
                         * @description Mongo ID of the object
                         * @example 60d31793d5f1fb7e6e3c1a4c
                         */
                        model_id: string;
                        /**
                         * @description Mongo ID of the object
                         * @example 60d31793d5f1fb7e6e3c1a4c
                         */
                        model_group_id: string;
                    }[];
                };
            };
        };
        responses: {
            /** @description Code deployment started successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /**
                         * @description Mongo ID of the object
                         * @example 60d31793d5f1fb7e6e3c1a4c
                         */
                        id?: string;
                        /** @description progress of code deployment */
                        progress?: number;
                        /**
                         * @description State of the deployment
                         * @enum {string}
                         */
                        state?: 'NONE' | 'PREPARING' | 'DONE' | 'FAILED';
                        /** @description Identifiers of the exported models */
                        models?: {
                            /**
                             * @description Mongo ID of the object
                             * @example 60d31793d5f1fb7e6e3c1a4c
                             */
                            model_id: string;
                            /**
                             * @description Mongo ID of the object
                             * @example 60d31793d5f1fb7e6e3c1a4c
                             */
                            model_group_id: string;
                        }[];
                        /** @description Id of the user who started the deployment */
                        creator_id?: string;
                        /** @description Creation time of the model */
                        creation_time?: string;
                    };
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    GetCodeDeployment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
                /** @description The ID of the deployment */
                deployment_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieved details for deployment on code level */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /**
                         * @description Mongo ID of the object
                         * @example 60d31793d5f1fb7e6e3c1a4c
                         */
                        id?: string;
                        /** @description progress of code deployment */
                        progress?: number;
                        /**
                         * @description State of the deployment
                         * @enum {string}
                         */
                        state?: 'NONE' | 'PREPARING' | 'DONE' | 'FAILED';
                        /** @description Identifiers of the exported models */
                        models?: {
                            /**
                             * @description Mongo ID of the object
                             * @example 60d31793d5f1fb7e6e3c1a4c
                             */
                            model_id: string;
                            /**
                             * @description Mongo ID of the object
                             * @example 60d31793d5f1fb7e6e3c1a4c
                             */
                            model_group_id: string;
                        }[];
                        /** @description Id of the user who started the deployment */
                        creator_id?: string;
                        /** @description Creation time of the model */
                        creation_time?: string;
                    };
                };
            };
            /** @description Object not found. See the examples for details. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    DownloadCodeDeployment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
                /** @description The ID of the deployment */
                deployment_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieved code deployment zipfile */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'zip file': string;
                };
            };
            /** @description Object not found. See the examples for detail. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
            /** @description Deployment is not ready. See the examples for detail. */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    DownloadDeploymentPackage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the organization. */
                organization_id: string;
                /** @description The ID of the workspace. */
                workspace_id: string;
                /** @description The ID of the project. */
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @description Array of model identifiers */
                    models: {
                        /**
                         * @description Mongo ID of the object
                         * @example 60d31793d5f1fb7e6e3c1a4c
                         */
                        model_id: string;
                        /**
                         * @description Mongo ID of the object
                         * @example 60d31793d5f1fb7e6e3c1a4c
                         */
                        model_group_id: string;
                    }[];
                    /** @enum {unknown} */
                    package_type: 'ovms' | 'geti_sdk';
                };
            };
        };
        responses: {
            /** @description Retrieved deployment package zipfile */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'zip file': string;
                };
            };
            /** @description Object not found. See the examples for detail. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
            /** @description Invalid package type */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        http_status:
                            | 400
                            | 404
                            | 405
                            | 409
                            | 412
                            | 413
                            | 415
                            | 422
                            | 423
                            | 500
                            | 501
                            | 503;
                        /** @description Message from server */
                        message: string;
                        /** @description Error code from server */
                        error_code: string;
                    };
                };
            };
        };
    };
    get_balance_api_v1_organizations__organization_id__balance_get: {
        parameters: {
            query?: {
                /** @description Optional parameter. If not provided, the current credits balance is returned. */
                date?: number | null;
            };
            header?: never;
            path: {
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** Incoming */
                        incoming: number;
                        /** Available */
                        available: number;
                        /** Blocked */
                        blocked: number;
                    };
                };
            };
            /** @description Organization doesn't have any active credit accounts */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** Detail */
                        detail?: unknown[];
                    };
                };
            };
        };
    };
    get_credit_accounts_api_v1_organizations__organization_id__credit_accounts_get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
            };
            header?: never;
            path: {
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "total_matched": 2,
                     *       "next_page": null,
                     *       "credit_accounts": [
                     *         {
                     *           "id": "de13930f-0028-47e9-a228-21d511e8d281",
                     *           "organization_id": "8ee3f85c-6fa7-4e7b-be4e-ae05eda8774e",
                     *           "name": "Freemium Credits",
                     *           "renewable_amount": 1000,
                     *           "renewal_day_of_month": 31,
                     *           "created": 1722439231635,
                     *           "updated": 1722439231635,
                     *           "expires": null,
                     *           "balance": {
                     *             "incoming": 0,
                     *             "available": 0,
                     *             "blocked": 0
                     *           }
                     *         },
                     *         {
                     *           "id": "95e31d4b-5b48-4817-bdff-a4998f44bac9",
                     *           "organization_id": "8ee3f85c-6fa7-4e7b-be4e-ae05eda8774e",
                     *           "name": "Welcoming Credits",
                     *           "renewable_amount": 0,
                     *           "renewal_day_of_month": null,
                     *           "created": 1722439231576,
                     *           "updated": 1722439231576,
                     *           "expires": 1725117631575,
                     *           "balance": {
                     *             "incoming": 3000,
                     *             "available": 2941,
                     *             "blocked": 59
                     *           }
                     *         }
                     *       ]
                     *     } */
                    'application/json': {
                        /** Total Matched */
                        total_matched: number;
                        next_page?: {
                            /** Limit */
                            limit: number;
                            /** Skip */
                            skip: number;
                        } | null;
                        /** Credit Accounts */
                        credit_accounts: {
                            /**
                             * Id
                             * Format: uuid
                             */
                            id: string;
                            /** Organization Id */
                            organization_id: string;
                            /** Name */
                            name: string;
                            /** Renewable Amount */
                            renewable_amount?: number | null;
                            /** Renewal Day Of Month */
                            renewal_day_of_month?: number | null;
                            /** Created */
                            created: number;
                            /** Updated */
                            updated: number;
                            /** Expires */
                            expires?: number | null;
                            /** BalanceResponse */
                            balance: {
                                /** Incoming */
                                incoming: number;
                                /** Available */
                                available: number;
                                /** Blocked */
                                blocked: number;
                            };
                        }[];
                    };
                };
            };
            /** @description Organization doesn't have any active credit accounts */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** Detail */
                        detail?: unknown[];
                    };
                };
            };
        };
    };
    get_organization_subscriptions_api_v1_organizations__organization_id__subscriptions_get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
            };
            header?: never;
            path: {
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "total_matched": 1,
                     *       "next_page": null,
                     *       "subscriptions": [
                     *         {
                     *           "id": "e4187c27-2c1a-4265-9233-04950fd93471",
                     *           "organization_id": "8ee3f85c-6fa7-4e7b-be4e-ae05eda8774e",
                     *           "workspace_id": "23f347e1-cefc-4d98-9001-c551b6edb269",
                     *           "product_id": "fafa904e-4ae9-4a5c-a4a7-ea22eee73c03",
                     *           "status": "ACTIVE",
                     *           "created": 1722439231555,
                     *           "updated": 1722439231555,
                     *           "next_renewal_date": 1725062400000,
                     *           "previous_renewal_date": null
                     *         }
                     *       ]
                     *     } */
                    'application/json': {
                        /** Total Matched */
                        total_matched: number;
                        next_page?: {
                            /** Limit */
                            limit: number;
                            /** Skip */
                            skip: number;
                        } | null;
                        /** Subscriptions */
                        subscriptions: {
                            /**
                             * Id
                             * Format: uuid
                             */
                            id: string;
                            /** Organization Id */
                            organization_id: string;
                            /** Workspace Id */
                            workspace_id: string;
                            /**
                             * Product Id
                             * Format: uuid
                             */
                            product_id: string;
                            /** Status */
                            status: string;
                            /** Created */
                            created: number;
                            /** Updated */
                            updated: number;
                            /** Next Renewal Date */
                            next_renewal_date?: number | null;
                            /** Previous Renewal Date */
                            previous_renewal_date?: number | null;
                        }[];
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** Detail */
                        detail?: unknown[];
                    };
                };
            };
        };
    };
    get_active_subscription_api_v1_organizations__organization_id__subscriptions_active_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "id": "e4187c27-2c1a-4265-9233-04950fd93471",
                     *       "organization_id": "8ee3f85c-6fa7-4e7b-be4e-ae05eda8774e",
                     *       "workspace_id": "23f347e1-cefc-4d98-9001-c551b6edb269",
                     *       "product_id": "fafa904e-4ae9-4a5c-a4a7-ea22eee73c03",
                     *       "status": "ACTIVE",
                     *       "created": 1722439231555,
                     *       "updated": 1722439231555,
                     *       "next_renewal_date": 1725062400000,
                     *       "previous_renewal_date": null
                     *     } */
                    'application/json': {
                        /**
                         * Id
                         * Format: uuid
                         */
                        id: string;
                        /** Organization Id */
                        organization_id: string;
                        /** Workspace Id */
                        workspace_id: string;
                        /**
                         * Product Id
                         * Format: uuid
                         */
                        product_id: string;
                        /** Status */
                        status: string;
                        /** Created */
                        created: number;
                        /** Updated */
                        updated: number;
                        /** Next Renewal Date */
                        next_renewal_date?: number | null;
                        /** Previous Renewal Date */
                        previous_renewal_date?: number | null;
                    };
                };
            };
            /** @description Organization doesn't have any active subscriptions */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** Detail */
                        detail?: unknown[];
                    };
                };
            };
        };
    };
    get_transactions_api_v1_organizations__organization_id__transactions_get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
                /** @description Milliseconds timestamp */
                from_date?: number | null;
                /** @description Milliseconds timestamp */
                to_date?: number | null;
                sort?: string[];
                project_id?: string | null;
                usage_type?: ('optimization' | 'training') | null;
            };
            header?: never;
            path: {
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "total_matched": 3,
                     *       "next_page": null,
                     *       "transactions": [
                     *         {
                     *           "credits": 12,
                     *           "project_id": "66aa8abff93bad108c06ec0a",
                     *           "service_name": "optimization",
                     *           "milliseconds_timestamp": 1722512643184
                     *         },
                     *         {
                     *           "credits": 12,
                     *           "project_id": "66aa8abff93bad108c06ec0a",
                     *           "service_name": "training",
                     *           "milliseconds_timestamp": 1722511748352
                     *         },
                     *         {
                     *           "credits": 59,
                     *           "project_id": "66aa882df93bad108c06eb0d",
                     *           "service_name": "training",
                     *           "milliseconds_timestamp": 1722511718089
                     *         }
                     *       ]
                     *     } */
                    'application/json': {
                        /** Total Matched */
                        total_matched: number;
                        next_page?: {
                            /** Limit */
                            limit: number;
                            /** Skip */
                            skip: number;
                        } | null;
                        /** Transactions */
                        transactions: {
                            /** Credits */
                            credits: number;
                            /** Project Id */
                            project_id?: string | null;
                            /** Service Name */
                            service_name: string;
                            /** Milliseconds Timestamp */
                            milliseconds_timestamp: number;
                        }[];
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** Detail */
                        detail?: unknown[];
                    };
                };
            };
        };
    };
    get_credit_consumption_aggregates_api_v1_organizations__organization_id__transactions_aggregates_get: {
        parameters: {
            query?: {
                /** @description Milliseconds timestamp */
                from_date?: number | null;
                /** @description Milliseconds timestamp */
                to_date?: number | null;
                project_id?: string[] | null;
                key?: ('project' | 'service_name' | 'date')[];
            };
            header?: never;
            path: {
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** Aggregates */
                        aggregates: {
                            /** Group */
                            group: {
                                /** Key */
                                key: string;
                                /** Value */
                                value: string | number;
                            }[];
                            /** AggregatesResult */
                            result: {
                                /** Credits */
                                credits: number;
                                /** ResourcesAmount */
                                resources: {
                                    /**
                                     * Images
                                     * @default 0
                                     */
                                    images: number;
                                    /**
                                     * Frames
                                     * @default 0
                                     */
                                    frames: number;
                                };
                            };
                        }[];
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** Detail */
                        detail?: unknown[];
                    };
                };
            };
        };
    };
}
